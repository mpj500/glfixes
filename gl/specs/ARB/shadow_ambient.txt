Name

    ARB_shadow_ambient

Name Strings

    GL_ARB_shadow_ambient

Contact

    Brian Paul (brian_e_paul 'at' yahoo.com)

Notice

    Copyright (c) 2002-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by ARB on February 14, 2002.

Version

    Last Modified Date: 12 December 2001

Number

    ARB Extension #24

Dependencies

    OpenGL 1.1 is required.
    ARB_shadow is required.
    ARB_depth_texture is required.
    This extension is written against the OpenGL 1.3 Specification.

Overview

    This is based on the GL_SGIX_shadow_ambient extension and is layered
    upon the GL_ARB_shadow extension.

    Basically, this extension allows the user to specify the texture
    value to use when the texture compare function fails.  Normally
    this value is zero.  By allowing an arbitrary value we can get
    functionality which otherwise requires an advanced texture
    combine extension (such as GL_NV_register_combiners) and multiple
    texture units.

IP Status

    None.

Issues

    (1) How is this extension different from GL_SGIX_shadow_ambient?

      It's functionally identical.  Since the original spec isn't in
      the extension registry this one was written from scratch.

    (2) Is this extension really needed?

      RESOLUTION: Yes, if an advanced texture combine extension is not
      available.  From Mark Kilgard's GDC presentation on shadow mapping:

      The desired color for a lit, textured, shadow fragment is:

      ( ambient + diffuseShade * diffuse) * decal + specular * shade

      where diffuseShade = dimming + ( 1.0 - dimming ) * shade, and
      shade is the result of the shadow test in [0,1].  dimming
      expresses the scattered light in a scene.

      If we limit shade to the range [<dimming>, 1] (where <dimming> is
      TEXTURE_FAIL_VALUE_ARB) then we can express the diffuse term with
      the standard GL_MODULATE texture env mode.

      Furthermore, this extension allows implementing shadow arithmetic
      with a single texture stage.  Otherwise, two texture stages are
      needed in order to compute diffuseShade * diffuse * decal.

      This extension is also useful for implementing shadowed lighting
      expressions other than the one above.  In particular, a "poor-man's"
      shadow mode can be implemented by setting TEXTURE_FAIL_VALUE_ARB to
      the scene's ambient intensity and the texture environment mode to
      GL_MODULATE.  This is the intention of the original
      GL_SGIX_shadow_ambient extension.

    (3) What are the downsides of this extension?

      This extension places some arithmetic in the texture sampling logic
      which would otherwise be better implemented in the texture combine
      logic.

      Also, there probably aren't many (if any) other uses for this logic
      other than shadow ambient term.

      Those who already implement advanced texture combine modes probably
      won't want to implement this extension.

    (4) What should the "shadow ambient" variable be named:

      RESOLUTION: TEXTURE_COMPARE_FAIL_VALUE_ARB since this extension
      specifies the value used when the texture comparison function fails.

    (5) Is GL_ARB_shadow_ambient a good name for this extension?

      RESOLUTION:  Probably.  Even though this extension is phrased in
      general terms, it's going to be used almost exclusively for shadow
      mapping applications.

    (6) Should TEXTURE_COMPARE_FAIL_VALUE_ARB be an alias for
      GL_SHADOW_AMBIENT_SGIX (from GL_SGIX_shadow_ambient)?

      RESOLUTION: Yes.  It serves the same purpose and avoids adding
      yet more state to texture objects.

New Procedures and Functions

    None

New Tokens


    TEXTURE_COMPARE_FAIL_VALUE_ARB  0x80BF  (same as SHADOW_AMBIENT_SGIX)

