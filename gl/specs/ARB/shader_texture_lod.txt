Name

    ARB_shader_texture_lod

Name Strings

    GL_ARB_shader_texture_lod

Contributors

    Bill Licea-Kane
    Evan Hart

    and contributors to the arb-gl2 working groups, the product
    of which provided the basis for this spec.

Contact

    Bill Licea-Kane, ATI Research (bill 'at' ati.com)

Notice

    Copyright (c) 2009-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

IP Status

    No known IP issues.

Status

    Complete. Approved by the ARB on May 13, 2009.

Version

    Last Modified Date: April 13, 2011
    Revision: 11

Number

    ARB Extension #60

Dependencies

    This extension is written against the OpenGL 2.0 Specification.

    This extension is written against The OpenGL Shading Language,
    Language Version 1.10, Document Revision 59.

    ARB_shader_objects is required.

    This extension interacts with ATI_shader_texture_lod.

    This extension interacts with ARB_texture_rectangle.

    This extension interacts with EXT_texture_filter_anisotropic.

Overview

    This extension adds additional texture functions to the
    OpenGL Shading Language which provide the shader writer
    with explicit control of LOD.

    Mipmap texture fetches and anisotropic texture fetches
    require an implicit derivatives to calculate rho, lambda
    and/or the line of anisotropy.  These implicit derivatives
    will be undefined for texture fetches occurring inside
    non-uniform control flow or for vertex shader texture
    fetches, resulting in undefined texels.

    The additional texture functions introduced with
    this extension provide explict control of LOD
    (isotropic texture functions) or provide explicit
    derivatives (anisotropic texture functions).

    Anisotropic texture functions return defined texels
    for mipmap texture fetches or anisotropic texture fetches,
    even inside non-uniform control flow.  Isotropic texture
    functions return defined texels for mipmap texture fetches,
    even inside non-uniform control flow.  However, isotropic
    texture functions return undefined texels for anisotropic
    texture fetches.

    The existing isotropic vertex texture functions:

        texture1DLod,   texture1DProjLod,
        texture2DLod,   texture2DProjLod,
        texture3DLod,   texture3DProjLod,
        textureCubeLod,
        shadow1DLod,    shadow1DProjLod,
        shadow2DLod,    shadow2DProjLod,

    are added to the built-in functions for fragment shaders.

    New anisotropic texture functions, providing explicit
    derivatives:

        texture1DGradARB(         sampler1D sampler,
                                  float P, float dPdx, float dPdy );
        texture1DProjGradARB(     sampler1D sampler,
                                  vec2  P, float dPdx, float dPdy );
        texture1DProjGradARB(     sampler1D sampler,
                                  vec4  P, float dPdx, float dPdy );

        texture2DGradARB(         sampler2D sampler,
                                  vec2  P, vec2  dPdx, vec2  dPdy );
        texture2DProjGradARB(     sampler2D sampler,
                                  vec3  P, vec2  dPdx, vec2  dPdy );
        texture2DProjGradARB(     sampler2D sampler,
                                  vec4  P, vec2  dPdx, vec2  dPdy );

        texture3DGradARB(         sampler3D sampler,
                                  vec3  P, vec3  dPdx, vec3  dPdy );
        texture3DProjGradARB(     sampler3D sampler,
                                  vec4  P, vec3  dPdx, vec3  dPdy );

        textureCubeGradARB(       samplerCube sampler,
                                  vec3  P, vec3  dPdx, vec3  dPdy );

        shadow1DGradARB(          sampler1DShadow sampler,
                                  vec3  P, float dPdx, float dPdy );
        shadow1DProjGradARB(      sampler1DShadow sampler,
                                  vec4  P, float dPdx, float dPdy );

        shadow2DGradARB(          sampler2DShadow sampler,
                                  vec3  P, vec2  dPdx, vec2  dPdy );
        shadow2DProjGradARB(      sampler2DShadow sampler,
                                  vec4  P, vec2  dPdx, vec2  dPdy );


        texture2DRectGradARB(     sampler2DRect sampler,
                                  vec2  P, vec2  dPdx, vec2  dPdy );
        texture2DRectProjGradARB( sampler2DRect sampler,
                                  vec3  P, vec2  dPdx, vec2  dPdy );
        texture2DRectProjGradARB( sampler2DRect sampler,
                                  vec4  P, vec2  dPdx, vec2  dPdy );

        shadow2DRectGradARB(      sampler2DRectShadow sampler,
                                  vec3  P, vec2  dPdx, vec2  dPdy );
        shadow2DRectProjGradARB(  sampler2DRectShadow sampler,
                                  vec4  P, vec2  dPdx, vec2  dPdy );

     are added to the built-in functions for vertex shaders
     and fragment shaders.

New Procedures and Functions

    None

New Tokens


