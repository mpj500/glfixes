Name

    ARB_sample_shading

Name Strings

    GL_ARB_sample_shading

Contact

    Eric Werness, NVIDIA Corporation (ewerness 'at' nvidia.com)
    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Contributors

    Murat Balci, AMD
    Pierre Boudier, AMD
    Pat Brown, NVIDIA
    Greg Roth, NVIDIA
    Graham Sellers, AMD
    Eric Werness, NVIDIA

Notice

    Copyright (c) 2009-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB on July 3, 2009.

Version

    Last Modified Date:         02/02/2010
    Revision:                   8

Number

    ARB Extension #70

Dependencies

    OpenGL 2.0 is required.

    OpenGL Shading Language 1.30 is required

    This extension is written against the OpenGL 2.0 specification and
    version 1.30 of the OpenGL Shading Language Specification.

Overview

    In standard multisample rendering, an implementation is allowed to
    assign the same color and texture coordinate values to each sample,
    which then allows the optimization where the shader is only
    evaluated once and then distributed to the samples that have been
    determined to be covered by the primitive currently being
    rasterized. This can cause aliasing where the input color and
    texture coordinates are used to generate a result that doesn't
    antialias itself, for example with alpha-tested transparency.

    This extension adds the ability to explicitly request that an
    implementation use a minimum number of unique set of fragment
    computation inputs when multisampling a pixel. Specifying such a
    requirement can reduce aliasing that results from evaluating the
    fragment computations too few times per pixel.

    This extension adds new global state that controls the minimum
    number of samples for which attribute data is independently
    interpolated. When enabled, all operations that were traditionally
    executed per-fragment operate independently on each sample.

    This also extends the shading language to allow control over the
    sample being processed. This includes built-in fragment input
    variables identifying the sample number and position being processed
    when executing fragment shaders per sample.

New Procedures and Functions

    void MinSampleShadingARB(clampf value);

New Tokens


        SAMPLE_SHADING_ARB                              0x8C36


        MIN_SAMPLE_SHADING_VALUE_ARB                    0x8C37

