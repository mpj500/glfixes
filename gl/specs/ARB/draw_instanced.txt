Name

    ARB_draw_instanced

Name Strings

    GL_ARB_draw_instanced

Contributors
    Michael Gold, NVIDIA
    James Helferty, TransGaming Inc.
    Daniel Koch, TransGaming Inc.

Contact

    James Helferty, TransGaming Inc. (james 'at' transgaming.com)
    Daniel Koch, TransGaming Inc. (daniel 'at' transgaming.com)

Notice

    Copyright (c) 2008-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

IP Status

    Unknown

Status

    Approved by the ARB on July 11, 2008

Version

    Last Modified Date:  April 8, 2011
    Author Revision: 5

Number

    ARB Extension #44

Dependencies

    OpenGL 2.0 is required.

    The extension is written against the OpenGL 2.1 Specification.

    EXT_gpu_shader4 or NV_vertex_program4 or OpenGL 3.0 is required.

Overview

    A common use case in GL for some applications is to be able to
    draw the same object, or groups of similar objects that share
    vertex data, primitive count and type, multiple times.  This 
    extension provides a means of accelerating such use cases while 
    restricting the number of API calls, and keeping the amount of 
    duplicate data to a minimum.
    
    This extension introduces two draw calls which are conceptually
    equivalent to a series of draw calls.  Each conceptual call in
    this series is considered an "instance" of the actual draw call.
    
    This extension also introduces a read-only built-in variable to
    GLSL which contains the "instance ID."  This variable initially
    contains 0, but increases by one after each conceptual draw call.

    By using the instance ID or multiples thereof as an index into
    a uniform array containing transform data, vertex shaders can 
    draw multiple instances of an object with a single draw call.

New Tokens


New Procedures and Functions

    void DrawArraysInstancedARB(enum mode, int first, sizei count,
            sizei primcount);
    void DrawElementsInstancedARB(enum mode, sizei count, enum type,
            const void *indices, sizei primcount);

