Name

    ARB_clear_texture

Name Strings

    GL_ARB_clear_texture

Contact

    Daniel Koch, NVIDIA Corporation (dkoch 'at' nvidia.com)

Contributors

    Graham Sellers, AMD
    Jonathan Putsman, Imagination
    Ian Rominick, Intel
    Jeff Bolz, NVIDIA
    Pat Brown, NVIDIA
    Piers Daniel, NVIDIA
    James Helferty, NVIDIA
    Members of the ARB working group

Notice

    Copyright (c) 2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB on June 3, 2013.
    Ratified by the Khronos Board of Promoters on July 19, 2013.

Version

    Last Modified Date: August 12, 2013
    Revision: 16

Number

    ARB Extension #145

Dependencies

    OpenGL 1.3 is required.

    This extension is written against the OpenGL 4.3 (Core Profile)
    Specification (October 18, 2012).

    This extension interacts with EXT_texture_integer.

    This extension interacts with ARB_texture_buffer_object.

    This extension interacts with ARB_texture_multisample.

    This extension interacts with ARB_depth_texture.

    This extension interacts with EXT_packed_depth_stencil and
    ARB_framebuffer_object.

    This extension interacts with ARB_texture_stencil8.

    This extension interacts with ARB_shader_image_load_store.

    This extension interacts with ARB_internalformat_query2.

Overview

    Texture objects are fundamental to the operation of OpenGL. They are
    used as a source for texture sampling and destination for rendering
    as well as being accessed in shaders for image load/store operations
    It is also possible to invalidate the contents of a texture. It is
    currently only possible to set texture image data to known values by
    uploading some or all of a image array from application memory or by
    attaching it to a framebuffer object and using the Clear or ClearBuffer
    commands.

    Both uploading initial texture data and clearing by attaching to a
    framebuffer have potential disadvantages when one simply wants to
    initialize texture data to a known value. Uploading initial data
    requires the application to allocate a (potentially large) chunk
    of memory and transferring that to the GL.  This can be a costly
    operation both in terms of memory bandwidth and power usage.
    Alternatively, attaching a texture level to a framebuffer to clear it
    may not be possible if the texture format isn't supported for
    rendering, or even if it is, attaching the image to a framebuffer object
    may cause the texture to be allocated in certain types of memory, which
    it may otherwise not need to be placed in.

    This extension solves these problems by providing a mechanism whereby
    the contents of a texture image array can be set to known values by
    using the ClearTexImage or ClearTexSubImage commands.  These commands
    can also be useful for initializing an image that will be used for
    atomic shader operations.

IP Status

    No known IP claims.

New Procedures and Functions

    void ClearTexImage(uint texture, int level,
                       enum format, enum type,
                       const void * data);

    void ClearTexSubImage(uint texture, int level,
                          int xoffset, int yoffset, int zoffset,
                          sizei width, sizei height, sizei depth,
                          enum format, enum type,
                          const void * data);

New Types

    None

New Tokens


        CLEAR_TEXTURE           0x9365

