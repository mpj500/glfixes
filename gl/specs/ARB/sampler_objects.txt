Name

    ARB_sampler_objects

Name Strings

    GL_ARB_sampler_objects

Contact

    Graham Sellers, AMD (graham.sellers 'at' amd.com)

Contributors

    Graham Sellers, AMD
    Jaakko Konttinen, AMD
    Jeff Bolz, NVIDIA
    Daniel Koch, TransGaming
    Bruce Merry, ARM

Notice

    Copyright (c) 2010-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB at the 2010/01/22 F2F meeting.
    Approved by the Khronos Board of Promoters on March 10, 2010.

Version

    Version 13, November 12, 2014

Number

    ARB Extension #81

Dependencies

    This extension is written against the OpenGL 3.2 (Compatibility
    Profile) specification.

    This extension interacts with EXT_texture_filter_anisotropic.

    OpenGL 1.0 is required.

Overview

    In unextended OpenGL textures are considered to be sets of image
    data (mip-chains, arrays, cube-map face sets, etc.) and sampling
    state (sampling mode, mip-mapping state, coordinate wrapping and
    clamping rules, etc.) combined into a single object. It is typical
    for an application to use many textures with a limited set of
    sampling states that are the same between them. In order to use
    textures in this way, an application must generate and configure
    many texture names, adding overhead both to applications and to
    implementations. Furthermore, should an application wish to sample
    from a texture in more than one way (with and without mip-mapping,
    for example) it must either modify the state of the texture or
    create two textures, each with a copy of the same image data. This
    can introduce runtime and memory costs to the application.

    This extension separates sampler state from texture image data. A
    new object type is introduced, the sampler (representing generic
    sampling parameters). The new sampler objects are represented by a
    new named type encapsulating the sampling parameters of a
    traditional texture object. Sampler objects may be bound to texture
    units to supplant the bound texture's sampling state. A single
    sampler may be bound to more than one texture unit simultaneously,
    allowing different textures to be accessed with a single set of
    shared sampling parameters. Also, by binding different sampler
    objects to texture units to which the same texture has been bound,
    the same texture image data may be sampled with different sampling
    parameters.

IP Status

    No known IP claims.

New Procedures and Functions

    void GenSamplers(sizei count, uint *samplers);
    void DeleteSamplers(sizei count, const uint * samplers);
    boolean IsSampler(uint sampler);
    void BindSampler(uint unit, uint sampler);
    void SamplerParameteri(uint sampler, enum pname, int param);
    void SamplerParameterf(uint sampler, enum pname, float param);
    void SamplerParameteriv(uint sampler, enum pname, const int *params);
    void SamplerParameterfv(uint sampler, enum pname, const float *params);
    void SamplerParameterIiv(uint sampler, enum pname, const int *params);
    void SamplerParameterIuiv(uint sampler, enum pname, const uint *params);
    void GetSamplerParameteriv(uint sampler, enum pname, int *params);
    void GetSamplerParameterfv(uint sampler, enum pname, float *params);
    void GetSamplerParameterIiv(uint sampler, enum pname, int *params);
    void GetSamplerParameterIuiv(uint sampler, enum pname, uint *params);

New Tokens


        SAMPLER_BINDING                                 0x8919

