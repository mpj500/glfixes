Name

     ARB_texture_rectangle

Name Strings

     GL_ARB_texture_rectangle

Contributors

     Pat Brown
     Daniel Ginsburg
     Michael Gold
     Mark J. Kilgard
     Jon Leech
     Bill Licea-Kane
     Barthold Lichtenbelt
     Benjamin Lipchak
     Brian Paul
     John Rosasco
     Jeremy Sandmel
     Geoff Stahl

Contact

     Mark J. Kilgard, NVIDIA Corporation (mjk 'at' nvidia.com)
     Geoff Stahl, Apple Computer (gstahl 'at' apple.com)

Notice

    Copyright (c) 2004-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

     Complete. Approved by the ARB on June 8, 2004.

     Amended language re-voted by the ARB on November 3, 2005.

     Functionally identical to EXT_texture_rectangle and
     NV_texture_rectangle extensions currently shipping, except for
     the additions to the OpenGL Shading Language.

Version

     Date: October 4, 2005
     Revision: 1.21

Number

     ARB Extension #38

Dependencies

     OpenGL 1.1 is required

     OpenGL 1.4 (or ARB_texture_mirrored_repeat) affects the definition
     of this extension.

     ARB_texture_non_power_of_two trivially affects the definition of
     this extension.

     ATI_texture_mirror_once affects the definition of this extension.

     EXT_paletted_texture affects the definition of this extension.

     EXT_texture_compression_s3tc affects the definition of this
     extension.

     EXT_texture_mirror_clamp affects the definition of this extension.

     The OpenGL Shading Language specification (provided by OpenGL 2.0
     and/or ARB_shader_objects) interacts with this extension.

     This extension is written against the OpenGL 2.0 specification.

Overview

     OpenGL texturing is limited to images with power-of-two dimensions
     and an optional 1-texel border.  The ARB_texture_rectangle extension
     adds a new texture target that supports 2D textures without requiring
     power-of-two dimensions.

     Non-power-of-two sized (NPOTS) textures are useful for storing video
     images that do not have power-of-two sized (POTS).  Re-sampling
     artifacts are avoided and less texture memory may be required by
     using non-power-of-two sized textures.  Non-power-of-two sized
     textures are also useful for shadow maps and window-space texturing.

     However, non-power-of-two sized textures have limitations that
     do not apply to power-of-two sized textures.  NPOTS textures may
     not use mipmap filtering; POTS textures support both mipmapped
     and non-mipmapped filtering.  NPOTS textures support only the
     GL_CLAMP, GL_CLAMP_TO_EDGE, and GL_CLAMP_TO_BORDER wrap modes;
     POTS textures support GL_CLAMP_TO_EDGE, GL_REPEAT, GL_CLAMP,
     GL_MIRRORED_REPEAT, and GL_CLAMP_TO_BORDER (and GL_MIRROR_CLAMP_ATI
     and GL_MIRROR_CLAMP_TO_EDGE_ATI if ATI_texture_mirror_once is
     supported) .  NPOTS textures do not support an optional 1-texel
     border; POTS textures do support an optional 1-texel border.

     NPOTS textures are accessed by dimension-dependent (aka
     non-normalized) texture coordinates.  So instead of thinking of
     the texture image lying in a [0..1]x[0..1] range, the NPOTS texture
     image lies in a [0..w]x[0..h] range.

     This extension adds a new texture target and related state (proxy,
     binding, max texture size).

Issues

  1) Should rectangular textures simply be an extension to the 2D texture
     target that allows non-power-of-two widths and heights?

     No.  The rectangular texture is an entirely new texture target type
     called GL_TEXTURE_RECTANGLE_ARB.  This is because while the texture
     rectangle target relaxes the power-of-two dimensions requirements of
     the texture 2D target, it also has limitations such as the absence of
     both mipmapping and the GL_REPEAT and GL_MIRRORED_REPEAT wrap modes.
     Additionally, rectangular textures do not use [0..1] normalized
     texture coordinates.

     The texture rectangle is an analogue to the pixel rectangle primitive
     (see section 3.6 titled "Pixel Rectangles" in the core specification)
     and the framebuffer.  Just as the pixel rectangle primitive and
     the framebuffer are accessed by integer-ized dimension-dependent 2D
     coordinates, so is the texture rectangle.  Just as pixel rectangles
     and the framebuffer do not have mipmaps, nor do texture rectangles.

  2) Should 1D, 2D, 3D, or cube map textures be allowed to be NPOTS by
     this extension?

     No.  The ARB_texture_non_power_of_two extension relaxes the
     power-of-two restrictions for these conventional texture targets to
     support NPOTS while maintaining the normalized texture coordinates.

  3) How is the image of a rectangular texture specified?

     Using the standard OpenGL API for specifying a 2D texture
     image: glTexImage2D, glSubTexImage2D, glCopyTexImage2D,
     and glCopySubTexImage2D.  The target for these commands is
     GL_TEXTURE_RECTANGLE_ARB though.

     This is similar to how the texture cube map functionality uses the 2D
     texture image specification API though with its own texture target.

     The texture target GL_TEXTURE_RECTANGLE_ARB should also
     be used for glGetTexImage, glGetTexLevelParameteriv, and
     glGetTexLevelParameterfv.

  4) Should anything be said about performance?

     No, but developers should not be surprised if conventional POTS
     textures will render slightly faster than texture rectangle textures.
     This is particularly likely to be true when texture rectangle
     textures are minified leading to texture cache thrashing due to
     lack of support for mipmaps.

  5) Is mipmap filtering permitted?

     Mipmap filtering is not permitted.  Since this is the case the
     default minification filter for GL_TEXTURE_RECTANGLE_ARB targets is
     GL_LINEAR.

  6) What texture wrap modes are allowed and what is the default
     state?

     Only the GL_CLAMP, GL_CLAMP_TO_EDGE, and CLAMP_TO_BORDER
     wrap modes are allowed.  CLAMP_TO_EDGE is the default state.
     GL_REPEAT and GL_MIRRORED_REPEAT are not supported with the
     GL_TEXTURE_RECTANGLE_ARB texture target.

  7) Are texture borders supported?

     Borders are not supported.

  8) Are paletted textures supported?

     Paletted rectangular textures are not supported.

  9) Can compressed texture images be specified for a rectangular texture?

     The generic texture compression internal formats introduced by
     ARB_texture_compression are supported for rectangular textures
     because the image is not presented as compressed data and the
     ARB_texture_compression extension always permits generic texture
     compression internal formats to be stored in uncompressed form.
     Implementations are free to support generic compression internal
     formats for rectangular textures if supported but such support is
     not required.

     This extensions makes a blanket statement that specific compressed
     internal formats for use with glCompressedTexImage<n>D are NOT
     supported for rectangular textures.  This is because several existing
     hardware implementations of texture compression formats such as S3TC
     are not designed for compressing rectangular textures.  This does
     not preclude future texture compression extensions from supporting
     compressed internal formats that do work with rectangular extensions
     (by relaxing the current blanket error condition).

 10) How are rectangular textures enabled?

     Rectangular textures are enabled by enabling the
     GL_TEXTURE_RECTANGLE_ARB texture target via glEnable
     (GL_TEXTURE_RECTANGLE_ARB). This enable is prioritized above
     GL_TEXTURE_2D and below GL_TEXTURE_3D.

     From lowest priority to highest priority: GL_TEXTURE_1D,
     GL_TEXTURE_2D, GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_3D,
     GL_TEXTURE_CUBE_MAP.

 11) How are texture coordinates addressed for rectangular textures?

     Texture coordinates are addressed without being normalized from
     [0..1], instead [0..w] and [0..h] are used, where w and h are width
     and height of the texture respectively.

 12) How should applications determine the available maximum texture
     dimensions available?

     Implementation dependent rectangular texture size limitations are
     queried using the GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB parameter and
     may be different that standard texture size limits.

 13) How does the handling of the R texture component differ from
     the handling of S and T?

     The R texture coordinate for rectangular textures is handled
     as it would be for standard two dimensional textures.  Thus the
     coordinates range from [0..1] and the wrapping mode is unchanged
     from the default.

 14) Does this extension work with OpenGL 1.4's shadow mapping?

     Yes.  The one non-obvious allowance to support OpenGL 1.4's shadow
     mapping is that the R texture coordinate wrap mode remains UNCHANGED
     for rectangular textures.  Clamping of the R texture coordinate
     for rectangular textures uses the standard [0,1] interval rather
     than the [0,w_s] or [0,h_s] intervals as in the case of S and T.
     This is because R represents a depth value in the [0,1] range
     whether using a 2D or rectangular texture.

 15) How does this extension interact with GLSL based on the "OpenGL
     Shading Language Extension Conventions"?

     Unfortunately, this extension was specified and implemented
     contemporaneously with the GLSL Extension Conventions and because
     of this timing does not follow its guidance for #extension and
     adornment of new GLSL names.  Because this extension has both an
     API interaction (adding a new rectangle texture target) and a GLSL
     interaction (functions and sampler types for accessing texture
     rectangles), you can't practically use the GLSL texture rectangle
     functionality without the API functionality.  For this reason,
     detecting the GL_ARB_texture_rectangle string is sufficient for
     assuming the GLSL functionality is present.

     Conceptually, you can consider the declaration
     #extension GL_ARB_texture_rectangle : require, to allow support
     for texture rectangles, to be implicitly prepended to every
     GLSL shader when ARB_texture_rectangle is advertised.

     All future GLSL extensions should follow the "OpenGL Shading Language
     Extension Conventions" however.

 16) How can a GLSL shader tell if this extension is supported?

     "GL_ARB_texture_rectangle" preprocessor macro is predefined to be 1.

 17) Should GL_SAMPLER_2D_RECT_ARB and GL_SAMPLER_2D_RECT_SHADOW_ARB be
     returned by the "type" parameter of glGetActiveUniformARB when
     returning the type of a sampler2DRect or sampler2DRectShadow sampler
     uniform?

     Yes, there is already language in the ARB_shader_objects extension
     saying this so there's no additional language added to this
     extension.  The language is missing from OpenGL 2.0 so we add the
     ARB_shader_objects language as part of this specification too.

 18) Can a shader still turn off support for this extension?

     Yes, a shader can still include all variations of
     #extension GL_ARB_texture_rectangle in its source code. This
     includes #extension GL_ARB_texture_rectangle : disable, to
     disable support for it.


New Procedures and Functions

    None

New Tokens


    TEXTURE_RECTANGLE_ARB            0x84F5


    TEXTURE_BINDING_RECTANGLE_ARB    0x84F6


    PROXY_TEXTURE_RECTANGLE_ARB      0x84F7


    MAX_RECTANGLE_TEXTURE_SIZE_ARB   0x84F8




    SAMPLER_2D_RECT_ARB              0x8B63


    SAMPLER_2D_RECT_SHADOW_ARB       0x8B64

