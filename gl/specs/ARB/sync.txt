Name

    ARB_sync

Name Strings

    GL_ARB_sync

Contributors

    Barthold Lichtenbelt, NVIDIA
    Bill Licea-Kane, ATI
    Greg Roth, NVIDIA
    Jeff Bolz, NVIDIA
    Jeff Juliano, NVIDIA
    Jeremy Sandmel, Apple
    John Kessenich, Intel
    Jon Leech, Khronos
    Piers Daniell, NVIDIA

Contact

    Jon Leech (jon 'at' alumni.caltech.edu)

Notice

    Copyright (c) 2009-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

IP Status

    US patent #6025855 may bear on this extension (based on ARB
    discussion in March, 2003).

    The related NV_fence extension is marked "NVIDIA Proprietary".

Status

    Complete. Approved by the ARB on July 3, 2009.

Version

    September 18, 2009 (version 25)

Number

    ARB Extension #66

Dependencies

    OpenGL 3.1 is required.

    The functionality of ARB_sync was added to the OpenGL 3.2 core.

Overview

    This extension introduces the concept of "sync objects". Sync
    objects are a synchronization primitive - a representation of events
    whose completion status can be tested or waited upon. One specific
    type of sync object, the "fence sync object", is supported in this
    extension, and additional types can easily be added in the future.

    Fence sync objects have corresponding fences, which are inserted
    into the OpenGL command stream at the time the sync object is
    created. A sync object can be queried for a given condition. The
    only condition supported for fence sync objects is completion of the
    corresponding fence command. Fence completion allows applications to
    request a partial Finish, wherein all commands prior to the fence
    will be forced to complete before control is returned to the calling
    process.

    These new mechanisms allow for synchronization between the host CPU
    and the GPU, which may be accessing the same resources (typically
    memory), as well as between multiple GL contexts bound to multiple
    threads in the host CPU.

New Types

    (Implementer's Note: GLint64 and GLuint64 are defined as appropriate
    for an ISO C 99 compiler. Other language bindings, or non-ISO
    compilers, may need to use a different approach).

    #include <inttypes.h>
    typedef int64_t GLint64;
    typedef uint64_t GLuint64;
    typedef struct __GLsync *GLsync;

New Procedures and Functions

    sync FenceSync(enum condition,bitfield flags)
    boolean IsSync(sync sync)
    void DeleteSync(sync sync)

    enum ClientWaitSync(sync sync,bitfield flags,uint64 timeout)
    void WaitSync(sync sync,bitfield flags,uint64 timeout)

    void GetInteger64v(enum pname, int64 *params);
    void GetSynciv(sync sync,enum pname,sizei bufSize,sizei *length,
                   int *values)

New Tokens


        MAX_SERVER_WAIT_TIMEOUT         0x9111


        OBJECT_TYPE                     0x9112
        SYNC_CONDITION                  0x9113
        SYNC_STATUS                     0x9114
        SYNC_FLAGS                      0x9115


        SYNC_FENCE                      0x9116


        SYNC_GPU_COMMANDS_COMPLETE      0x9117


        UNSIGNALED                      0x9118
        SIGNALED                        0x9119


        SYNC_FLUSH_COMMANDS_BIT         0x00000001


        TIMEOUT_IGNORED                 0xFFFFFFFFFFFFFFFFull


        ALREADY_SIGNALED                0x911A
        TIMEOUT_EXPIRED                 0x911B
        CONDITION_SATISFIED             0x911C
        WAIT_FAILED                     0x911D


