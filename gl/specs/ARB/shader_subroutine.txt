Name

    ARB_shader_subroutine

Name Strings

    GL_ARB_shader_subroutine

Contact

    Jeff Bolz, NVIDIA Corporation (jbolz 'at' nvidia.com)

Contributors

    Barthold Lichtenbelt, NVIDIA
    Bill Licea-Kane, AMD
    Bruce Merry, ARM
    Eric Werness, NVIDIA
    Graham Sellers, AMD
    Greg Roth, NVIDIA
    Nick Haemel, AMD
    Pat Brown, NVIDIA
    Pierre Boudier, AMD
    Piers Daniell, NVIDIA

Notice

    Copyright (c) 2010-2014 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB at the 2010/01/22 F2F meeting.
    Approved by the Khronos Board of Promoters on March 10, 2010.

Version

    Last Modified Date:         02/28/2014
    Revision:                   19

Number

    ARB Extension #90

Dependencies

    This extension is written against the OpenGL 3.2 core specification and
    version 1.50 of the GLSL specification.

    ARB_gpu_shader5 is required.

    This extension interacts with NV_gpu_program5.

    This extension interacts trivially with EXT_separate_shader_objects.

Overview

    This extension adds support to shaders for "indirect subroutine calls", 
    where a single shader can include many subroutines and dynamically select
    through the API which subroutine is called from each call site. 
    Switching subroutines dynamically in this fashion can avoid the cost of 
    recompiling and managing multiple shaders, while still retaining most of
    the performance of specialized shaders.

IP Status

    No known IP claims.

New Procedures and Functions

    int GetSubroutineUniformLocation(uint program, enum shadertype, 
                                     const char *name);
    uint GetSubroutineIndex(uint program, enum shadertype,
                            const char *name);
    void GetActiveSubroutineUniformiv(uint program, enum shadertype,
                                      uint index, enum pname, int *values);
    void GetActiveSubroutineUniformName(uint program, enum shadertype,
                                        uint index, sizei bufsize,
                                        sizei *length, char *name);
    void GetActiveSubroutineName(uint program, enum shadertype, uint index, 
                                 sizei bufsize, sizei *length, char *name);
    void UniformSubroutinesuiv(enum shadertype, sizei count,
                               const uint *indices);
    void GetUniformSubroutineuiv(enum shadertype, int location,
                                 uint *params);
    void GetProgramStageiv(uint program, enum shadertype, 
                           enum pname, int *values);

New Tokens


        ACTIVE_SUBROUTINES                              0x8DE5
        ACTIVE_SUBROUTINE_UNIFORMS                      0x8DE6
        ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS             0x8E47
        ACTIVE_SUBROUTINE_MAX_LENGTH                    0x8E48
        ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH            0x8E49


        MAX_SUBROUTINES                                 0x8DE7
        MAX_SUBROUTINE_UNIFORM_LOCATIONS                0x8DE8


        NUM_COMPATIBLE_SUBROUTINES                      0x8E4A
        COMPATIBLE_SUBROUTINES                          0x8E4B
        

