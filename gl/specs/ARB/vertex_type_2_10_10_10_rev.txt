Name

    ARB_vertex_type_2_10_10_10_rev

Name Strings

    GL_ARB_vertex_type_2_10_10_10_rev

Contact

    Graham Sellers (graham.sellers 'at' amd.com)

Contributors

    Daniel Koch, TransGaming
    Graham Sellers, AMD
    Jeff Bolz, NVIDIA
    Jon Leech
    Contributors to the OES_vertex_type_10_10_10_2 extension

Notice

    Copyright (c) 2010-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB at the 2010/01/22 F2F meeting.
    Approved by the Khronos Board of Promoters on March 10, 2010.

Version

    Last Modified Date: March 8, 2010
    Author Revision: 14

Number

    ARB Extension #86

Dependencies

    This extension is written against the OpenGL 3.2 specification,
    compatibility profile.

    OpenGL 1.1 is required.

    The OpenGL 3.2, core profile specification affects the definition of
    this extension.

    This extension trivially interacts with the OES_vertex_type_10_10_10_2
    extension.

    This extension interacts with the EXT_vertex_array_bgra extension.

Overview

    This extension adds the following data formats:

    Two new vertex attribute data formats: a signed 2.10.10.10 and an
    unsigned 2.10.10.10 vertex data format. These vertex data formats
    describe a 4 component stream which can be used to store normals or
    other attributes in a quantized form. Normals, tangents, binormals
    and other vertex attributes can often be specified at reduced
    precision without introducing noticeable artifacts, reducing the
    amount of memory and memory bandwidth they consume.

IP Status

    No known IP claims.

New Procedures and Functions

    void VertexP2ui(enum type, uint value);
    void VertexP3ui(enum type, uint value);
    void VertexP4ui(enum type, uint value);
    void VertexP2uiv(enum type, const uint *value);
    void VertexP3uiv(enum type, const uint *value);
    void VertexP4uiv(enum type, const uint *value);
    void TexCoordP1ui(enum type, uint coords);
    void TexCoordP2ui(enum type, uint coords);
    void TexCoordP3ui(enum type, uint coords);
    void TexCoordP4ui(enum type, uint coords);
    void TexCoordP1uiv(enum type, const uint *coords);
    void TexCoordP2uiv(enum type, const uint *coords);
    void TexCoordP3uiv(enum type, const uint *coords);
    void TexCoordP4uiv(enum type, const uint *coords);
    void MultiTexCoordP1ui(enum texture, enum type, uint coords);
    void MultiTexCoordP2ui(enum texture, enum type, uint coords);
    void MultiTexCoordP3ui(enum texture, enum type, uint coords);
    void MultiTexCoordP4ui(enum texture, enum type, uint coords);
    void MultiTexCoordP1uiv(enum texture, enum type, const uint *coords);
    void MultiTexCoordP2uiv(enum texture, enum type, const uint *coords);
    void MultiTexCoordP3uiv(enum texture, enum type, const uint *coords);
    void MultiTexCoordP4uiv(enum texture, enum type, const uint *coords);
    void NormalP3ui(enum type, uint coords);
    void NormalP3uiv(enum type, const uint *coords);
    void ColorP3ui(enum type, uint color);
    void ColorP4ui(enum type, uint color);
    void ColorP3uiv(enum type, const uint *color);
    void ColorP4uiv(enum type, const uint *color);
    void SecondaryColorP3ui(enum type, uint color);
    void SecondaryColorP3uiv(enum type, const uint *color);
    void VertexAttribP1ui(uint index, enum type, boolean normalized,
                          uint value);
    void VertexAttribP2ui(uint index, enum type, boolean normalized,
                          uint value);
    void VertexAttribP3ui(uint index, enum type, boolean normalized,
                          uint value);
    void VertexAttribP4ui(uint index, enum type, boolean normalized,
                          uint value);
    void VertexAttribP1uiv(uint index, enum type, boolean normalized,
                          const uint *value);
    void VertexAttribP2uiv(uint index, enum type, boolean normalized,
                          const uint *value);
    void VertexAttribP3uiv(uint index, enum type, boolean normalized,
                          const uint *value);
    void VertexAttribP4uiv(uint index, enum type, boolean normalized,
                          const uint *value);

New Tokens


        UNSIGNED_INT_2_10_10_10_REV                     0x8368 (existing core enum)
        INT_2_10_10_10_REV                              0x8D9F

