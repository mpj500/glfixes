Name

    ARB_shadow

Name Strings

    GL_ARB_shadow

Contact

    Brian Paul (brian_e_paul 'at' yahoo.com)

Notice

    Copyright (c) 2002-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by ARB on February 14, 2002.

Version

    Last Modified Date: 21 January 2002

Number

    ARB Extension #23

Dependencies

    OpenGL 1.1 is required.
    ARB_depth_texture is required.
    This extension is written against the OpenGL 1.3 Specification.

Overview

    This extension clarifies the GL_SGIX_shadow extension.

    This extension supports comparing the texture R coordinate to a depth
    texture value in order to produce a boolean texture value.  This can
    be used to implement shadow maps.

    The extension is written in generic terms such that other texture
    comparison modes can be accommodated in the future.

IP Status

    XXX None?

Issues

    (1) How is this extension different from GL_SGIX_shadow?

      - It defines GL behaviour when the currently bound texture is not
        a depth texture.
      - It specifies that R is clamped to [0,1].
      - We use the standard GL_LEQUAL and GL_GEQUAL tokens instead of
        defining new ones.
      - The result may be ALPHA, LUMINANCE or INTENSITY.
      - A bit more is said about how depth textures are sampled.
      - The extension is generalized for comparison modes.

    (2) Should we use GL_LEQUAL and GL_EQUAL instead of
      GL_TEXTURE_LEQUAL_R_SGIX and GL_TEXTURE_GEQUAL_R_SGIX?

      RESOLUTION: Yes.  The old tokens are misleading.  For example,
      the GL_TEXTURE_LEQUAL_R_SGIX token should really have been named
      GL_R_LEQUAL_TEXTURE_SGIX since we're comparing R <= TEXTURE.
      This extension uses the standard GL_LEQUAL and GL_GEQUAL tokens.
      Also, the original shadow spec seems to be inconsistant with
      what was really implemented in hardware.

    (3) Use TEXTURE_COMPARE_OPERATOR_ARB or TEXTURE_COMPARE_FUNC_ARB?

      RESOLVED: Use TEXTURE_COMPARE_FUNC_ARB to be more consistant with
      the conventions of glDepthFunc(), glStencilFunc(), etc which use
      the GL_LEQUAL, GL_GEQUAL, etc tokens.

    (4) Should the result of the texture comparison be a LUMINANCE,
      INTENSITY or ALPHA texel?

      RESOLVED: Allow any of them. This is controlled by
      DEPTH_TEXTURE_MODE_ARB defined in ARB_depth_texture extension.

    (5) What if TEXTURE_COMPARE_MODE_ARB is set to COMPARE_R_TO_TEXTURE
      but the the currently bound texture is not a depth texture?

      RESOLVED: If the currently bound texture is a color (or paletted
      or color index) texture then the texture unit treats it in the
      usual manner and all texture comparison logic is bypassed.

    (6) Should the R value be clamped to [0,1] before the comparison?

      RESOLUTION: Yes, that makes sense since the depth texels are in
      the range [0,1].  Note that clamping R to [0,1] really only matters
      at the values 0 and 1.

    (7) How is bilinear or trilinear filtering implemented?

      RESOLUTION: We suggest an implementation behaviour but leave the
      details up to the implementation.  Differences here amount to the
      quality and softness of shadow edges.  Specific filtering
      algorithms could be expressed via layered extensions.  We're
      intentionally vague here to avoid IP and patent issues.

    (8) Is GL_ARB_shadow the right name for this extension?

      RESOLVED: Probably.  While this extension is expressed in rather
      generic terms which may be used by future extensions, it implements
      a rather specific operation at this time.

    (9) What about GL_SGIX_shadow_ambient?

      RESOLUTION: Omit that functionality.  It can be accomplished with
      advanced texture extensions such as GL_NV_register_combiners.
      GL_SGIX_shadow_ambient usually can't be implemented with existing
      hardware so it'll be offered as GL_ARB_shadow_ambient, rather than
      burdon this extension with it.

New Procedures and Functions

    None

New Tokens


    TEXTURE_COMPARE_MODE_ARB    0x884C
    TEXTURE_COMPARE_FUNC_ARB    0x884D


    COMPARE_R_TO_TEXTURE_ARB    0x884E

