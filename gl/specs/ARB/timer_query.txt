Name

    ARB_timer_query

Name Strings

    GL_ARB_timer_query

Contact

    Piers Daniell, NVIDIA Corporation (pdaniell 'at' nvidia.com)

Contributors

    Axel Mamode, Sony
    Brian Paul, Tungsten Graphics
    Bruce Merry, ARM
    James Jones, NVIDIA Corporation
    Pat Brown, NVIDIA
    Remi Arnaud, Sony

Notice

    Copyright (c) 2010-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB at the 2010/01/22 F2F meeting.
    Approved by the Khronos Board of Promoters on March 10, 2010.

Version

    Last Modified Date: August 9, 2014
    Revision: 13

Number

    ARB Extension #85

Dependencies

    This extension is written against the OpenGL 3.2 specification.

Overview

    Applications can benefit from accurate timing information in a number of
    different ways.  During application development, timing information can
    help identify application or driver bottlenecks.  At run time,
    applications can use timing information to dynamically adjust the amount
    of detail in a scene to achieve constant frame rates.  OpenGL
    implementations have historically provided little to no useful timing
    information.  Applications can get some idea of timing by reading timers
    on the CPU, but these timers are not synchronized with the graphics
    rendering pipeline.  Reading a CPU timer does not guarantee the completion
    of a potentially large amount of graphics work accumulated before the
    timer is read, and will thus produce wildly inaccurate results.
    glFinish() can be used to determine when previous rendering commands have
    been completed, but will idle the graphics pipeline and adversely affect
    application performance.

    This extension provides a query mechanism that can be used to determine
    the amount of time it takes to fully complete a set of GL commands, and
    without stalling the rendering pipeline.  It uses the query object
    mechanisms first introduced in the occlusion query extension, which allow
    time intervals to be polled asynchronously by the application.

IP Status

    No known IP claims.

New Procedures and Functions

     void QueryCounter(uint id, enum target);

     void GetQueryObjecti64v(uint id, enum pname, int64 *params);
     void GetQueryObjectui64v(uint id, enum pname, uint64 *params);

New Tokens


        TIME_ELAPSED                                   0x88BF


        TIMESTAMP                                      0x8E28

