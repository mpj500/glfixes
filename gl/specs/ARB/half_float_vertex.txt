Name

    ARB_half_float_vertex

Name Strings

    GL_ARB_half_float_vertex

Contact

    Daniel Koch, TransGaming, Inc (daniel 'at' transgaming.com)

Notice

    Copyright (c) 2008-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Approved by the ARB on July 11, 2008

Version

    Last Modified Date:   August 7, 2008
    Version               5

Number

    ARB Extension #48

Dependencies

    This extension is written against the OpenGL 2.1 Specification

    Based on the NV_half_float and OES_vertex_half_float extensions.

Overview

    This extension extends the usage of the half-precision (16-bit) floating-
    point quantities introduced in ARB_half_float_pixel for usage in specifying
    vertex array data.

    This extension allows applications to use half-precision floating point data
    when specifying vertices.  This can allow applications to reduce their
    memory footprint, as well as the memory bandwidth required for vertex data.

    This extension extends the existing vertex array commands to accept the new
    data type.


Issues

    1. How is this extension different from NV_half_float or
       ARB_half_float_pixel?

    This extension adds the commands for specifying half-precision
    vertex data that were initially introduced in the NV_half_float
    extension but were specifically excluded from the
    ARB_half_float_pixel extension. The functionality added in this
    extension is a proper subset of the vertex functionality defined in
    the NV_half_float extension.

    2. Should we provide immediate-mode entry points for half-precision
    vertex data?

    No. We expect the immediate-mode API to be deprecated in the near
    future and thus do not wish to encumber implementors with adding a
    significant number of additional entry points that would have
    limited usefulness. Additionaly, the half-precision floating point
    vertex data is only interesting when it is specified in array format
    (i.e., for saving storage space). If an application is using
    immediate mode APIs to load the vertex data, it does not seem overly
    onerous to require them to convert to one of the more standard data
    types.

    3. What is the half-precision floating point format?

    This is the same 16-bit floating point format that is defined in
    Section 2.1.2 of the ARB_texture_float and ARB_half_float_pixel
    extensions.

    4. How does this extension differ from OES_vertex_half_float?

    It is intended to have the same functionality, however there are a
    few minor changes spec-wise:

     a) this extension defines the additional GLX protocol, as was done
        in the NV_half_float extension.
     b) this extension uses the value of the HALF_FLOAT_ARB (0x140B)
        token that is already defined in the desktop version of the
        ARB_half_float_pixel extension (which is the same as the value
        of the HALF_FLOAT_NV token from the NV_half_float extension).
        The OES_vertex_half_float and OES_texture_half_float extensions
        use the HALF_FLOAT_OES (0x8D61) token.

    The logical progression is to define this as an ARB extension which
    is intended to supersede both the OES extension and the
    functionality from NV_half_float.

    5. Why don't the new tokens and entry points in this extension have
       "ARB" suffixes like other ARB extensions?

    RESOLVED: Unlike a normal ARB extension, this is a strict subset of
    functionality already approved in OpenGL 3.0. This extension exists
    only to support that functionality on older hardware that cannot
    implement a full OpenGL 3.0 driver. Since there are no possible
    behavior changes between the ARB extension and core features, source
    code compatibility is improved by not using suffixes on the
    extension.

New Procedures and Functions

    None

New Tokens


    HALF_FLOAT                                       0x140B

