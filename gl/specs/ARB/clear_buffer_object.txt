Name

    ARB_clear_buffer_object

Name Strings

    GL_ARB_clear_buffer_object

Contact

    Graham Sellers (graham.sellers 'at' amd.com)

Contributors

    Jon Leech
    Piers Daniell, NVIDIA
    Mark Kilgard, NVIDIA

Notice

    Copyright (c) 2012-2014 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete.
    Approved by the ARB on 2012/06/12.

Version

    Last Modified Date: February 18, 2014
    Version: 13

Number

    ARB Extension #121

Dependencies

    OpenGL 1.5 is required.

    The definition of this extension is dependent on EXT_direct_state_access.

    This extension is written against the OpenGL 4.2 (Core) Specification.

Overview

    Buffer objects are fundamental to the operation of OpenGL. Buffers are used
    as a source of data for vertices and indices, read through buffer textures
    in shaders, used to transfer texture and image data into and out of
    textures and framebuffers, and may be written to by operations such as
    transform feedback. OpenGL contains mechanisms to copy sections of buffers
    from one to another, but it has no mechanism to initialize the content
    of a buffer to a known value. In effect, it has memcpy, but not memset.

    This extension adds such a mechanism and has several use cases. Examples
    include clearing a pixel unpack buffer before transferring data to
    a texture or resetting buffer data to a known value before sparse updates
    through shader image stores or transform feedback.

IP Status

    No known IP claims.

New Procedures and Functions

        void ClearBufferData(enum target,
                             enum internalformat,
                             enum format,
                             enum type,
                             const void * data);

        void ClearBufferSubData(enum target,
                                enum internalformat,
                                intptr offset,
                                sizeiptr size,
                                enum format,
                                enum type,
                                const void * data);

    When EXT_direct_state_access is present:

        void ClearNamedBufferDataEXT(uint buffer,
                                     enum internalformat,
                                     enum format,
                                     enum type,
                                     const void * data);

        void ClearNamedBufferSubDataEXT(uint buffer,
                                        enum internalformat,
                                        intptr offset,
                                        sizeiptr size,
                                        enum format,
                                        enum type,
                                        const void * data);

New Tokens


