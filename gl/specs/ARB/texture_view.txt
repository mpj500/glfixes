Name

    ARB_texture_view

Name Strings

    GL_ARB_texture_view

Contact

    Jeff Bolz, NVIDIA Corporation (jbolz 'at' nvidia.com)

Contributors

    Pat Brown, NVIDIA
    Daniel Koch, TransGaming
    Jon Leech

Notice

    Copyright (c) 2012-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete.
    Approved by the ARB on 2012/06/12.

Version

    Last Modified Date: July 15, 2013
    Revision: 4

Number

    ARB Extension #124

Dependencies

    This extension is written against the OpenGL 4.2 Core profile 
    specification.

    ARB_texture_storage or OpenGL 4.2 is required.

    ARB_internalformat_query2 interacts with this extension.

    EXT_texture_compression_s3tc interacts with this extension.

    EXT_texture_sRGB interacts with this extension.

    ARB_texture_storage_multisample interacts with this extension.

Overview

    This extension allows a texture's data store to be "viewed" in multiple 
    ways, either reinterpreting the data format/type as a different format/
    type with the same element size, or by clamping the mipmap level range 
    or array slice range. 
    
    The goals of this extension are to avoid having these alternate views 
    become shared mutable containers of shared mutable objects, and to add 
    the views to the API in a minimally invasive way.

    No new object types are added. Conceptually, a texture object is split
    into the following parts:
    
        - A data store holding texel data.
        - State describing which portions of the data store to use, and how
          to interpret the data elements.
        - An embedded sampler object.
        - Various other texture parameters.

    With this extension, multiple textures can share a data store and have 
    different state describing which portions of the data store to use and how
    to interpret the data elements. The data store is refcounted and not 
    destroyed until the last texture sharing it is deleted.

    This extension leverages the ARB_texture_storage concept of an "immutable 
    texture". Views can only be created of textures created with TexStorage.


New Procedures and Functions

    void TextureView(uint texture, enum target, uint origtexture, 
                     enum internalformat,
                     uint minlevel, uint numlevels, 
                     uint minlayer, uint numlayers);

New Tokens


        TEXTURE_VIEW_MIN_LEVEL                          0x82DB
        TEXTURE_VIEW_NUM_LEVELS                         0x82DC
        TEXTURE_VIEW_MIN_LAYER                          0x82DD
        TEXTURE_VIEW_NUM_LAYERS                         0x82DE
        TEXTURE_IMMUTABLE_LEVELS                        0x82DF




