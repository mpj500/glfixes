Name

    ARB_multisample

Name Strings

    GL_ARB_multisample
    GLX_ARB_multisample
    WGL_ARB_multisample

Contact

    Dale Kirkland, NVIDIA (dkirkland 'at' nvidia.com)
    Bill Armstrong, E&S (armstron 'at' es.com)
    Michael Gold, NVIDIA (gold 'at' nvidia.com)
    Jon Leech, SGI (ljp 'at' sgi.com)
    Paula Womack, 3dfx (paulaw 'at' 3dfx.com)

Notice

    Copyright (c) 1999-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Approved by ARB on 12/8/1999.
    GLX protocol must still be defined.

Version

    Last Modified Date: March 12, 2002
    Author Revision: 0.6

    Based on:  SGIS_Multisample Specification
               Date: 1994/11/22 Revision: 1.14

Number

    ARB Extension #5

Dependencies

    WGL_EXT_extensions_string is required.
    WGL_EXT_pixel_format is required.

Overview

    This extension provides a mechanism to antialias all GL primitives:
    points, lines, polygons, bitmaps, and images.  The technique is to
    sample all primitives multiple times at each pixel.  The color
    sample values are resolved to a single, displayable color each time
    a pixel is updated, so the antialiasing appears to be automatic at
    the application level.  Because each sample includes depth and
    stencil information, the depth and stencil functions perform
    equivalently to the single-sample mode.

    An additional buffer, called the multisample buffer, is added to
    the framebuffer.  Pixel sample values, including color, depth, and
    stencil values, are stored in this buffer.  When the framebuffer
    includes a multisample buffer, it does not also include separate
    depth or stencil buffers, even if the multisample buffer does not
    store depth or stencil values.  Color buffers (left/right, front/
    back, and aux) do coexist with the multisample buffer, however.

    Multisample antialiasing is most valuable for rendering polygons,
    because it requires no sorting for hidden surface elimination, and
    it correctly handles adjacent polygons, object silhouettes, and
    even intersecting polygons.  If only points or lines are being
    rendered, the "smooth" antialiasing mechanism provided by the base
    GL may result in a higher quality image.  This extension is
    designed to allow multisample and smooth antialiasing techniques
    to be alternated during the rendering of a single scene.

IP Status

    TBD

Issues

    1. Multiple passes have been taken out.  Is this acceptable?

       RESOLUTION:  Yes.  This can be added back with an additional
       extension if needed.

    2. Would SampleAlphaARB be a better name for the function
       SampleMaskARB?  If so, the name SAMPLE_MASK_ARB should also be
       changed to SAMPLE_ALPHA_ARB.

       RESOLUTION:  Names containing "mask" were changed to use
       "coverage" instead.

    3. Should the SampleCoverageARB function be changed to allow
       blending between more than two objects?

       RESOLUTION:  Not addressed by this extension.  An additional
       extension has been proposed that allows a coverage range for
       each object.  The coverage range is a min and max value that
       can be used to blend multiple objects at different level-of-
       detail fading.  The SampleCoverageARB function will layer on
       this new extension.

New Procedures and Functions

    void SampleCoverageARB(clampf value,
                           boolean invert);

New Tokens


        GLX_SAMPLE_BUFFERS_ARB               100000
        GLX_SAMPLES_ARB                      100001


        WGL_SAMPLE_BUFFERS_ARB               0x2041
        WGL_SAMPLES_ARB                      0x2042


        MULTISAMPLE_ARB                      0x809D
        SAMPLE_ALPHA_TO_COVERAGE_ARB         0x809E
        SAMPLE_ALPHA_TO_ONE_ARB              0x809F
        SAMPLE_COVERAGE_ARB                  0x80A0


        MULTISAMPLE_BIT_ARB                  0x20000000


        SAMPLE_BUFFERS_ARB                   0x80A8
        SAMPLES_ARB                          0x80A9
        SAMPLE_COVERAGE_VALUE_ARB            0x80AA
        SAMPLE_COVERAGE_INVERT_ARB           0x80AB

