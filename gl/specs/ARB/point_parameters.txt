Name

    ARB_point_parameters

Name Strings

    GL_ARB_point_parameters

Contact

    Michael Gold, NVIDIA (gold 'at' nvidia.com)

Notice

    Copyright (c) 2000-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Approved by the ARB, 21 June 2000.

Version

    Revision Date: September 23, 2010
    Version: 0.6

    Based on:  EXT_point_parameters
               $Date: 1997/08/21 21:26:36 $ $Revision: 1.6 $

Number

    ARB Extension #14

Dependencies

    OpenGL 1.0 is required.
    ARB_multisample affects the definition of this extension.
    The extension is written against the OpenGL 1.2.1 Specification.

Overview

    This extension supports additional geometric characteristics of
    points. It can be used to render particles or tiny light sources,
    commonly referred to as "Light points".

    The raster brightness of a point is a function of the point area,
    point color, point transparency, and the response of the display's
    electron gun and phosphor. The point area and the point transparency
    are derived from the point size, currently provided with the <size>
    parameter of glPointSize.

    The primary motivation is to allow the size of a point to be
    affected by distance attenuation. When distance attenuation has an
    effect, the final point size decreases as the distance of the point
    from the eye increases.

    The secondary motivation is a mean to control the mapping from the
    point size to the raster point area and point transparency. This is
    done in order to increase the dynamic range of the raster brightness
    of points. In other words, the alpha component of a point may be
    decreased (and its transparency increased) as its area shrinks below
    a defined threshold.

    This extension defines a derived point size to be closely related to
    point brightness. The brightness of a point is given by:

                        1
        dist_atten(d) = -------------------
                        a + b * d + c * d^2

        brightness(Pe) = Brightness * dist_atten(|Pe|)

    where 'Pe' is the point in eye coordinates, and 'Brightness' is some
    initial value proportional to the square of the size provided with
    PointSize. Here we simplify the raster brightness to be a function
    of the rasterized point area and point transparency.

                    brightness(Pe)       brightness(Pe) >= Threshold_Area
        area(Pe) =
                    Threshold_Area       Otherwise

        factor(Pe) = brightness(Pe)/Threshold_Area

        alpha(Pe) = Alpha * factor(Pe)

    where 'Alpha' comes with the point color (possibly modified by
    lighting).

    'Threshold_Area' above is in area units. Thus, it is proportional to
    the square of the threshold provided by the programmer through this
    extension.

    The new point size derivation method applies to all points, while
    the threshold applies to multisample points only.

IP Status

    None.

Issues

    * Does point alpha modification affect the current color ?

      No.

    * Do we need a special function GetPointParameterfvARB, or get by
      with GetFloat ?

      GetFloat is sufficient.

    * If alpha is 0, then we could toss the point before it reaches the
      fragment stage.

      No.  This can be achieved with enabling the alpha test with
      reference of 0 and function of LEQUAL.

    * Do we need a disable for applying the threshold ? The default
      threshold value is 1.0. It is applied even if the point size is
      constant.

      If the default threshold is not overridden, the area of
      multisample points with provided constant size of less than 1.0,
      is mapped to 1.0, while the alpha component is modulated
      accordingly, to compensate for the larger area. For multisample
      points this is not a problem, as there are no relevant
      applications yet. As mentioned above, the threshold does not apply
      to alias or antialias points.

      The alternative is to have a disable of threshold application, and
      state that threshold (if not disabled) applies to non antialias
      points only (that is, alias and multisample points).

      The behavior without an enable/disable looks fine.

    * Future extensions (to the extension)

      1. POINT_FADE_ALPHA_CLAMP_ARB

      When the derived point size is larger than the threshold size
      defined by the POINT_FADE_THRESHOLD_SIZE_ARB parameter, it might
      be desired to clamp the computed alpha to a minimum value, in
      order to keep the point visible. In this case the formula below
      change:

      factor = (derived_size/threshold)^2

                      factor                  clamp <= factor 
      clamped_value = 
                      clamp                   factor < clamp

               1.0                            derived_size >= threshold
      alpha *=
               clamped_value                  Otherwise

      where clamp is defined by the POINT_FADE_ALPHA_CLAMP_ARB new
      parameter.
 
New Procedures and Functions

    void PointParameterfARB(enum pname,
                            float param);
    void PointParameterfvARB(enum pname,
                             const float *params);

New Tokens




        POINT_SIZE_MIN_ARB              0x8126
        POINT_SIZE_MAX_ARB              0x8127
        POINT_FADE_THRESHOLD_SIZE_ARB   0x8128
        POINT_DISTANCE_ATTENUATION_ARB  0x8129

