Name

    ARB_texture_env_combine

Name Strings

    GL_ARB_texture_env_combine

Contact

    Bimal Poddar, Intel (bimal.poddar 'at' intel.com)
    Michael Gold, NVIDIA (gold 'at' nvidia.com)
    Tom Frisinger, AMD (tom.frisinger 'at' amd.com)
    Rick Hammerstone, AMD (rick.hammerstone 'at' amd.com)

Notice

    Copyright (c) 2001-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by ARB on February 16, 2001.

Version

    Last modified date: 2006/11/04

Number

    ARB Extension #17

Dependencies

    This extension is written against the OpenGL 1.2.1 Specification.
    OpenGL 1.1 and ARB_multitexture are required for this extension.

Overview

    New texture environment function COMBINE_ARB allows programmable
    texture combiner operations, including:

        REPLACE                 Arg0
        MODULATE                Arg0 * Arg1
        ADD                     Arg0 + Arg1
        ADD_SIGNED_ARB          Arg0 + Arg1 - 0.5
        SUBTRACT_ARB            Arg0 - Arg1
        INTERPOLATE_ARB         Arg0 * (Arg2) + Arg1 * (1-Arg2)

    where Arg0, Arg1 and Arg2 are derived from

        PRIMARY_COLOR_ARB       primary color of incoming fragment
        TEXTURE                 texture color of corresponding texture unit
        CONSTANT_ARB            texture environment constant color
        PREVIOUS_ARB            result of previous texture environment; on
                                texture unit 0, this maps to PRIMARY_COLOR_ARB

    In addition, the result may be scaled by 1.0, 2.0 or 4.0.

Issues

 1. Should the explicit bias be removed in favor of an implcit bias as
    part of a ADD_SIGNED_ARB function?

    - RESOLVED: Yes. This pre-scale bias is a special case and will 
      be treated as such.

 2. Should the primary color of the incoming fragment be available to
    all texture environments?  Currently it is only available to the
    texture environment of texture unit 0.

    - RESOLVED: Yes. PRIMARY_COLOR_ARB has been added as an input 
      source.

 3. Should textures from other texture units be allowed as sources?

    - RESOLVED: NO. Even though this adds a lot of flexibility that 
      folks can use today, there is not enough support amonst the
      ARB participants to add it to the base spec.

 4. All of the 1.2 modes except BLEND can be expressed in terms of
    this extension. Should texture color be allowed as a source for
    Arg2, so all of the 1.2 modes can be expressed?  If so, should all
    color sources be allowed, to maintain orthogonality?

    - RESOLVED: Yes. This seems to be a reasonable area to expand 
      functionality and remain backwards compatible with the EXT 
      version of the extension.

 5. If the texture environment for a given texture unit does not 
    reference the texture object that is bound to that texture unit,
    does a valid texture object need to be bound that unit?

    - RESOLVED: Yes. Each texture unit implicitly references the
      texture object that is bound to that unit, regardless of the
      texture environment function. This may require that 
      applications bind a dummy texture to the texture unit.

 6. Should we allow the secondary color to take part in texture blending?

    - RESOLVED: Not in this extension. Secondary color was defined
      as a specular part of the lit color and does not have associated
      alpha. In order to do this right, the secondary color extension
      needs to be fixed first to allow a full featured color and clearly
      state the interaction of how it interacts with the color sum stage. 

 7. How exactly is this ARB extension different from the EXT version?

    -  RESOLVED:

       1) This extension adds the GL_SUBTRACT_ARB mode

       2) OPERAND2_RGB_ARB can use SRC_COLOR, ONE_MINUS_SRC_COLOR,
          SRC_ALPHA, and ONE_MINUS_SRC_ALPHA instead of just SRC_ALPHA
          (NV_texture_env_combine4 already provides this).

       3) OPERAND2_ALPHA_ARB can use SRC_ALPHA and ONE_MINUS_SRC_ALPHA
          instead of just SRC_ALPHA (NV_texture_env_combine4 already
          provides this).

New Procedures and Functions

    None

New Tokens


        COMBINE_ARB                                     0x8570


        COMBINE_RGB_ARB                                 0x8571
        COMBINE_ALPHA_ARB                               0x8572
        SOURCE0_RGB_ARB                                 0x8580
        SOURCE1_RGB_ARB                                 0x8581
        SOURCE2_RGB_ARB                                 0x8582
        SOURCE0_ALPHA_ARB                               0x8588
        SOURCE1_ALPHA_ARB                               0x8589
        SOURCE2_ALPHA_ARB                               0x858A
        OPERAND0_RGB_ARB                                0x8590
        OPERAND1_RGB_ARB                                0x8591
        OPERAND2_RGB_ARB                                0x8592
        OPERAND0_ALPHA_ARB                              0x8598
        OPERAND1_ALPHA_ARB                              0x8599
        OPERAND2_ALPHA_ARB                              0x859A
        RGB_SCALE_ARB                                   0x8573


        ADD_SIGNED_ARB                                  0x8574
        INTERPOLATE_ARB                                 0x8575
        SUBTRACT_ARB                                    0x84E7


        CONSTANT_ARB                                    0x8576
        PRIMARY_COLOR_ARB                               0x8577
        PREVIOUS_ARB                                    0x8578







