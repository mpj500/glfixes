Name

    ARB_ES3_1_compatibility

Name Strings

    GL_ARB_ES3_1_compatibility

Contact

    Piers Daniell, NVIDIA Corporation (pdaniell 'at' nvidia.com)

Contributors

    Daniel Koch, NVIDIA Corporation (dkoch 'at' nvidia.com)

    and contributors to the OpenGL ES 3.1 specification

Notice

    Copyright (c) 2014 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. 
    Approved by the ARB on June 26, 2014.
    Ratified by the Khronos Board of Promoters on August 7, 2014.

Version

    Last Modified Date:         September 19, 2014
    Revision:                   15

Number

    ARB Extension #159

Dependencies

    OpenGL 4.4, ARB_ES2_compatibility, ARB_ES3_compatibility are required.

    This extension is written against The OpenGL 4.4 (Compatibility Profile)
    specification.

Overview

    This extension adds support for features of OpenGL ES 3.1 that are
    missing from OpenGL 4.4. Enabling these features will ease the process
    of porting applications from OpenGL ES 3.1 to OpenGL.

    In particular this adds the following features:

    - a new MemoryBarrierByRegion API which is potentially more efficient
    for specific localized memory access patterns.

    - increases the minimum required size of SSBOs to 2^27 (128 MB).

    - support for GLSL ES version 310 (ie #version 310 es).

    - a new GLSL built-in function, imageAtomicExchange, which performs atomic
    exchanges on r32f floating point images.

    - a new GLSL built-in fragment shader input, gl_HelperInvocation, that
    identifies whether the current fragment shader input is a helper
    invocation.  Fragment shader code can use this variable to skip performing
    operations that are useless or potentially dangerous for helper
    invocations.

    - a new GLSL built-in constant for the maximum supported samples:
    gl_MaxSamples.

    - a number of new GLSL built-in constants mirroring the API limits for
    image uniforms: gl_Max*ImageUniforms, gl_MaxCombinedShaderOutputResources.

    - new GLSL built-in functions which extend mix() to select between int,
    uint, and bool components.

    - add the "coherent" qualifier to all memory variables taken by the GLSL
    built-in atomic* and imageAtomic* functions.

New Procedures and Functions

    void MemoryBarrierByRegion(bitfield barriers);

New Tokens


