Name

    WGL_ARB_pbuffer

Name Strings

    WGL_ARB_pbuffer

Contact

    Dale Kirkland, NVIDIA (dkirkland 'at' nvidia.com)
    Bimal Poddar, Intel (bimal.poddar 'at' intel.com)
    Steve Urquhart, Intelligraphics (steveu 'at' intelligraphics.com)

Notice

    Copyright (c) 2000-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by ARB on March 15, 2000

Version

    Last Modified Date: 03/12/2002
    Author Revision: 1.1

    Based on:  WGL_EXT_pbuffer specification
               Date: 4/21/1999   Version 1.8

Number

    ARB Extension #11

Dependencies

    WGL_ARB_extensions_string is required.
    WGL_ARB_pixel_format is required.
    WGL_ARB_make_current_read affects the definition of this extension.

Overview

    This extension defines pixel buffers (pbuffer for short). Pbuffers
    are additional non-visible rendering buffers for an OpenGL
    renderer. Pbuffers are equivalent to a window that has the same
    pixel format descriptor with the following exceptions:

    1.  There is no rendering to a pbuffer by GDI.

    2.  The pixel format descriptors used for a pbuffer can only be
        those that are supported by the ICD.  Generic formats are not
        valid.

    3.  The allocation of a pbuffer can fail if there are insufficient
        resources (i.e., all the pbuffer memory has been allocated).

    4.  The pixel buffer might be lost if a display mode change occurs.
        A query is provided that can be called after a display mode
        change to determine the state of the pixel buffer.

    The intent of the pbuffer semantics is to enable implementations to
    allocate pbuffers in non-visible frame buffer memory.  These
    pbuffers are intended to be "static" resources in that a program
    will typically allocate them only once rather than as a part of its
    rendering loop.  (Pbuffers should be deallocated when the program
    is no longer using them -- for example, if the program is
    iconified.)

    The frame buffer resources that are associated with a pbuffer are
    also static and are deallocated when the pbuffer is destroyed or
    possibly when a display mode change occurs.

IP Status

    TBD

Issues

    1. Should the OPTIMUM width and heights and PBUFFER_LARGEST_ARB be
       taken out of the spec since they may be misleading or hard for
       some implementations to support?

       PBUFFER_LARGEST_ARB has been left in the extension.  It was
       originally requested by an application.  The OPTIMUM queries
       have been removed to match the GLX pixel buffer specification.


New Procedures and Functions

    DECLARE_HANDLE(HPBUFFERARB);

    HPBUFFERARB wglCreatePbufferARB(HDC hDC,
                                    int iPixelFormat,
                                    int iWidth,
                                    int iHeight,
                                    const int *piAttribList);

    HDC wglGetPbufferDCARB(HPBUFFERARB hPbuffer);

    int wglReleasePbufferDCARB(HPBUFFERARB hPbuffer,
                               HDC hDC);

    BOOL wglDestroyPbufferARB(HPBUFFERARB hPbuffer);

    BOOL wglQueryPbufferARB(HPBUFFERARB hPbuffer,
                            int iAttribute,
                            int *piValue);

New Tokens


      WGL_DRAW_TO_PBUFFER_ARB              0x202D


      WGL_DRAW_TO_PBUFFER_ARB              0x202D
      WGL_MAX_PBUFFER_PIXELS_ARB           0x202E
      WGL_MAX_PBUFFER_WIDTH_ARB            0x202F
      WGL_MAX_PBUFFER_HEIGHT_ARB           0x2030


      WGL_PBUFFER_LARGEST_ARB              0x2033


      WGL_PBUFFER_WIDTH_ARB                0x2034
      WGL_PBUFFER_HEIGHT_ARB               0x2035
      WGL_PBUFFER_LOST_ARB                 0x2036

