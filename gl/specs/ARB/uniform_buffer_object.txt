Name
    
    ARB_uniform_buffer_object

Name Strings

    GL_ARB_uniform_buffer_object

Contact

    Benj Lipchak, APPLE (lipchak 'at' apple.com)
    John Rosasco, APPLE (jdr 'at' apple.com)
    Jeremy Sandmel, APPLE (jsandmel 'at' apple.com)
    Pat Brown, NVIDIA (pbrown 'at' nvidia.com)

Contributors

    Rob Barris
    Keith Bauer
    Bob Beretta
    Pat Brown
    Nick Burns
    Matt Collins
    Michael Gold
    John Kessenich
    Jon Leech
    Barthold Lichtenbelt
    Benj Lipchak
    Bruce Merry
    John Rosasco
    Jeremy Sandmel
    Geoff Stahl

Notice

    Copyright (c) 2009-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Version

    Last Modified Date:     2013/08/19
    Author revision:        67

Number

    ARB Extension #57

Dependencies

    The OpenGL Shading Language (GLSL) is required. OpenGL 2.0 or the
    ARB_shader_objects extension is required.

    OpenGL 1.5 or ARB_vertex_buffer_object is required.

    This extension is written against the OpenGL 2.1 specification and
    version 1.20-8 of the OpenGL Shading Language specification.

    This extension interacts with OpenGL 3.0, ARB_geometry_shader4,
    ARB_texture_rectangle, EXT_gpu_shader4, EXT_texture_array,
    EXT_texture_integer, and EXT_texture_buffer_object.
    
New Procedures and Functions

   void    GetUniformIndices(uint program,
                                sizei uniformCount, 
                                const char* const * uniformNames, 
                                uint* uniformIndices);

   void    GetActiveUniformsiv(uint program,
                                  sizei uniformCount, 
                                  const uint* uniformIndices, 
                                  enum pname, 
                                  int* params);

   void    GetActiveUniformName(uint program,
                                   uint uniformIndex, 
                                   sizei bufSize, 
                                   sizei* length, 
                                   char* uniformName);

   uint    GetUniformBlockIndex(uint program,
                                   const char* uniformBlockName);

   void    GetActiveUniformBlockiv(uint program,
                                      uint uniformBlockIndex, 
                                      enum pname, 
                                      int* params);

   void    GetActiveUniformBlockName(uint program,
                                        uint uniformBlockIndex, 
                                        sizei bufSize, 
                                        sizei* length, 
                                        char* uniformBlockName);

   void    BindBufferRange(enum target, 
                           uint index, 
                           uint buffer, 
                           intptr offset,
                           sizeiptr size);

   void    BindBufferBase(enum target, 
                          uint index, 
                          uint buffer);

   void    GetIntegeri_v(enum target, uint index, int* data);

   void    UniformBlockBinding(uint program,
                                  uint uniformBlockIndex, 
                                  uint uniformBlockBinding);

New Types

    None.

New Tokens


        UNIFORM_BUFFER                                  0x8A11


        UNIFORM_BUFFER_BINDING                          0x8A28


        UNIFORM_BUFFER_START                            0x8A29
        UNIFORM_BUFFER_SIZE                             0x8A2A


        MAX_VERTEX_UNIFORM_BLOCKS                       0x8A2B
        MAX_GEOMETRY_UNIFORM_BLOCKS                     0x8A2C
        MAX_FRAGMENT_UNIFORM_BLOCKS                     0x8A2D
        MAX_COMBINED_UNIFORM_BLOCKS                     0x8A2E
        MAX_UNIFORM_BUFFER_BINDINGS                     0x8A2F
        MAX_UNIFORM_BLOCK_SIZE                          0x8A30
        MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS          0x8A31
        MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS        0x8A32
        MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS        0x8A33
        UNIFORM_BUFFER_OFFSET_ALIGNMENT                 0x8A34


        ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH            0x8A35
        ACTIVE_UNIFORM_BLOCKS                           0x8A36


        UNIFORM_TYPE                                    0x8A37
        UNIFORM_SIZE                                    0x8A38
        UNIFORM_NAME_LENGTH                             0x8A39
        UNIFORM_BLOCK_INDEX                             0x8A3A
        UNIFORM_OFFSET                                  0x8A3B
        UNIFORM_ARRAY_STRIDE                            0x8A3C
        UNIFORM_MATRIX_STRIDE                           0x8A3D
        UNIFORM_IS_ROW_MAJOR                            0x8A3E


        UNIFORM_BLOCK_BINDING                           0x8A3F
        UNIFORM_BLOCK_DATA_SIZE                         0x8A40
        UNIFORM_BLOCK_NAME_LENGTH                       0x8A41
        UNIFORM_BLOCK_ACTIVE_UNIFORMS                   0x8A42
        UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES            0x8A43
        UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER       0x8A44
        UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER     0x8A45
        UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER     0x8A46
        
    
        INVALID_INDEX                                   0xFFFFFFFFu


