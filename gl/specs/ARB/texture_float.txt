Name

    ARB_texture_float

Name Strings

    GL_ARB_texture_float

Contributors

    Pat Brown
    Jon Leech
    Rob Mace
    Brian Paul

Contact

    Dale Kirkland, NVIDIA (dkirkland 'at' nvidia.com)

Notice

    Copyright (c) 2004-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by the ARB on October 22, 2004.

Version

    Based on the ATI_texture_float extension, verion 4

    Last Modified Date:  February 19, 2008
    Version:             7

Number

    ARB Extension #41

Dependencies

    This extension is written against the OpenGL 2.0 Specification
    but will work with the OpenGL 1.5 Specification.

    OpenGL 1.1 or EXT_texture is required.

    This extension interacts with ARB_color_buffer_float.

Overview

    This extension adds texture internal formats with 16- and 32-bit
    floating-point components.  The 32-bit floating-point components
    are in the standard IEEE float format.  The 16-bit floating-point
    components have 1 sign bit, 5 exponent bits, and 10 mantissa bits.
    Floating-point components are clamped to the limits of the range
    representable by their format.


IP Status

    SGI owns US Patent #6,650,327, issued November 18, 2003. SGI
    believes this patent contains necessary IP for graphics systems
    implementing floating point (FP) rasterization and FP framebuffer
    capabilities.

    SGI will not grant the ARB royalty-free use of this IP for use in
    OpenGL, but will discuss licensing on RAND terms, on an individual
    basis with companies wishing to use this IP in the context of
    conformant OpenGL implementations. SGI does not plan to make any
    special exemption for open source implementations.

    Contact Doug Crisman at SGI Legal for the complete IP disclosure.

Issues

    1. How is this extension different from the ATI_texture_float
       extension?

       This extension expands on the definition of float16 values
       and adds a query to determine if the components of a texture
       are stored as floats.

    2. Should the new names of the internal formats be changed to a
       different spelling?

       RESOLVED:  Internal format names have been updated to the
       same convention as the EXT_framebuffer_object extension.

    3. Is it allowable for an implementation to fall back to a non
       floating-point internal format if it does not support the
       requested format?

       RESOLVED:  No.  An application that requests floating-point
       formats should expect to get them.  Only the precision of the
       internal format can be changed.  When this extension is
       promoted to the core, this issue may need to be readdressed.

    4. Do the new internal formats apply to any other commands?

       RESOLVED:  Since color tables support the same <internalFormat>
       values as textures, they are also extended with this extension,
       except the individual component types cannot be queried.

    5. Are the floating-point values clamped before they are stored
       into the texture memory or color tables?

       RESOLVED:  The values are clamped to the representatable
       range of the storage format.  Overflows could produce
       +/-INF and underflows could produce denorms or zero.  This
       matches the behavior of the ATI extension.

    6. Should this extension modify the clamping of the texture border
       color components?

       RESOLVED:  Yes.  The border color components are unclamped.
       When used, the border color components are interpreted in a
       manner consistent with the texture's internal format.  For
       fixed-point textures, this means that the border color is
       clamped to [0, 1] when used.

    7. Are floating-point values clamped for the fixed-function GL?

       RESOLVED:  This extension introduces texel values that can be
       outside [0, 1].  No clamping occurs to these values during
       texture filtering.  For the fixed-function pipeline, the
       filtered texel is now clamped before it is used for texture
       environment blending.  The ARB_color_buffer_float extension
       can be used to control this clamping.  For the programmable
       pipelines, no clamping occurs.

    8. Should the query for the border color return the unclamped
       values?

       RESOLVED:  There is language in the ARB_color_buffer_float
       extension that handles this.  Since there is no clamp control
       in this specification, it would be hard to do anything other
       than return the clamped values.

New Procedures and Functions

   None

New Tokens


        TEXTURE_RED_TYPE_ARB             0x8C10
        TEXTURE_GREEN_TYPE_ARB           0x8C11
        TEXTURE_BLUE_TYPE_ARB            0x8C12
        TEXTURE_ALPHA_TYPE_ARB           0x8C13
        TEXTURE_LUMINANCE_TYPE_ARB       0x8C14
        TEXTURE_INTENSITY_TYPE_ARB       0x8C15
        TEXTURE_DEPTH_TYPE_ARB           0x8C16


        UNSIGNED_NORMALIZED_ARB          0x8C17


        RGBA32F_ARB                      0x8814
        RGB32F_ARB                       0x8815
        ALPHA32F_ARB                     0x8816
        INTENSITY32F_ARB                 0x8817
        LUMINANCE32F_ARB                 0x8818
        LUMINANCE_ALPHA32F_ARB           0x8819
        RGBA16F_ARB                      0x881A
        RGB16F_ARB                       0x881B
        ALPHA16F_ARB                     0x881C
        INTENSITY16F_ARB                 0x881D
        LUMINANCE16F_ARB                 0x881E
        LUMINANCE_ALPHA16F_ARB           0x881F

