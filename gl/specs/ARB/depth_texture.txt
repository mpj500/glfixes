Name

    ARB_depth_texture

Name Strings

    GL_ARB_depth_texture

Contact

    Brian Paul (brian_e_paul 'at' yahoo.com)

Notice

    Copyright (c) 2002-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete.
    Approved by the ARB on February 14, 2002.
    Updated version (June 1, 2004) approved by the ARB on June 8, 2004.

Version

    Last Modified Date: November 29, 2004

Number

    ARB Extension #22

Dependencies

    OpenGL 1.1 is required.
    This extension is written against the OpenGL 1.3 Specification.

Overview

    This is a clarification of the GL_SGIX_depth_texture extension.  The
    original overview follows:

    This extension defines a new depth texture format.  An important
    application of depth texture images is shadow casting, but separating
    this from the shadow extension allows for the potential use of depth
    textures in other applications such as image-based rendering or
    displacement mapping.  This extension does not define new depth-texture
    environment functions, such as filtering or applying the depth values
    computed from a texture but leaves this to other extensions, such as
    the shadow extension.

IP Status

    None.

Issues

    (1) How is this extension different from GL_SGIX_depth_texture?

      This extension defines support for texture border values, querying
      depth texel resolution, and behavior when a depth texture is bound
      to a texture unit that's expecting RGBA texels.

    (2) What about texture borders and the border value?

      Texture borders are supported.  The texture border value used for
      depth textures is the first component of TEXTURE_BORDER_COLOR.

    (3) What happens when a depth texture is currently bound but RGBA
      texels are expected by the texture unit?

      The depth texture is treated as if it were a LUMINANCE texture.
      It's sometimes useful to render a depth component texture as a
      grayscale texture.

    (4) What happens when an RGBA texture is currently bound but depth
      texels are expected by the texture unit?

      We do texturing in the normal way for an RGBA texture.

    (5) What about 1D, 3D and cube maps textures?  Should depth textures
      be supported?

      RESOLVED:  For 1D textures, yes, for orthogonality.  For 3D and cube map
      textures, no.  In both cases, the R coordinate that would be ordinarily
      be used for a shadow comparison is needed for texture lookup and won't
      contain a useful value.  In theory, the shadow functionality could be
      extended to provide useful behavior for such targets, but this
      enhancement is left to a future extension.

    (6) Why "depth" textures instead of a generic, extended-precision,
      single-channel texture format?

      RESOLVED: We need a depth format so that glCopyTex[Sub]Image()
      can copy data from the depth buffer to the texture memory.

    (7) Is there any particular reason that depth textures should only be
        used as LUMINANCE textures?

      RESOLVED: Add DEPTH_TEXTURE_MODE to allow depth textures to be used
      as LUMINANCE, INTENSITY or ALPHA textures.

    (8) It is very unlikely that depth textures when used as LUMINANCE,
      INTENSITY or ALPHA textures are used at their full storage precision.
      Should there be a query for the actual number of bits used for
      depth textures?

      RESOLVED: No. OpenGL does not have queries for internal precision.
      Instead of adding it randomly for one feature, it should be looked
      in the broader context of providing it for more features.

     (9) How should GetTexImage work for depth textures?

      RESOLVED: Since GetTexImage is modeled on ReadPixels, reading depth
      components should require the DEPTH_COMPONENT format.  Specifying a
      color format when querying a texture image with a DEPTH_COMPONENT
      base internal format should be an invalid operation.  Likewise,
      specifying a DEPTH_COMPONENT format when querying a texture image
      with a color internal format should be an invalid operation.
      This is not only consistent with ReadPixels but how the
      EXT_paletted_texture and NV_texture_shader extensions amend
      GetTexImage to return non-color texture image data.

New Procedures and Functions

    None

New Tokens


    DEPTH_COMPONENT16_ARB       0x81A5  (same as DEPTH_COMPONENT16_SGIX)
    DEPTH_COMPONENT24_ARB       0x81A6  (same as DEPTH_COMPONENT24_SGIX)
    DEPTH_COMPONENT32_ARB       0x81A7  (same as DEPTH_COMPONENT32_SGIX)




    TEXTURE_DEPTH_SIZE_ARB      0x884A


    DEPTH_TEXTURE_MODE_ARB      0x884B

