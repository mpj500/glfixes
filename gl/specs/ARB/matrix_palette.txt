Name

    ARB_matrix_palette

Name Strings

    GL_ARB_matrix_palette

Contact

    Jon Paul Schelter (jschelte 'at' matrox.com)

Notice

    Copyright (c) 2000-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete. Approved by ARB on December 5, 2000.

Version

    Date: 2004/04/02
    Revision: 0.7

Number

    ARB Extension #16

Dependencies

    ARB_vertex_blend and OpenGL 1.0 are required.
    This extension is written against the ARB_vertex_blend extended
    OpenGL 1.2.1 Specification. 

Overview

    This extension extends the abilities of ARB_vertex_blend to include 
    a palette of modelview matrices.  The n vertex units use a palette
    of m modelview matrices.  (Where n and m are constrained to
    implementation defined maxima.)  Each vertex has a set of n
    indices into the palette, and a corresponding set of n weights.
    Matrix indices can be changed for each vertex (between Begin and
    End).  
    
    When this extension is utilized, the enabled units transform each
    vertex by the modelview matrices specified by the vertices'
    respective indices.  These results are subsequently scaled by the
    weights of the respective units and then summed to create the
    eyespace vertex.   
    
    A similar procedure is followed for normals.  Normals, however,
    are transformed by the inverse transpose of the modelview matrix.
    
IP Status

    Unknown, but believed to be none. 

Issues

       
    Should the matrix palette be loaded by adding MODELVIEWm tokens
    for MatrixMode?

        No, this method is too difficult to extend to an arbitrary
        (implementation defined) size palette,
          and would imply having a 32 entry (minimum) stack per
          matrix. 
        

    Should the Matrix palette be loaded with a new LoadMatrixPalette
    command?

        No, although this provides an easy way to support arbitrary
        palette sizes, the method loses the current (MultMatrix,
        Rotate, Translate, Scale..) matrix functionality.

        Matrices will be Loaded into the palette with current
        functions when MATRIX_MODE is MATRIX_PALETTE_ARB.  The current
        palette index is set by an explicit command:
        CurrentPaletteMatrixARB(). 
    
        
    Should the Matrix Palette have a stack?

        Not required, this wastes a lot of space.  Define the min
        stack depth for the MATRIX_PALETTE_ARB MatrixMode to be 1.
        This alows some implementations to add a stack if desired.

        The stacks established in ARB_vertex_blend for
        MODELVIEW_MATRIXn are still present.
        
        
    Should the matrix palette be gettable?

       Yes, CurrentPaletteMatrixARB() and
       GetIntegerv(CURRENT_PALETTE_MATRIX_ARB, *data) define which
       matrix in the palette is returned by
       GetFloatv(MATRIX_PALETTE_ARB, *data). 

       
    Should MatrixIndexARB be changed to imply LoadMatrix calls to the
    applicable MODELVIEW_MATRIXn stacks?

        No, the MODELVIEW_MATRIXn matrices are unused when
        MATRIX_PALETTE is enabled.
       
    
    Should there be a way to specify that the modelview matrices
    for two different vertex units are identical?

        Not explicitely, but indexing the matrix palette provides this
        functionality. (Both units will have the same matrix index.)
        
    Currently, the MATRIX_PALETTE_ARB enum is used to enable the
    extension, to set the Matrix Mode, and to get the current matrix.
    Is this confusing? Should more enums be added?

        No.
        
New Procedures and Functions

    void CurrentPaletteMatrixARB(int index)
    
    void MatrixIndex{ubusui}vARB(int size, T *indices)
    
    void MatrixIndexPointerARB(int size, enum type, sizei stride,
                           void *pointer)

 
New Tokens


      MATRIX_PALETTE_ARB:                   0x8840


      MAX_MATRIX_PALETTE_STACK_DEPTH_ARB    0x8841
      MAX_PALETTE_MATRICES_ARB              0x8842
      CURRENT_PALETTE_MATRIX_ARB            0x8843
      

      MATRIX_INDEX_ARRAY_ARB:               0x8844

    
      CURRENT_MATRIX_INDEX_ARB              0x8845
      
      MATRIX_INDEX_ARRAY_SIZE_ARB           0x8846
      MATRIX_INDEX_ARRAY_TYPE_ARB           0x8847
      MATRIX_INDEX_ARRAY_STRIDE_ARB         0x8848

      MATRIX_INDEX_ARRAY_POINTER_ARB        0x8849

