Name

    ARB_invalidate_subdata

Name Strings

    GL_ARB_invalidate_subdata

Contact

    Jeff Bolz, NVIDIA Corporation (jbolz 'at' nvidia.com)

Contributors

    Michael Gold, NVIDIA Corporation
    Bruce Merry
    Pat Brown, NVIDIA Corporation

Notice

    Copyright (c) 2012-2013 The Khronos Group Inc. Copyright terms at
        http://www.khronos.org/registry/speccopyright.html

Status

    Complete.
    Approved by the ARB on 2012/06/12.

Version

    Last Modified Date:         July 30, 2012
    Revision:                   5

Number

    ARB Extension #132

Dependencies

    This extension is written against the OpenGL 3.2 specification 
    (Compatibility profile).

    OpenGL 2.0 is required.
    
    This extension interacts with OpenGL ES 2.0.


Overview

    This extension adds a mechanism for an application to tell the GL that
    the previous contents of a subregion of an image or a range of a buffer 
    may be invalidated.

    GL implementations often include several memory spaces, each with 
    distinct performance characteristics, and the implementations 
    transparently move allocations between memory spaces. With this 
    extension, an application can tell the GL that the contents of a texture
    or buffer are no longer needed, and the implementation can avoid 
    transferring the data unnecessarily.

    Examples of when this may be useful include:

    (1) invalidating a multisample texture after resolving it into a non-
        multisample texture.

    (2) invalidating depth/stencil buffers after using them to generate a color
        buffer.

    (3) invalidating a subregion of a framebuffer rather than clearing it 
        before rendering to it, when the whole subregion will be overwritten.

    (4) invalidating dynamically generated data (e.g. textures written by FBO 
        rendering or CopyTexSubImage, buffers written by transform feedback,
        etc.) after it is no longer needed but before the end of the frame.

    It is expected that the situations in which the GL will take advantage of
    this knowledge and achieve increased performance as a result of its use
    will be implementation-dependent. The first three examples may show 
    benefit on tiled renderers where some data won't need to be copied into 
    or out of on-chip memory. The fourth example may show a benefit in multi-
    GPU systems where some data won't need to be copied between GPUs.

    This extension is a superset of the EXT_discard_framebuffer extension 
    with the following additions:

      - The parameters to InvalidateFramebufferEXT are extended for MRT support
        and Desktop-GL-only buffer enums.

      - New functions to invalidate a region of a texture image or buffer object
        data store.


New Procedures and Functions

    void InvalidateTexSubImage(uint texture, int level,
                               int xoffset, int yoffset, int zoffset,
                               sizei width, sizei height, sizei depth);
    void InvalidateTexImage(uint texture, int level);

    void InvalidateBufferSubData(uint buffer, intptr offset, sizeiptr length);
    void InvalidateBufferData(uint buffer);

    void InvalidateFramebuffer(enum target, 
                               sizei numAttachments, 
                               const enum *attachments);
    void InvalidateSubFramebuffer(enum target, 
                                  sizei numAttachments, 
                                  const enum *attachments,
                                  int x, int y, sizei width, sizei height);


New Tokens



