Name

    SGIX_pbuffer

Name Strings

    GLX_SGIX_pbuffer

Version

    Version 1.29, 2009/11/19

Number

    50

Dependencies

    SGIX_FBConfig is required
    SGIS_multisample affects the definition of this extension

Overview

    This extension defines pixel buffers (GLXPbuffers, or pbuffer for
    short). GLXPbuffers are additional non-visible rendering buffers for an
    OpenGL renderer.  GLXPbuffers are equivalent to GLXPixmaps with the
    following exceptions:

    1.	There is no associated X pixmap. Also, since a GLXPbuffer is a GLX
        resource, it may not be possible to render to it using X or an 
   	X extension other than GLX.

    2.	The format of the color buffers and the type and size of any
     	associated ancillary buffers for a GLXPbuffer can only be
        described with a GLXFBConfig -- an X Visual cannot be used.

    3.	It is possible to create a GLXPbuffer whose contents may be 
	asynchronously lost at any time.

    4.  GLXPbuffers can be rendered to using either direct or indirect
        rendering contexts.

    5.  The allocation of a GLXPbuffer can fail if there are insufficient
	resources (i.e., all the pbuffer memory has been allocated and 
	the implementation does not virtualize pbuffer memory.)

    The intent of the pbuffer semantics is to enable implementations to
    allocate pbuffers in non-visible frame buffer memory.  These
    pbuffers are intended to be "static" resources, in that a program
    will typically allocate them only once, rather than as a part of its
    rendering loop.  (But they should be deallocated when the program is
    no longer using them -- for example, if the program is iconified.)
    The frame buffer resources that are associated with a pbuffer are 
    also static, and are deallocated only when the pbuffer is destroyed, 
    or, in the case of a "unpreserved" pbuffer, as a result of X server 
    activity that changes its frame buffer requirements.


Issues

    *   Should the optimum width and height be fixed sizes or a multiple?
   
    *   Any better names for GLX_BUFFER_CLOBBER_MASK_SGIX, etc?

    UM  Should we add a command so an application can set the behavior
        when a deep window buffer (e.g., depth buffer or multisample buffer)
        is clobbered by a pbuffer? The choices would be "preserved" or
        "unpreserved". 
 
    *   When a pbuffer interferes with a window's ancillary buffer should
        the action -- swapped or saved -- be specified or left as
	implementation dependent?
    

New Procedures and Functions

    GLXPbuffer glXCreateGLXPbufferSGIX(Display *dpy,
				       GLXFBConfig config,
				       unsigned int width,
				       unsigned int height,
				       int *attrib_list);

    void glXDestroyGLXPbufferSGIX(Display *dpy,
			          GLXPbuffer pbuf);

    void glXQueryGLXPbufferSGIX(Display *dpy,
			        GLXPbuffer pbuf,
			        int attribute,
			        unsigned int *value);

    void glXSelectEventSGIX(Display *dpy,
	  		    GLXDrawable drawable,
			    unsigned long mask);

    void glXGetSelectedEventSGIX(Display *dpy,
  		                 GLXDrawable drawable,
			         unsigned long *mask);


New Tokens


        GLX_MAX_PBUFFER_WIDTH_SGIX		0x8016
        GLX_MAX_PBUFFER_HEIGHT_SGIX		0x8017
        GLX_MAX_PBUFFER_PIXELS_SGIX		0x8018
        GLX_OPTIMAL_PBUFFER_WIDTH_SGIX		0x8019
        GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX		0x801A


	GLX_PBUFFER_BIT_SGIX			0x00000004


        GLX_PRESERVED_CONTENTS_SGIX		0x801B
        GLX_LARGEST_PBUFFER_SGIX		0x801C


        GLX_WIDTH_SGIX 				0x801D
        GLX_HEIGHT_SGIX				0x801E
	GLX_EVENT_MASK_SGIX			0x801F


	GLX_BUFFER_CLOBBER_MASK_SGIX  		0x08000000


	GLX_DAMAGED_SGIX 			0x8020
	GLX_SAVED_SGIX				0x8021


        GLX_WINDOW_SGIX				0x8022
	GLX_PBUFFER_SGIX			0x8023


	GLX_FRONT_LEFT_BUFFER_BIT_SGIX		0x00000001
	GLX_FRONT_RIGHT_BUFFER_BIT_SGIX		0x00000002
	GLX_BACK_LEFT_BUFFER_BIT_SGIX		0x00000004
	GLX_BACK_RIGHT_BUFFER_BIT_SGIX		0x00000008
	GLX_AUX_BUFFERS_BIT_SGIX		0x00000010
	GLX_DEPTH_BUFFER_BIT_SGIX		0x00000020
	GLX_STENCIL_BUFFER_BIT_SGIX		0x00000040
	GLX_ACCUM_BUFFER_BIT_SGIX		0x00000080
	GLX_SAMPLE_BUFFERS_BIT_SGIX		0x00000100

