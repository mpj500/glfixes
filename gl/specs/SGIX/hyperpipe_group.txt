Name

    SGIX_hyperpipe

Name Strings

    GLX_SGIX_hyperpipe

Contact

    Jon Leech, SGI (ljp 'at' sgi.com)

Status

    Shipping on SGI Infinite Reality and Ultimate Vision systems.

Version

    Last Modified Date: 2004/07/21
    Revision: $Header: //depot/main/doc/registry/extensions/SGI/hyperpipe_group.spec#14 $

Number

    307

Dependencies

    GLX 1.2 is required
    SGIX_swap_control affects the definition of this extension.

Overview

    Even though graphics hardware is constantly improving in speed, there
    will always be applications that require more performance than is
    available from a single pipeline. In order to overcome these limits,
    it is possible to parallelize the rendering task across multiple
    pipes; the image outputs of these pipes must then be assembled into
    a single display output. This group of pipes is termed a hyperpipe;
    the pipes involved must be physically cabled together in some way
    to form a hyperpipe network. Typically a hyperpipe network uses one
    of the pipes to assemble the rendered images and drive the display.

    In a hyperpipe network, the rendering task may be divided by rendering
    each successive frame on a different hardware pipe (temporal division);
    by dividing the frame into rectangular subregions and rendering each
    on a different pipe (spatial division); or by a combination of these
    two techniques. Specific hardware implementations may impose limits
    on how rendering may be subdivided; but in general it is possible to
    use a subset of the pipes connected to a hyperpipe network if desired.

    This extension provides a means for configuring and managing a group
    of rendering pipes which work together to produce a single display.
    Typically, a hyperpipe application will be multithreaded, with
    one thread per pipe; each thread needs to create its own rendering
    context. The hyperpipe extension allows these rendering threads to
    communicate with the hardware.

    The API calls allow an application to :

    o  Determine the physical configuration of a hyperpipe network.

    o  Configure the hyperpipe. The hyperpipe configuration used by the
       application may be a subset of the physical hyperpipe network.
       The rendering task may be divided in time slices (temporally divided),
       in rectangular regions of a single frame (spatially divided), or both.
       The hyperpipe configuration is subject to hardware constraints.

       For example, on a hyperpipe network consisting of five pipes, it
       would be possible to configure a rendering task in two time slices,
       with each slice being rendered by two pipes; thus using four total
       pipes. (The fifth pipe would not be used in the hyperpipe, and
       could be used for normal non-hyperpipe rendering and display).

    o  Maintain state to manage the glXSwapBuffers() call correctly. In
       spatial subdivision, swap cannot occur until all pipes rendering
       the next frame have completed; and in temporal subdivision, swap
       cannot occur until the appropriate time. Swap management is
       handled by the displaying pipe.

    o  Redirect resize parameters correctly; typically resize is handled
       by the displaying pipe, and must be managed synchronously with
       swap.

    o  Balance load among the pipes in the spatial subdivision case.

    o  Clean up operations when a hyperpipe application terminates
       (either normally or due to error).

    This extension adds to the set of conditions that must be met before
    a buffer swap can take place.

Issues and Notes

    o  This extension will work only on graphics pipelines with suitable
       hyperpipe hardware installed.


New Procedures and Functions

    The following structure definitions are used by the extension:

    /*
     *	pipeName uniquely names a pipe in the form ":display.screen"
     *	networkId is a unique physical hyperpipe network ID.
     */
    typedef struct {
	char  pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
	int  networkId;
    } GLXHyperpipeNetworkSGIX;

    /*
     *	pipeName uniquely names a pipe in the form ":display.screen"
     *	channel is the channel number associated with the display pipe.
     *	participationType is a bitmask describing the attributes of a
     *	    participating pipe. It may contain one or more of the
     *	    attribute bits
     *		GLX_HYPERPIPE_DISPLAY_PIPE_SGIX
     *		GLX_HYPERPIPE_RENDERING_PIPE_SGIX
     *	timeSlice is ignored for GLX_HYPERPIPE_DISPLAY_PIPE_SGIX only.
     */
    typedef struct {
	char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
	int channel;
	unsigned int participationType;
	int timeSlice;
    } GLXHyperpipeConfigSGIX;

    /*
     *	pipeName uniquely names a pipe in the form ":display.screen"
     *	src origin/size are in managed area coordinates (pixels).
     *	dest origin/size are in output channel display coordinates.
     */
    typedef struct {
	char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
	int srcXOrigin;
	int srcYOrigin;
	int srcWidth;
	int srcHeight;
	int destXOrigin;
	int destYOrigin;
	int destWidth;
	int destHeight;
    } GLXPipeRect;

    /*
     *	pipeName uniquely names a pipe in the form ":display.screen"
     *	origin/size are in managed area coordinates (pixels)
     */
    typedef struct {
	char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
	int XOrigin; /* pixels in managed area */
	int YOrigin;
	int maxHeight;
	int maxWidth;
    } GLXPipeRectLimits;

    GLXHyperpipeNetworkSGIX *
	glXQueryHyperpipeNetworkSGIX(
	    Display *dpy, int *npipes);

    int glXHyperpipeConfigSGIX(
	    Display *dpy, int networkId, int npipes,
	    GLXHyperpipeConfigSGIX *cfg, int *hpId);

    GLXHyperpipeConfigSGIX *
	glXQueryHyperpipeConfigSGIX(
	    Display *dpy, int hpId, int *npipes);

    int glXDestroyHyperpipeConfigSGIX(
	    Display * dpy, int hpId);

    int glXBindHyperpipeSGIX(
	    Display *dpy, int hpId);

    int glXQueryHyperpipeBestAttribSGIX(
	    Display *dpy, int timeSlice, int attrib, int size,
	    void *attribList, void *returnAttribList);

    int glXHyperpipeAttribSGIX(
	    Display *dpy, int timeSlice, int attrib, int size,
	    void *attribList);

    int glXQueryHyperpipeAttribSGIX(
	    Display *dpy, int timeSlice, int attrib, int size,
	    void *returnAttribList);



New Tokens


	GLX_HYPERPIPE_ID_SGIX		    0x8030


	GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80


	GLX_HYPERPIPE_DISPLAY_PIPE_SGIX     0x00000001
	GLX_HYPERPIPE_RENDER_PIPE_SGIX	    0x00000002


	GLX_PIPE_RECT_SGIX		    0x00000001
	GLX_PIPE_RECT_LIMITS_SGIX	    0x00000002
	GLX_HYPERPIPE_STEREO_SGIX	    0x00000003
	GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX    0x00000004






	GLX_BAD_HYPERPIPE_CONFIG_SGIX	    91
	GLX_BAD_HYPERPIPE_SGIX		    92


