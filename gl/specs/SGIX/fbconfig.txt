Name

    SGIX_fbconfig

Name Strings

    GLX_SGIX_fbconfig

Version
    
    $Date: 1997/03/24 18:56:20 $ $Revision: 1.16 $

Number

    49

Dependencies

    SGIS_multisample affects the definition of this extension
    EXT_visual_info affects the definition of this extension
    EXT_visual_rating affects the definition of this extension
    EXT_import_context affects the definition of this extension
    SGIX_pbuffer affects the definition of this extension

Overview

    This extension introduces a new way to describe the capabilities of a 
    GLX drawable (i.e., to describe the depth of color buffer components 
    and the type and size of ancillary buffers), removes the "similarity"
    requirement when making a context current to a drawable, and supports 
    RGBA rendering to one- and two-component Windows and GLX Pixmaps.

    Currently GLX overloads X Visuals with information on GLX drawable
    capabilities. This extension defines a new construct, a GLXFBConfigSGIX,
    that encapsulates GLX drawable capabilities and has the following 
    properties:
    
       - It may or may not have an associated X visual. If it does have 
       an associated X visual then it is possible to create Windows that  
       have the capabilities described by the GLXFBConfig.

       - A particular GLXFBConfig does not need to work with all GLX 
       drawables. For example, it is possible for implementations to export 
       GLXFBConfigs that only work with GLX pixmaps.

    This extension also removes the "similarity" restriction when making
    a context and drawable current. Instead a less restrictive requirement 
    of "compatibility" (see definition below) is imposed. Note that when 
    a context is created it has an associated rendering type which
    is either RGBA or color index. In the future we may want to remove all
    "similarity" and "compatibility" restrictions and allow a context to be
    bound to any drawable that supports its rendering type.

    Finally the current GLX specification requires that the GLX_RGBA visual
    attribute be associated only with X visual types TrueColor and DirectColor. 
    This extension defines the semantics for doing RGBA rendering to Windows
    created with visuals of type PseudoColor, StaticColor, GrayScale, and 
    StaticGray.  In each of these cases, the red component is used to
    generate the display, and the green and blue components, if present,
    are ignored for display purposes.  

    The OpenGL RGBA rendering semantics are more powerful than the OpenGL
    index rendering semantics.  By extending the number of X visual types
    that can be associated with an RGBA color buffer, this extension allows
    RGBA rendering semantics to be used with pseudo color and gray scale
    displays.  An especially useful application of this extension is
    support of one- and two-component RGBA drawables; drawables whose green,
    blue, and sometimes alpha components have no bitplanes.


Issues

    *	Should GLXFBConfigs apply to all GLX drawables or just GLXPbuffers?

        A: For consistency, all GLX drawables should be supported. (And if this 
        extension is incorporated in a future release of GLX then the existing 
        calls that rely on XVisualInfo structures should be deprecated.) The 
        current mechanism which ties the description of GLX drawables to
        X visuals is inadequate since it restricts all drawable configurations
        to those which can be supported by on-screen windows.

    *   Should the selection of an FBConfig differ from glXChooseVisual? If 
	so, how? 

        Yes. For some attributes, the default value (that is, the value that is
        used if the attribute is not specified in the list) should be "don't 
        care". Also, an ordered list of GLXFBConfigs should be returned so 
        applications can go through the list and apply their own policies to 
        determine the best GLXFBConfig.

    *   Do we want to introduce the notion of "compatible" GLXFBConfigs and 
	visuals? (GLX currently uses the term "similar". GLXContexts and 
	GLXDrawables are similar iff they have been created with respect 
	to the same VisualID and root window.)
   
        A: Yes. The GLX definition of similar visuals is too restrictive 
	(and the glXMakeCurrentRead extension already relaxes it.) This 
	is the right time to agree on a definition since we need to define 
	how GLXFBConfigs match up to X Visuals. Note, that we do not 
	redefine similar; instead a new term, compatible, is introduced.
        In the future, we may want to remove this restriction and allow
        a context to be bound to any drawable. (But a context would still
        be created to do either RGBA or color index rendering.)


New Procedures and Functions

    int glXGetFBConfigAttribSGIX(Display *dpy, 
			         GLXFBConfigSGIX config,
			         int attribute,
			         int *value);
					   
    GLXFBConfigSGIX *glXChooseFBConfigSGIX(Display *dpy, 
				           int screen,
				           const int *attrib_list,
				           int *nelements);
					   
    GLXPixmap glXCreateGLXPixmapWithConfigSGIX(Display *dpy, 
		                   	       GLXFBConfig config,
				   	       Pixmap pixmap);

    GLXContext glXCreateContextWithConfigSGIX(Display *dpy,  
                                              GLXFBConfig config,
					      int render_type,
                                              GLXContext share_list,
				 	      Bool direct);

    XVisualInfo *glXGetVisualFromFBConfigSGIX(Display *dpy,
                                              GLXFBConfig config);

    GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX(Display *dpy,
                                                 XVisualInfo *vis);

New Tokens


        GLX_DRAWABLE_TYPE_SGIX		0x8010
        GLX_RENDER_TYPE_SGIX		0x8011
        GLX_X_RENDERABLE_SGIX		0x8012


	GLX_FBCONFIG_ID_SGIX		0x8013

 
        GLX_SCREEN_EXT			0x800C
    

        GLX_WINDOW_BIT_SGIX		0x00000001
	GLX_PIXMAP_BIT_SGIX		0x00000002


        GLX_RGBA_BIT_SGIX		0x00000001
	GLX_COLOR_INDEX_BIT_SGIX	0x00000002


        GLX_RGBA_TYPE_SGIX		0x8014
	GLX_COLOR_INDEX_TYPE_SGIX	0x8015

