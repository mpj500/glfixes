Name

    SGIS_pixel_texture

Name Strings

    GL_SGIS_pixel_texture

Version

    Last Modified Date: July 15, 1998
    Author Revision: $Header: //depot/main/doc/registry/extensions/SGI/pixel_texture.spec#14 $

Number

    15

Dependencies

    None

Overview

    The geometry rasterization and pixel pipeline "convert to fragment"
    stages each produce fragments.  The fragments are processed by
    a unified per fragment pipeline that begins with the application
    of the texture to the fragment color.  Because the pixel pipeline
    shares the per fragment processing with the geometry pipeline, the
    fragments produced by the pixel pipeline must have the same fields
    as the ones produced by the geometry pipeline.  When
    pixel groups are being converted to fragments, the parts 
    of the fragment that aren't derived from the pixel groups 
    are taken from the associated values in the current raster position.

    A fragment consists of x and y window coordinates and their
    associated color value, depth value, and texture coordinates.
    In the 1.1 OpenGL specification, when the pixel group is RGBA
    the fragment color is always derived from the pixel group, 
    and the depth value and texture coordinates always come 
    from the raster position.

    This extension provides a way to specify how the texture coordinates
    of the fragments can be derived from RGBA pixel groups.  When
    this option is enabled, the source of the fragment color value
    when the pixel group is RGBA can be specified to come from either 
    the raster position or the pixel group.

    Deriving the fragment texture coordinates from the pixel group
    effectively converts a color image into a texture coordinate image.
    The multidimensional texture mapping lookup logic also makes this
    extension useful for implementing multidimensional color lookups.
    Multidimensional color lookups can be used to implement very
    accurate color space conversions.

    Deriving texture coordinates from the pixel groups in the pixel
    pipeline introduces a problem with the lambda parameter in the
    texture mapping equations.  When texture coordinates are
    being taken from the current raster position texture coordinates,
    the texture coordinate values don't change from pixel to pixel,
    and the equation for calculating lambda always produces zero.
    Enabling pixel_texture introduces changes in the texture
    coordinates from pixel to pixel which are not necessarily
    meaningful for texture lookups.  This problem is addressed
    by specifying that lambda is always set to zero when pixel_texture 
    is enabled.  

Issues

    * Why do we need the named param?  

      Originally the single mode parameter was sufficient to control
      the fragment's color source.  However, new extensions (currently
      lod and bit and possibly more in the future) introduce
      additional ways to manipulate the way pixel texture operates.
      These extensions modify the behavior of functionality which
      is orthogonal to the functionality modified by this extension,
      so multiple pixel_texture parameters are needed.  The named
      parameter provides a way to set the multiple pixel_texture
      parameters.

    * Should LOD be supported?  

      This has been addressed by the GL_SGIX_pixel_texture_lod extension.

    * The fragment color source can be viewed as having its own
      distinct functionality separate from the role it plays in
      PIXEL_TEXTURE_SGIS.  Should it have its own extension?  
      
      No.

    * We chose the name PixelTexGenParameterSGIS because PixelTexGenSGIX
      has already been taken by the impact_pixel_texture extension.
      Should the name be TexGenParam rather than PixelTexGenParam?
      TexGenParam would then be used to expand either geometry texgen
      functionality or pixel_texture functionality.  Or can we get
      away with using PixelTexGen{if}?

      Use PixelTexGenParameteriSGIS and PixelTexGenParameterivSGIS.

    * Should the PIXEL_TEXTURE_SGIS pipeline include a texture matrix?

      No.  The color matrix can be used if needed.  
      The texture matrix takes place during geometry rasterization --
      it's nice to keep that part of the pipeline separate 
      from the pixel part.

    * Do we need to include PixelTexGenParameter{if}vSGIS to be
      complete?  
      
      Yes.  This will make things less confusing if future
      extensions want to define a float named param.  

New Procedures and Functions

    void PixelTexGenParameter{if}SGIS(enum pname, T param);
    void GetPixelTexGenParameter{if}vSGIS(enum pname, T params);

New Tokens



	

	

