Name

    MESAX_texture_stack

Name Strings

    GL_MESAX_texture_stack

Contact

    Ian Romanick, IBM (idr 'at' us.ibm.com)

IP Status

    No known IP issues.

Status

    TBD

Version

    $Date: 2005/12/12$ $Revision: 0.3$

Number

    318

Dependencies

    OpenGL 1.2 or GL_EXT_texture3D is required.

    Support for ARB_fragment_program is assumed, but not required.

    Support for ARB_fragment_program_shadow is assumed, but not required.

    Support for EXT_framebuffer_object is assumed, but not required.

    Written based on the wording of the OpenGL 2.0 specification and
    ARB_fragment_program_shadow but not dependent on them.

Overview

    There are a number of circumstances where an application may wish to
    blend two textures out of a larger set of textures.  Moreover, in some
    cases the selected textures may vary on a per-fragment basis within
    a polygon.  Several examples include:

       1. High dynamic range textures.  The application stores several
       different "exposures" of an image as different textures.  On a
       per-fragment basis, the application selects which exposures are
       used.

       2. A terrain engine where the altitude of a point determines the
       texture applied to it.  If the transition is from beach sand to
       grass to rocks to snow, the application will store each texture
       in a different texture map, and dynamically select which two
       textures to blend at run-time.

       3. Storing short video clips in textures.  Each depth slice is a
       single frame of video.

    Several solutions to this problem have been proposed, but they either
    involve using a separate texture unit for each texture map or using 3D
    textures without mipmaps.  Both of these options have major drawbacks.

    This extension provides a third alternative that eliminates the major
    drawbacks of both previous methods.  A new texture target,
    TEXTURE_2D_STACK, is added that functions identically to TEXTURE_3D in
    all aspects except the sizes of the non-base level images.  In
    traditional 3D texturing, the size of the N+1 LOD is half the size
    of the N LOD in all three dimensions.  For the TEXTURE_2D_STACK target,
    the height and width of the N+1 LOD is halved, but the depth is the
    same for all levels of detail. The texture then becomes a "stack" of
    2D textures.  The per-fragment texel is selected by the R texture
    coordinate.

    References:

        http://www.opengl.org/discussion_boards/cgi_directory/ultimatebb.cgi?ubb=get_topic;f=3;t=011557
        http://www.opengl.org/discussion_boards/cgi_directory/ultimatebb.cgi?ubb=get_topic;f=3;t=000516
        http://www.opengl.org/discussion_boards/cgi_directory/ultimatebb.cgi?ubb=get_topic;f=3;t=011903
        http://www.delphi3d.net/articles/viewarticle.php?article=terraintex.htm

Issues

    (1) Is "texture stack" a good name for this functionality?

        NO.  However, I can't think of anything else that is better.

    (2) Should the R texture coordinate be treated as normalized or
    un-normalized?  If it were un-normalized, floor(R) could be thought
    of as a direct index into the texture stack.  This may be more
    convenient for applications.

        RESOLVED.  All texture coordinates are normalized.  The issue of
        un-normalized texture coordinates has been discussed in the ARB
        before and should be left for a layered extension.

    (3) How does LOD selection work for stacked textures?

        RESOLVED.  For 2D texture stacks the R coordinate is ignored, and
        the LOD selection equations for 2D textures are used.  For 1D
        texture stacks the T coordinate is ignored, and the LOD selection
        equations for 1D textures are used.  The expected usage is in a
        fragment program with an explicit LOD selection.

    (4) What is the maximum size of a 2D texture stack?  Is it the same
    as for a 3D texture, or should a new query be added?  How about for 1D
    texture stacks?

        UNRESOLVED.

    (5) How are texture stacks exposed in GLSL?
    
        RESOLVED.  For now, they're not exposed at all.  Mesa doesn't
	currently support GLSL, so it's somewhat moot.
	
	When this extension is converted to MESA, EXT, or ARB, it is
	expected that an additional samplers (e.g., sampler1DStack and
	sampler2DStack) and texture lookup functions (e.g., texture1DStack and
	texture2Dstack) will be added.
        
    (6) Should a 1D texture stack also be exposed?

        RESOLVED.  For orthogonality, yes.

    (7) How are stacked textures attached to framebuffer objects?

        SEMI-RESOLVED.  Slices of TEXTURE_2D_STACK textures are attached in
        the same manner as slices of traditional 3D textures.

        TEXTURE_1D_STACK textures are a bit more tricky.  This could be
        handled one of two ways.  The entire texture could be attached using
        FramebufferTexture2DEXT, or a new function could be created that
        would allow the attachment of a single 1D slice of the texture.  The
        spec currently uses the former, but the later may be more logical.

New Procedures and Functions

    None

New Tokens


        TEXTURE_1D_STACK_MESAX            0x8759
        TEXTURE_2D_STACK_MESAX            0x875A


        PROXY_TEXTURE_1D_STACK_MESAX      0x875B
        PROXY_TEXTURE_2D_STACK_MESAX      0x875C


        TEXTURE_1D_STACK_BINDING_MESAX    0x875D
        TEXTURE_2D_STACK_BINDING_MESAX    0x875E





