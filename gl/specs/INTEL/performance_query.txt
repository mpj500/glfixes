Name

    INTEL_performance_query

Name Strings

    GL_INTEL_performance_query

Contact

   Tomasz Madajczak, Intel (tomasz.madajczak 'at' intel.com)

Contributors

    Piotr Uminski, Intel
    Slawomir Grajewski, Intel

Status

    Complete, shipping on selected Intel graphics.

Version

    Last Modified Date: December 20, 2013
    Revision: 3

Number

    OpenGL Extension #443
    OpenGL ES Extension #164

Dependencies

    OpenGL dependencies:

        OpenGL 3.0 is required.

        The extension is written against the OpenGL 4.4 Specification, Core
        Profile, October 18, 2013.

    OpenGL ES dependencies:

        This extension is written against the OpenGL ES 2.0.25 Specification
        and OpenGL ES 3.0.2 Specification.

Overview

    The purpose of this extension is to expose Intel proprietary hardware
    performance counters to the OpenGL applications. Performance counters may
    count:

    - number of hardware events such as number of spawned vertex shaders. In
      this case the results represent the number of events.

    - duration of certain activity, like time took by all fragment shader
      invocations. In that case the result usually represents the number of
      clocks in which the particular HW unit was busy. In order to use such
      counter efficiently, it should be normalized to the range of <0,1> by
      dividing its value by the number of render clocks.

    - used throughput of certain memory types such as texture memory. In that
      case the result of performance counter usually represents the number of
      bytes transferred between GPU and memory.

    This extension specifies universal API to manage performance counters on
    different Intel hardware platforms. Performance counters are grouped
    together into proprietary, hardware-specific, fixed sets of counters that
    are measured together by the GPU.

    It is assumed that performance counters are started and ended on any
    arbitrary boundaries during rendering. 

    A set of performance counters is represented by a unique query type. Each
    query type is identified by assigned name and ID. Multiple query types
    (sets of performance counters) are supported by the Intel hardware. However
    each Intel hardware generation supports different sets of performance
    counters.  Therefore the query types between hardware generations can be
    different. The definition of query types and their results structures can
    be learned through the API. It is also documented in a separate document of
    Intel OGL Performance Counters Specification issued per each new hardware
    generation.

    The API allows to create multiple instances of any query type and to sample
    different fragments of 3D rendering with such instances. Query instances
    are identified with handles.

New Procedures and Functions

    void GetFirstPerfQueryIdINTEL(uint *queryId);

    void GetNextPerfQueryIdINTEL(uint queryId, uint *nextQueryId);

    void GetPerfQueryIdByNameINTEL(char *queryName, uint *queryId);

    void GetPerfQueryInfoINTEL(uint queryId,
             uint queryNameLength, char *queryName,
             uint *dataSize, uint *noCounters, 
             uint *noInstances, uint *capsMask);

    void GetPerfCounterInfoINTEL(uint queryId, uint counterId,
             uint counterNameLength, char *counterName,
             uint counterDescLength, char *counterDesc,
             uint *counterOffset, uint *counterDataSize, uint *counterTypeEnum,
             uint *counterDataTypeEnum, uint64 *rawCounterMaxValue);

    void CreatePerfQueryINTEL(uint queryId, uint *queryHandle);

    void DeletePerfQueryINTEL(uint queryHandle);

    void BeginPerfQueryINTEL(uint queryHandle);

    void EndPerfQueryINTEL(uint queryHandle);

    void GetPerfQueryDataINTEL(uint queryHandle, uint flags,
             sizei dataSize, void *data, uint *bytesWritten);

New Tokens


        PERFQUERY_SINGLE_CONTEXT_INTEL          0x0000
        PERFQUERY_GLOBAL_CONTEXT_INTEL          0x0001


        PERFQUERY_WAIT_INTEL                    0x83FB
        PERFQUERY_FLUSH_INTEL                   0x83FA
        PERFQUERY_DONOT_FLUSH_INTEL             0x83F9


        PERFQUERY_COUNTER_EVENT_INTEL           0x94F0
        PERFQUERY_COUNTER_DURATION_NORM_INTEL   0x94F1
        PERFQUERY_COUNTER_DURATION_RAW_INTEL    0x94F2
        PERFQUERY_COUNTER_THROUGHPUT_INTEL      0x94F3
        PERFQUERY_COUNTER_RAW_INTEL             0x94F4
        PERFQUERY_COUNTER_TIMESTAMP_INTEL       0x94F5


        PERFQUERY_COUNTER_DATA_UINT32_INTEL     0x94F8
        PERFQUERY_COUNTER_DATA_UINT64_INTEL     0x94F9
        PERFQUERY_COUNTER_DATA_FLOAT_INTEL      0x94FA
        PERFQUERY_COUNTER_DATA_DOUBLE_INTEL     0x94FB
        PERFQUERY_COUNTER_DATA_BOOL32_INTEL     0x94FC


        PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL   0x94FD
        PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
        PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF


        PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL   0x9500

