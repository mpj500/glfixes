Name

    REND_screen_coordinates

Name Strings

    GL_REND_screen_coordinates

Version

    $Date: 1998/06/15 20:37:15 $ $Revision: 1.1 $

Number

    155

Dependencies

    OpenGL 1.1 is required
    EXT_fog_coord affects the definition of this extension.
    EXT_cull_vertex affects the definition of this extension.

Overview

    This extension allows the specification of screen coordinate vertex
    data. Screen coordinate vertices completely bypass transformation,
    texture generation, lighting and frustum clipping. It also allow for
    fewer floating point computations to the performed by OpenGL.

    If we get screen coordinate inputs then in order to perspectively
    correct data (eg texture), the input data currently has to be
    specified in one of the following manners

	1. Specify all the data normally
	   eg.
		  glTexture2T(s, t);
	   and the coordinates as
		  glVertex4T(x*w, y*w, z*w, w);
	or
	2. Divide each data by w
	   eg.
		  glTexture4T(s/w, t/w, r/w, q/w);
	   and the coordinates as
		  glVertex3T(x, y, z);

    Most hardware already performs some form of correction of the
    coordinate data with respect to the w term prior to interpolation.
    This is normally in the form of a multiplication of the terms by the
    inverse w. It would be much more efficient to simply specify screen
    coordinates as shown in the following example
	   glTexture2T(s, t, r, q);
    and the coordinates as
	   glVertex4T(x, y, z, w);
    and allow the hardware to bring the interpolated terms into a linear
    screen space.

    Additionally if the application derives screen coordinates it is
    also highly likely that the 1/w term may already be computed. So it
    would be advantageous to be able to specify 1/w directly instead of
    w in the input screen coordinates.

    For hardware that linearly interpolates data, the hardware
    interpolates the following data:
	s/w, t/w, r/w, q/w, x, y, z
    If the input w represents the original 1/w, then the hardware can
    avoid the division and instead interpolate:
	s*w, t*w, r*w, q*w, x, y, z


Issues

    * Should screen coordinates have been done as a hint instead of
      an enable bit?

    RESOLVED: Since this extension specifies changes the semantics of
    OpenGL, we need to make this an enable bit

    * Should the texture matrix be applied to the input screen
      coordinates?

    This spec assumes that the texture matrix is applied

    * Should the raster position valid be set to invalid when screen
      coordinates are enabled.

    RESOLVED: Raster position can still be defined. But the raster
    position calls should act similar to the vertex specification calls.
    So the raster position calls will be specifying screen space
    coordinates. The raster position will always be valid. The

    raster eye z will be defined to be 0 always.

    * Should we allow evaluators in screen space?

    This spec is written assuming the evaluators will act as if it is
    disabled

    * Should we ignore selection if screen coordinates is enabled, or
      select everything?

    * Should we ignore feedback in screen coordinates is enabled, or
      return everything?

New Procedures and Functions

    None.

New Tokens


    SCREEN_COORDINATES_REND	0x8490
    INVERTED_SCREEN_W_REND	0x8491

