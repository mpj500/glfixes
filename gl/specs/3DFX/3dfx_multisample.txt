Name

    3DFX_multisample

Name Strings

    GL_3DFX_multisample
    GLX_3DFX_multisample
    WGL_3DFX_multisample

Contact

    Paula Womack, 3dfx Interactive (paulaw 'at' 3dfx.com)

Status

    Complete.

Version

    Date: April 18, 2000; Version 1.1

Number

    207

Dependencies

    OpenGL 1.1 is required.
    GLX 1.2 is required.
    WGL_ARB_extensions_string is required.
    WGL_ARB_pixel_format is required.
    GLX_EXT_fbconfig and GLX 1.3 affect the definition of this extension.
    This spec is written against OpenGL 1.2 and GLX 1.3

Overview

    This extension provides a mechanism to antialias all GL primitives:
    points, lines, polygons, bitmaps, and images. The technique is to
    sample all primitives multiple times at each pixel. The color sample
    values are resolved to a single, displayable color each time a pixel
    is updated, so the antialiasing appears to be automatic at the
    application level. Because each sample includes depth and stencil
    information, the depth and stencil functions perform equivalently to
    the single-sample mode.

    An additional buffer, called the multisample buffer, is added to the
    framebuffer. Pixel sample values, including color, depth, and
    stencil values, are stored in this buffer. When the framebuffer
    includes a multisample buffer, it does not also include separate
    depth or stencil buffers, even if the multisample buffer does not
    store depth or stencil values. Color buffers (left/right,
    front/back, and aux) do coexist with the multisample buffer,
    however.

    Multisample antialiasing is most valuable for rendering polygons,
    because it requires no sorting for hidden surface elimination, and
    it correctly handles adjacent polygons, object silhouettes, and even
    intersecting polygons. If only points or lines are being rendered,
    the "smooth" antialiasing mechanism provided by the base GL may
    result in a higher quality image.

    This extension is a subset of SGIS_multisample. It differs in these
    key ways:

       * Fragment alpha values are not affected by the fragment sample mask
       * The sample locations may or may not be fixed. Thus, there is no
	 support for rendering the scene multiple times with different
	 sample points.
       * Fragment masks are not computed for images or for bitmasks.

    Because of these differences a new extension was created. However,
    it is not expected that this extension will co-exist with
    SGIS_multisample. Because of this and the fact that there are only
    32 push/pop bits the MULTISAMPLE_BIT_SGIS state value is the same as
    MUTLISAMPLE_BIT_3DFX.

IP Status

    No issues.

Issues

    Should tbuffer be kept as a separate extension?

    Yes. The ability to define a write mask for the fragment mask should
    be kept separate. This feature is orthogonal to SGIS_multisample,
    while 3DFX_multisample is not. 3DFX_multisample is a strict subset
    of SGIS_multisample.

    Should the multisample buffer be defined as a separate buffer?

    Yes. It does not need to be implemented this way though. Since GL
    rendering is done off screen and then blitted (to handle window
    clipping) the multisample buffer can actually be the same as the
    offscreen front and back buffers. The blit engine handles reads and
    writes to/from AA buffers so ReadPixels will work correctly.

    Should we allow the depth values for the different samples to differ
    when AA is off?

    No. This will be a bug on hardware that operates this way. In
    practice it should not be a big issue.

New Procedures and Functions

    None

New Tokens


	GLX_SAMPLE_BUFFERS_3DFX			    0x8050
	GLX_SAMPLES_3DFX			    0x8051


	WGL_SAMPLE_BUFFERS_3DFX			    0x2060
	WGL_SAMPLES_3DFX			    0x2061


	MULTISAMPLE_3DFX			    0x86B2


	SAMPLE_BUFFERS_3DFX			    0x86B3
	SAMPLES_3DFX				    0x86B4


	MULTISAMPLE_BIT_3DFX			    0x20000000

