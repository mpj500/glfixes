Name
    
    EXT_texture_lod_bias

Name Strings

    GL_EXT_texture_lod_bias

Notice

    Copyright NVIDIA Corporation, 1999, 2000.

Contact

    Mark Kilgard, NVIDIA (mjk 'at' nvidia.com)

Status

    Shipping since late 1999.

    The texture LOD bias functionality in OpenGL 1.4 is based on this
    extension though the OpenGL 1.4 functionality added the ability to
    specify a second per-texture object bias term.  The OpenGL 1.4 enum
    values match the EXT enum values.

Version

    Last Modified Date: June 23, 2009

Number

    OpenGL Extension #186
    OpenGL ES Extension #60

Dependencies

    Written based on the wording of the OpenGL 1.2 specification.

    Affects ARB_multitexture.
    
    Interacts with OpenGL ES 1.1.

Overview

    OpenGL computes a texture level-of-detail parameter, called lambda
    in the GL specification, that determines which mipmap levels and
    their relative mipmap weights for use in mipmapped texture filtering.

    This extension provides a means to bias the lambda computation
    by a constant (signed) value.  This bias can provide a way to blur
    or pseudo-sharpen OpenGL's standard texture filtering.

    This blurring or pseudo-sharpening may be useful for special effects
    (such as depth-of-field effects) or image processing techniques
    (where the mipmap levels act as pre-downsampled image versions).
    On some implementations, increasing the texture lod bias may improve
    texture filtering performance (at the cost of texture bluriness).

    The extension mimics functionality found in Direct3D.

Issues

    Should the texture LOD bias be settable per-texture object or
    per-texture stage?

      RESOLUTION:  Per-texture stage.  This matches the Direct3D
      semantics for texture lod bias.  Note that this differs from
      the semantics of SGI's SGIX_texture_lod_bias extension that
      has the biases per-texture object.

      This also allows the same texture object to be used by two different
      texture units for different blurring.  This is useful for
      extrapolating detail between various levels of detail in a
      mipmapped texture.

      For example, you can extrapolate texture detail with
      ARB_multitexture and EXT_texture_env_combine by computing

        (B0 - B2) * 2 + B2

      where B0 is a non-biased texture (normal sharpness) and B2 is
      the same texture but bias by 2 levels-of-detail (fairly blurry).
      This has the effect of increasing the high-frequency information
      in the texture.  There are immediate Earth Sciences and medical
      imaging applications for this technique.

      Per-texture stage control of the LOD bias is also useful for
      allowing an application to control overall texture bluriness.
      This can be used in games to simulate disorientation (note that
      only textures will blur, not edges).  It can also be used to
      globally control texturing performance.  An application may be
      able to sustain a constant frame rate by avoiding texture fetch
      stalls by using slightly blurrier textures.

    How does EXT_texture_lod_bias differ from SGIX_texture_lod bias?

      EXT_texture_lod_bias adds a bias to lambda.  The
      SGIX_texture_lod_bias extension changes the computation of rho (the
      log2 of which is lambda).  The SGIX extension provides separate
      biases in each texture dimension.  The EXT extension does not
      provide an "directionality" in the LOD control.

    Does the texture lod bias occur before or after the TEXTURE_MAX_LOD
    and TEXTURE_MIN_LOD clamping?

      RESOLUTION:  BEFORE.  This allows the texture lod bias to still
      be clamped within the max/min lod range.

    Does anything special have to be said to keep the biased lambda value
    from being less than zero or greater than the maximum number of
    mipmap levels?

      RESOLUTION:  NO.  The existing clamping in the specification
      handles these situations.

    The texture lod bias is specified to be a float.  In practice, what
    sort of range is assumed for the texture lod bias?

      RESOLUTION:  The MAX_TEXTURE_LOD_BIAS_EXT implementation constant
      advertises the maximum absolute value of the supported texture
      lod bias.  The value is recommended to be at least the maximum
      mipmap level supported by the implementation.

    The texture lod bias is specified to be a float.  In practice, what
    sort of precision is assumed for the texture lod bias?

      RESOLUTION;  This is implementation dependent.  Presumably,
      hardware would implement the texture lod bias as a fractional bias
      but the exact fractional precision supported is implementation
      dependent.  At least 4 fractional bits is recommended.

New Procedures and Functions

    None

New Tokens


        TEXTURE_FILTER_CONTROL_EXT          0x8500

        
        TEXTURE_LOD_BIAS_EXT                0x8501


        MAX_TEXTURE_LOD_BIAS_EXT            0x84FD

