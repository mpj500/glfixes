Name

    EXT_secondary_color

Name Strings

    GL_EXT_secondary_color

Version

    NVIDIA Date: February 24, 2000
    $Date: 1999/06/21 19:57:47 $ $Revision: 1.8 $

Number

    145

Dependencies

    Either EXT_separate_specular_color or OpenGL 1.2 is required, to specify
    the "Color Sum" stage and other handling of the secondary color. This is
    written against the 1.2 specification (available from www.opengl.org).

Overview

    This extension allows specifying the RGB components of the secondary
    color used in the Color Sum stage, instead of using the default
    (0,0,0,0) color. It applies only in RGBA mode and when LIGHTING is
    disabled.

Issues

  * Can we use the secondary alpha as an explicit fog weighting factor?

        ISVs prefer a separate interface (see GL_EXT_fog_coord). The current
        interface specifies only the RGB elements, leaving the option of a
        separate extension for SecondaryColor4() entry points open (thus
        the apparently useless ARRAY_SIZE state entry).

        There is an unpleasant asymmetry with Color3() - one assumes A =
        1.0, the other assumes A = 0.0 - but this appears unavoidable given
        the 1.2 color sum specification language. Alternatively, the color
        sum language could be rewritten to not sum secondary A.

  * What about multiple "color iterators" for use with aggrandized
    multitexture implementations?

        We may need this eventually, but the secondary color is well defined
        and a more generic interface doesn't seem justified now.

  * Interleaved array formats?

        No. The multiplicative explosion of formats is too great.

  * Do we want to be able to query the secondary color value? How does it
    interact with lighting?

        The secondary color is not part of the GL state in the
        separate_specular_color extension that went into OpenGL 1.2. There,
        it can't be queried or obtained via feedback.

        The secondary_color extension is slightly more general-purpose, so
        the secondary color is explicitly in the GL state and can be queried
        - but it's still somewhat limited and can't be obtained via
        feedback, for example.

New Procedures and Functions

    void SecondaryColor3[bsifd ubusui]EXT(T components)
    void SecondaryColor3[bsifd ubusui]vEXT(T components)
    void SecondaryColorPointerEXT(int size, enum type, sizei stride,
                                  void *pointer)

New Tokens


        COLOR_SUM_EXT                       0x8458


        CURRENT_SECONDARY_COLOR_EXT         0x8459
        SECONDARY_COLOR_ARRAY_SIZE_EXT      0x845A
        SECONDARY_COLOR_ARRAY_TYPE_EXT      0x845B
        SECONDARY_COLOR_ARRAY_STRIDE_EXT    0x845C


        SECONDARY_COLOR_ARRAY_POINTER_EXT   0x845D


        SECONDARY_COLOR_ARRAY_EXT           0x845E

