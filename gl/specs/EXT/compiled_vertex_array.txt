Name

    EXT_compiled_vertex_array

Name Strings

    GL_EXT_compiled_vertex_array

Version

    $Date: 1996/11/21 00:52:19 $ $Revision: 1.3 $

Number

    97

Dependencies

    None

Overview

    This extension defines an interface which allows static vertex array
    data to be cached or pre-compiled for more efficient rendering.  This
    is useful for implementations which can cache the transformed results
    of array data for reuse by several DrawArrays, ArrayElement, or
    DrawElements commands.  It is also useful for implementations which
    can transfer array data to fast memory for more efficient processing.

    For example, rendering an M by N mesh of quadrilaterals can be
    accomplished by setting up vertex arrays containing all of the
    vertexes in the mesh and issuing M DrawElements commands each of
    which operate on 2 * N vertexes.  Each DrawElements command after
    the first will share N vertexes with the preceding DrawElements
    command.  If the vertex array data is locked while the DrawElements
    commands are executed, then OpenGL may be able to transform each
    of these shared vertexes just once.

Issues

    * Is compiled_vertex_array the right name for this extension?

    * Should there be an implementation defined maximum number of array
      elements which can be locked at a time (i.e. MAX_LOCKED_ARRAY_SIZE)?

      Probably not, the lock request can always be ignored with no resulting
      change in functionality if there are insufficent resources, and allowing
      the GL to define this limit can make things difficult for applications.
    
    * Should there be any restrictions on what state can be changed while
      the vertex array data is locked?

      Probably not.  The GL can check for state changes and invalidate
      any cached vertex state that may be affected.  This is likely to
      cause a performance hit, so the preferred use will be to not change
      state while the vertex array data is locked.
    
New Procedures and Functions

    void LockArraysEXT (int first, sizei count)
    void UnlockArraysEXT (void)

New Tokens


        ARRAY_ELEMENT_LOCK_FIRST_EXT        0x81A8
        ARRAY_ELEMENT_LOCK_COUNT_EXT        0x81A9

