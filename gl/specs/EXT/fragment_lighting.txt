Name

    EXT_fragment_lighting

Name Strings

    GL_EXT_fragment_lighting

Version

    $Date: 1998/09/26 02:49:31 $ $Revision: 1.26 $

Number

    102

Dependencies

    OpenGL 1.1 is required.
    SGIX_color_range affects the definition of this extension.

Overview

    This extension adds a new lighting stage to the OpenGL pipeline.  This
    stage occurs during fragment processing after the texture environment
    has been applied and before fog has been applied.  The extension
    provides a mechanism for computing 'per-pixel lighting'.  Fragment lighting
    applies to fragments generated by all primitives including pixel images.
    This extension doesn't eliminate vertex lighting, but can be used to
    complement it.  For example, the diffuse contribution can be evaluated
    at each vertex, and the specular contribution can be evaluated at each
    fragment with the results being summed together to generate the final
    result.
                  Ct  Cf
                  |   |-------------------------------+
                  |   |                               |
                ----------                            |
                |        |                            |
                | TexEnv |                            |
                |        |                            |
                ----------                            |
                    |                                 |
                ----------                            |
                | Clamp  |            Nf  Lf  Hf  Ff  |
                ----------            |   |   |   |   | FragmentColorMaterial
                    |              -----------------  |
                    |              |               |  v
                    Cf'            | FragmentLight |<-o-<- Material {Am,Em,Dm,Sm,Nm,...}
                    |              |               |          
                    |              -----------------
                    |                      |
                    |                  ---------
                    |                  | Clamp |
                    |                  ---------
                    |       Cl             |
                    |      +----------------
                    v      v 
                  ------------
                  |          |
                  | LightEnv |
                  |          |
                  ------------
                       |
                   ---------
                   | Clamp |
                   ---------
                       |
                       Cf''
                       |
                       v
                    -------
                    |     |
                    | Fog |
                    |     |
                    -------
                       |
                       v

Patent Note

    To the extent that SGI has patent rights that are unavoidably
    infringed by all implementations of this extension, SGI will, upon
    request, grant a license under such patent rights to the requesting
    party subject to reasonable terms and conditions, and without
    incremental charge or fee. Such license shall be non-exclusive, and
    non-transferable, and shall be limited to implementations of the
    extension in combination with any conformance certified
    implementation of the OpenGL API. Such license is expressly
    contingent upon a grant back of a non-exclusive, royalty-free,
    perpetual, worldwide license to SGI and its OpenGL licensees under
    the requesting party's patent rights that are unavoidably infringed
    by all implementations of this extension or OpenGL.

Issues

    *   We specify a complete model and don't allow subsetting.  if
        portions of the model aren't supported with hardware acceleration
        then a software implementation of the complete model is
        necessary.  There should be sufficient mechanism for an
        implementation to include partial acceleration and easily
        identify when it can be used.  The alternative is to
        allow subsetting and a mechanisms for enumerating the capability
        would this be any better?

        I don't think so.  Lighting will be an important area of
        growth for OpenGL.  I think we owe it to our developers
        to force a consistent growth direction by trying to look
        ahead a little.
    
    *   We apply texture environment before lighting so that decals
        can be lighted correctly.  The spec does not provide a
        mechanism for applying texture after lighting.  There are
        applications where it would be useful to apply texture after
        lighting (e.g. shadows or spotlight effects), but we deliberately
        leave them out.  Instead we will add binding posts in another
        extension to allow textures to be bound to the attenuation
        term, specular exponent, environment term, normal perturbation,
        etc.
    
    *   Should the FragmentColorMaterial command really be done through
        texture binding posts and TexEnv moved after lighting?

        No. 
    
    *   New LightModel parameters?
        yes, NORMAL_INTERPOLATION control
    
    *   We deliberately chose to decouple the control of normal interpolation
        for fragment lighting from ShadeModel, choosing to put it in the
        FragmentLightModel command.  We chose not to provide any mechanism to
        allow flat coloring before vertex lighting, so FlatShading continues
        to mean that the vertex color after vertex lighting is used to
        provide a constant color across the face of a primitive.

    *   Material parameters are not interpolated.  If FragmentMaterial is
        enabled then the interpolated color parameter will be used as one or
        more of the material parameters, but there is no equivalent notion
        to per-vertex materials.  If a material change occurs between a
        Begin/End sequence, then only the last material specified before the
        provoking vertex will affect the shading computation.
    
    *   overload ColorMaterial & Material face param with FRAGMENT_FRONT,
        FRAGMENT_BACK, and FRAGMENT_FRONT_AND_BACK rather than separate commands?

        since the behaviour is somewhat different (not persistent) so it feels
        like it should be a different command

    *   proxy mechanism for subsetting?  proxy mechanism for determining
        what is supported in hardware.  NO.

    *   add some comments about where lighting parameters are sampled
        (fragment centers, pixel centers, ...)

    *   shadow term is not quite right.  removed it.

    *   should the material be undefined after color material is disabled

        it should be well defined.  fragment color material should be
        thought of as a switch which causes the material parameters to be
        sourced from the fragment material 'register' or from the fragment
        color.  At all times queries to the fragment material refer to the
        material 'register' and whenever fragment color material is
        disabled, material parameters are sourced from the unperturbed
        fragment material 'register'

    *   disallow fragment material changes between begin/end?
        seems okay, since we added a new command! - DONE

    *   add a total number of lights so that implementations can
        share state between vertex and fragment lights yet be more flexible
        about whether the state is used for a vertex or fragment light
        (vimal).

        Yes.  MAX_ACTIVE_LIGHTS_EXT
    
    *   is the flatshading definition correct?  unlike flatshading for
        vertex lighting, the color will not be constant, just the normal
        so N.L will vary across the face.  Yes, it is what we want.
        There is now a mechanism which allows flat or smooth color with
        flat or smooth fragment lighting (flat or smooth normals).
    
    *   treatment of alpha?

        alpha comes from the diffuse material if fragment lighting
        is enabled.
    
    *   the state of FrontFace affects the interpretation of two-sided
        lighting.  Should there be separate state for vertex and fragment
        lighting?

        No.  its a property of the geometry and shouldn't different for the
        two light source types.

New Procedures and Functions

    void FragmentLightModeliEXT(enum pname, int param);
    void FragmentLightModelfEXT(enum pname, float param);
    void FragmentLightModelivEXT(enum pname, int *params);
    void FragmentLightModelfvEXT(enum pname, float *params);

    void FragmentLightiEXT(enum light, enum pname, int param);
    void FragmentLightfEXT(enum light, enum pname, float param);
    void FragmentLightivEXT(enum light, enum pname, int *params);
    void FragmentLightfvEXT(enum light, enum pname, float *params);

    void GetFragmentLightivEXT(enum light, enum pname, int *params);
    void GetFragmentLightfvEXT(enum light, enum pname, float *params);

    void FragmentMaterialfEXT(enum face, enum pname, const float param);
    void FragmentMaterialiEXT(enum face, enum pname, const int param);
    void FragmentMaterialfvEXT(enum face, enum pname, const float *params);
    void FragmentMaterialivEXT(enum face, enum pname, const int *params);

    void FragmentColorMaterialEXT(enum face, enum mode);

    void GetFragmentMaterialfvEXT(enum face, enum pname, const float *params);
    void GetFragmentMaterialivEXT(enum face, enum pname, const int *params);

    void LightEnviEXT(enum pname, int param);


New Tokens


    FRAGMENT_LIGHTING_EXT                               0x8400
    FRAGMENT_COLOR_MATERIAL_EXT                         0x8401


    FRAGMENT_COLOR_MATERIAL_FACE_EXT                    0x8402
    FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT               0x8403
    MAX_FRAGMENT_LIGHTS_EXT                             0x8404
    MAX_ACTIVE_LIGHTS_EXT                               0x8405
    CURRENT_RASTER_NORMAL_EXT                           0x8406



    LIGHT_ENV_MODE_EXT                                  0x8407


    FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT               0x8408
    FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT                   0x8409
    FRAGMENT_LIGHT_MODEL_AMBIENT_EXT                    0x840A
    FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT       0x840B


    FRAGMENT_LIGHT0_EXT                                 0x840C
    FRAGMENT_LIGHT7_EXT                                 0x8413

