Name

    EXT_timer_query

Name Strings

    GL_EXT_timer_query

Contact

    James Jones, NVIDIA Corporation (jajones 'at' nvidia.com)

Contributors

    Axel Mamode, Sony
    Brian Paul, Tungsten Graphics
    Pat Brown, NVIDIA
    Remi Arnaud, Sony

Status

    Shipping (version 1.0)

    Supported by NVIDIA Release 80 drivers.

Version

    Last Modified Date:         2013/06/25
    Revision:                   3

Number

    319

Dependencies

    Written based on the wording of the OpenGL 2.0 specification.  

    OpenGL 1.5 is required.

    This extension modifies ARB_occlusion_query and NV_occlusion_query.

Overview

    Applications can benefit from accurate timing information in a number of
    different ways.  During application development, timing information can
    help identify application or driver bottlenecks.  At run time,
    applications can use timing information to dynamically adjust the amount
    of detail in a scene to achieve constant frame rates.  OpenGL
    implementations have historically provided little to no useful timing
    information.  Applications can get some idea of timing by reading timers
    on the CPU, but these timers are not synchronized with the graphics
    rendering pipeline.  Reading a CPU timer does not guarantee the completion
    of a potentially large amount of graphics work accumulated before the
    timer is read, and will thus produce wildly inaccurate results.
    glFinish() can be used to determine when previous rendering commands have
    been completed, but will idle the graphics pipeline and adversely affect
    application performance.

    This extension provides a query mechanism that can be used to determine
    the amount of time it takes to fully complete a set of GL commands, and
    without stalling the rendering pipeline.  It uses the query object
    mechanisms first introduced in the occlusion query extension, which allow
    time intervals to be polled asynchronously by the application.

Issues

    What time interval is being measured?

      RESOLVED:  The timer starts when all commands prior to BeginQuery() have
      been fully executed.  At that point, everything that should be drawn by
      those commands has been written to the framebuffer.  The timer stops
      when all commands prior to EndQuery() have been fully executed.

    What unit of time will time intervals be returned in?

      RESOLVED:  Nanoseconds (10^-9 seconds).  This unit of measurement allows
      for reasonably accurate timing of even small blocks of rendering
      commands.  The granularity of the timer is implementation-dependent.  A
      32-bit query counter can express intervals of up to approximately 4
      seconds.

    What should be the minimum number of counter bits for timer queries?

      RESOLVED:  30 bits, which will allow timing sections that take up to 1
      second to render.

    How are counter results of more than 32 bits returned?

      RESOLVED: Using the int64 and uint64 datatypes (introduced in OpenGL
      3.2 and used by this extension as well), and corresponding
      GetQueryObject entry points. These types hold integer values and have
      a minimum bit width of 64.

    Should the extension measure total time elapsed between the full
    completion of the BeginQuery and EndQuery commands, or just time spent in
    the graphics library?
   
      RESOLVED:  This extension will measure the total time elapsed between
      the full completion of these commands.  Future extensions may implement
      a query to determine time elapsed at different stages of the graphics
      pipeline.

    This extension introduces a second query type supported by
    BeginQuery/EndQuery.  Can multiple query types be active simultaneously?

      RESOLVED:  Yes; an application may perform an occlusion query and a
      timer query simultaneously.  An application can not perform multiple
      occlusion queries or multiple timer queries simultaneously.  An
      application also can not use the same query object for an occlusion
      query and a timer query simultaneously.

    Do query objects have a query type permanently associated with them?

      RESOLVED:  No.  A single query object can be used to perform different
      types of queries, but not at the same time.

      Having a fixed type for each query object simplifies some aspects of the
      implementation -- not having to deal with queries with different result
      sizes, for example.  It would also mean that BeginQuery() with a query
      object of the "wrong" type would result in an INVALID_OPERATION error.

    How predictable/repeatable are the results returned by the timer query?

      RESOLVED:  In general, the amount of time needed to render the same
      primitives should be fairly constant.  But there may be many other
      system issues (e.g., context switching on the CPU and GPU, virtual
      memory page faults, memory cache behavior on the CPU and GPU) that can
      cause times to vary wildly.

      Note that modern GPUs are generally highly pipelined, and may be
      processing different primitives in different pipeline stages
      simultaneously.  In this extension, the timers start and stop when the
      BeginQuery/EndQuery commands reach the bottom of the rendering pipeline.
      What that means is that by the time the timer starts, the GL driver on
      the CPU may have started work on GL commands issued after BeginQuery,
      and the higher pipeline stages (e.g., vertex transformation) may have
      started as well.

   What should the new 64 bit integer type be called?
   
      RESOLVED: The new types will be called GLint64/GLuint64  The new
      command suffixes will be i64 and ui64.  These names clearly convey the
      minimum size of the types.  These types are similar to the C99 standard
      type int_least64_t, but we use names similar to the C99 optional type
      int64_t for simplicity.

      (note: previous versions of EXT_timer_query used GLint64EXT and and
      GLuint64EXT. These types were later promoted to core in OpenGL 3.2,
      and this extension was changed to use the core datatypes for
      compatibility with changes to the OpenGL ES EXT_disjoint_timer_query
      extension, which introduces the same query entry points, and would
      have otherwise have had different function signatures).

New Procedures and Functions

     void GetQueryObjecti64vEXT(uint id, enum pname, int64 *params);
     void GetQueryObjectui64vEXT(uint id, enum pname, uint64 *params);

New Tokens


        TIME_ELAPSED_EXT                               0x88BF

