Name

    EXT_pixel_format

Name Strings

    WGL_EXT_pixel_format

Version

    $Date: 1999/04/03 08:41:17 $ $Revision: 1.4 $

Number

    170

Dependencies

    WGL_EXT_extensions_string is required.

Overview

    This extension adds functions to query pixel format attributes
    and to choose from the list of pixel formats supported by a device.

    These functions treat pixel formats as opaque types: attributes
    are specified by name rather than by accessing them directly as
    fields in a structure.  Thus the list of attributes can be easily
    extended.
    
    Attribute names are defined which correspond to all of the values
    in the PIXELFORMATDESCRIPTOR and LAYERPLANEDESCRIPTOR data structures.
    Additionally this interface allows pixel formats to be supported
    which have attributes that cannot be represented using the standard
    pixel format functions, i.e. DescribePixelFormat, DescribeLayerPlane,
    ChoosePixelFormat, SetPixelFormat, and GetPixelFormat.

Issues

    1. No provision is made to support extended pixel format attributes in
       metafiles.
    2. The transparent value pixel format attribute doesn't have separate red,
       green and blue values. This is OK since this can be done as an
       additional extension.
    3. Should we add DONT_CARE values for some of the pixel format attributes?
       No we should just ignore attributes that aren't specified in the list
       passed to wglChoosePixelFormatEXT.
    4. Should wglGetPixelFormatAttrib*vEXT ignore the <iLayerPlane> parameter
       when the attribute specified only applies to the main planes (e.g.,
       when the attribute is set to WGL_NUMBER_OVERLAYS) or should it require
       <iLayerPlane> to be set to zero? It will just ignore the parameter.
    5. Should wglGetPixelFormatAttribivEXT convert floating point values to
       fixed point? No, wglChoosePixelFormatEXT needs a way to accept floating
       point values. pfAttribFList accomplishes this.
    6. Should wglChoosePixelFormatEXT take an <iLayerPlane> parameter? Typically
       <iLayerPlane> would be set to zero and a pixel format would be selected
       based on the attributes of the main plane, so there is no <iLayerPlane>
       parameter. This should be OK; applications won't typically select a
       pixel format on the basis of overlay attributes. They can always call
       wglGetPixelFormatAttrib*vEXT to get a pixel format that has the desired
       overlay values.
    7. Application programmers must check to see if a particular extension
       is supported before using any pixel format attributes associated with
       the extension. For example, if WGL_EXT_pbuffer is not supported then
       it is an error to specify WGL_DRAW_TO_PBUFFER_EXT in the attribute list
       to wglGetPixelFormatAttrib*vEXT or wglChoosePixelFormatEXT.

New Procedures and Functions

    BOOL wglGetPixelFormatAttribivEXT(HDC hdc,
                                      int iPixelFormat,
                                      int iLayerPlane,
                                      UINT nAttributes,
                                      int *piAttributes,
                                      int *piValues);

    BOOL wglGetPixelFormatAttribfvEXT(HDC hdc,
                                      int iPixelFormat,
                                      int iLayerPlane,
                                      UINT nAttributes,
                                      int *piAttributes,
                                      FLOAT *pfValues);

    BOOL wglChoosePixelFormatEXT(HDC hdc,
                                 const int *piAttribIList,
                                 const FLOAT *pfAttribFList,
                                 UINT nMaxFormats,
                                 int *piFormats,
                                 UINT *nNumFormats);

New Tokens


        WGL_NUMBER_PIXEL_FORMATS_EXT         0x2000


        WGL_DRAW_TO_WINDOW_EXT               0x2001
        WGL_DRAW_TO_BITMAP_EXT               0x2002
        WGL_ACCELERATION_EXT                 0x2003
        WGL_NEED_PALETTE_EXT                 0x2004
        WGL_NEED_SYSTEM_PALETTE_EXT          0x2005
        WGL_SWAP_LAYER_BUFFERS_EXT           0x2006
        WGL_SWAP_METHOD_EXT                  0x2007
        WGL_NUMBER_OVERLAYS_EXT              0x2008
        WGL_NUMBER_UNDERLAYS_EXT             0x2009
        WGL_TRANSPARENT_EXT                  0x200A
        WGL_TRANSPARENT_VALUE_EXT            0x200B
        WGL_SHARE_DEPTH_EXT                  0x200C
        WGL_SHARE_STENCIL_EXT                0x200D
        WGL_SHARE_ACCUM_EXT                  0x200E
        WGL_SUPPORT_GDI_EXT                  0x200F
        WGL_SUPPORT_OPENGL_EXT               0x2010
        WGL_DOUBLE_BUFFER_EXT                0x2011
        WGL_STEREO_EXT                       0x2012
        WGL_PIXEL_TYPE_EXT                   0x2013
        WGL_COLOR_BITS_EXT                   0x2014
        WGL_RED_BITS_EXT                     0x2015
        WGL_RED_SHIFT_EXT                    0x2016
        WGL_GREEN_BITS_EXT                   0x2017
        WGL_GREEN_SHIFT_EXT                  0x2018
        WGL_BLUE_BITS_EXT                    0x2019
        WGL_BLUE_SHIFT_EXT                   0x201A
        WGL_ALPHA_BITS_EXT                   0x201B
        WGL_ALPHA_SHIFT_EXT                  0x201C
        WGL_ACCUM_BITS_EXT                   0x201D
        WGL_ACCUM_RED_BITS_EXT               0x201E
        WGL_ACCUM_GREEN_BITS_EXT             0x201F
        WGL_ACCUM_BLUE_BITS_EXT              0x2020
        WGL_ACCUM_ALPHA_BITS_EXT             0x2021
        WGL_DEPTH_BITS_EXT                   0x2022
        WGL_STENCIL_BITS_EXT                 0x2023
        WGL_AUX_BUFFERS_EXT                  0x2024


        WGL_NO_ACCELERATION_EXT              0x2025
        WGL_GENERIC_ACCELERATION_EXT         0x2026
        WGL_FULL_ACCELERATION_EXT            0x2027

        WGL_SWAP_EXCHANGE_EXT                0x2028
        WGL_SWAP_COPY_EXT                    0x2029
        WGL_SWAP_UNDEFINED_EXT               0x202A

        WGL_TYPE_RGBA_EXT                    0x202B
        WGL_TYPE_COLORINDEX_EXT              0x202C

