Name

    EXT_texture_env

Name Strings

    GL_EXT_texture_env

Version

    $Date: 1998/05/12 23:52:26 $ $Revision: 1.5 $

Number

    146

Dependencies

    OpenGL 1.1 is required.
    OpenGL 1.2 affects the definition of this spec.
    EXT_multitexture affects the definition of this spec.
    This specification is written against the OpenGL 1.2 specification.

Overview

    A new texture environment is defined which supports the
    following equations:

                        Cv = Cf                 COPY
                        Cv = Ct                 REPLACE
                        Cv = Cf * Ct            MODULATE
                        Cv = Cf + Ct            ADD
                        Cv = Cf - Ct            SUBTRACT
                        Cv = Ct - Cf            REVERSE_SUBTRACT
                        Cv = aCf + (1-a)Ct      BLEND
                        Cv = aCt + (1-a)Cf      REVERSE_BLEND
        where a is the incoming fragment's alpha value

    These functions may be independently selected for color and alpha
    processing.  The BLEND function is not available for alpha processing.
    Additionally a scale factor of 2^0, 2^1, or 2^2 may be applied to the final
    result.

Issues

  * The functions are added as a `suite' in a new texture environment.  An
    alternative would be to retrofit them into the existing texture
    environment.  There would likely be a clash with SGIX_texture_add_env
    and with the DECAL/BLEND environment which are similar yet different
    from the new BLEND function.  Also the separate specification of
    the alpha texture function seems awkward, and we specified a new 
    behavior for the new texture environment when texturing is disabled.

  * I chose the name EXT_texture_env as it really is an extension to
    texture environment to add a new environment.  Should it have some
    other name, e.g., EXT_texture_env1?

  * A new enable is defined for TEXTURE_ENV1_EXT which causes it to
    be activated over TEXTURE_ENV.  No enable is defined for TEXTURE_ENV
    as it is considered to be enabled always.  The OpenGL spec uses
    the term 'currently bound environment' should we be doing something
    that looks more bind like or changing the language to something like
    currently selected/enabled environment?

  * There is no constant color term in TEXTURE_ENV1_EXT.  The functionality
    is still available in TEXTURE_ENV and I'm not sure there is a compelling
    reason to integrate the constant term here.

  * The BLEND function is fairly restrictive.  Should it be more general?
    e.g. reverse the blending factor?

    Resolved: YES.  add REVERSE_BLEND.

  * The rules for alpha-only and alpha-less textures are very regular
    the color components of an alpha-only texture are substituted with zero
    and the alpha component of an alpha-less texture is substituted with one.
    Are these the right rules?

  * If texturing is disabled, environment computations are still
    performed in this new texture environment, whereas they are not in the
    old environment (to preserve compatibility).  This sets the stage for
    texture environments performing functions which do not involve a
    texture though perhaps it is a little awkward.

  * Enumerants are screwy.  Should we add new _EXT enumerants for
    COPY, REPLACE, ADD, MODULATE, BLEND, as was done for the original
    texture extension or reuse these existing tokens and just add
    SUBTRACT, REVERSE_SUBTRACT, and REVERSE_BLEND?

    I chose to add new enumerants which are prefixed with ENV_. The
    main reason is to allow them to have contiguous values and leave
    some room for expansion to ensure that they can be switched
    with minimal parameter validation cost.

  * Should a scale & bias be defined as part of this extension or
    as a separate add-on to the environment processing?

  * Possible add-on extensions (in the context of multitexture):

        1) source and blend factor specification for the BLEND/REVERSE_BLEND
           functions by generalizing BLEND/REVERSE_BLEND to 
                x*Cf + y*Ct   /    x*Ct + y*Cf
           and allow x to be specified by TEXTURE_ENV_SRC_FACTOR and
           y by TEXTURE_ENV_DST_FACTOR with possible src and dst factors
           ONE
           ZERO
           FRAGMENT_ALPHA    alpha from previous environment stage
           TEXTURE_ALPHA     alpha from texture
           PRETEXTURE_ALPHA  original pre-texture alpha value
           FRAGMENT_ALPHA_MINUS_ONE
           TEXTURE_ALPHA_MINUS_ONE
           PRETEXTURE_ALPHA_MINUS_ONE
        
        2) Add some muxing to the inputs of the equations.
           The basic equation set is
                Cf            (copy)
                Cf*Ct         (modulate)
                Cf+Ct         (add/sub/rsub)
                a*Cf+(1-a)*Ct (blend/rblend)
            
            so allow a more flexible binding on Cf & Ct
            TEXTURE_ENV_SRC  (default is FRAGMENT)
            TEXTURE_ENV_DST  (default is TEXTURE)
                choices:
                    FRAGMENT
                    TEXTURE
                    PRETEXTURE

         3) extension 2) gives a good chunk of the functionality of 1)
            perhaps we could avoid 1) altogether or change 1) to allow
            a more restrictive selection of the blend factor (simultaneously
            choosing both a and (1-a):

            TEXTURE_ENV_BLEND_FACTOR
                choices:
                    FRAGMENT
                    TEXTURE
                    PRETEXTURE


New Procedures and Functions

    None

New Tokens












