Name
 
    EXT_direct_state_access

Name Strings

    GL_EXT_direct_state_access

Contributors

    Cass Everitt, NVIDIA
    Daniel Pageau, Blizzard
    Daniel Koch, TransGaming
    Ian Romanick, IBM
    Jason Green, TransGaming
    Johan Andersson, DICE/Electronic Arts
    Jon Leech
    Mark Kilgard, NVIDIA
    Nicholas Vining, Destineer
    Pat Brown, NVIDIA
    Patrick Doane, Blizzard
    Robert Barris, Blizzard
    Ryan Gordon, Destineer
    Scott Nations, NVIDIA
    Yanjun Zhang, S3 Graphics
    Jeff Bolz, NVIDIA
    Jeff Juliano, NVIDIA
    Jon Burgess, NVIDIA
    Mike Marcin
    Nigel Stewart, NVIDIA
    Jason McKesson
    Graham Sellers, AMD
    Vladimir Vukicevic, Mozilla

Contact

    Mark J. Kilgard, NVIDIA Corporation (mjk 'at' nvidia.com)

Status

    Complete, except for GLX protocol

    Version 1.0 implemented by NVIDIA, shipping November 2008
    Version 1.1 implemented by NVIDIA, shipping January 2009

Version

    Last Modified Date:         02/24/2014
    Author revision:            39
    Version                     1.2

    (version 1.0 lacked OpenGL 3.0 support)
    (version 1.1 lacked GL_TEXTUREi support for glVertexArrayTexCoordOffsetEXT)
    (version 1.1 didn't clearly specify GL_TEXTURE_COORD_ARRAY works with glGetVertexArrayIntegeri_vEXT)

Number

    353

Dependencies

    This extension is written against the OpenGL 2.1 specification.

    This extension interacts with the matrix manipulation commands
    introduced by OpenGL 1.0.

    This extension interacts with the texture object manipulation commands
    introduced by EXT_texture_object and standardized by OpenGL 1.1.

    This extension interacts with the 3D texture object manipulation
    commands introduced by EXT_texture3D and standardized by OpenGL 1.2.

    This extension interacts with the multitexture command introduced
    by ARB_multitexture and standardized by OpenGL 1.2.1.

    This extension interacts with the matrix transpose manipulation
    commands introduced by ARB_transpose_matrix and standardized by
    OpenGL 1.3.

    This extension interacts with the local parameter program object
    manipulation commands introduced by ARB_vertex_program.

    This extension interacts with the texture rectangle enable and target
    binding introduced by ARB_texture_rectangle (and NV_texture_rectangle
    and EXT_texture_rectangle).

    This extension interacts with the buffer manipulation commands
    standardized by OpenGL 1.5.

    This extension interacts with the GLSL uniform commands standardized
    by OpenGL 2.0.

    This extension interacts with the GLSL uniform matrix commands
    standardized by OpenGL 2.1.

    This extension interacts with the framebuffer object commands
    introduced by EXT_framebuffer_object and standardized by OpenGL 3.0.

    This extension interacts with the framebuffer blit commands introduced
    by EXT_framebuffer_blit and standardized by OpenGL 3.0.

    This extension interacts with the framebuffer multisample commands
    introduced by EXT_framebuffer_multisample and standardized by
    OpenGL 3.0.

    This extension interacts with the vertex array object commands
    introduced by APPLE_vertex_array_object and standardized by
    OpenGL 3.0.

    This extension interacts with the integer texture parameter commands
    introduced by EXT_texture_integer and standardized by OpenGL 3.0.

    This extension interacts with the texture buffer commands introduced
    by EXT_texture_buffer_object.

    This extension interacts with the GLSL integer uniform commands
    introduced by EXT_gpu_shader4.

    This extension interacts with the local plural parameter program
    object manipulation commands introduced by EXT_gpu_program_parameters.

    This extension interacts with the local integer parameter program
    object manipulation commands introduced by NV_gpu_program4.

    This extension trivially interacts with the EnableIndexedEXT
    and DisableIndexed commands and the integer and boolean indexed
    queries introduced by EXT_draw_buffers2, EXT_transform_feedback,
    and NV_transform_feedback.

    This extension interacts with NV_explicit_multisample.

    This extension trivially interacts with EXT_texture_array.

    This extension trivially interacts with NV_texture_cube_map_array.

    This extension interacts with the buffer data copying command
    introduced by  EXT_copy_buffer and standardized by OpenGL 3.0.

Overview

    This extension introduces a set of new "direct state access"
    commands (meaning no selector is involved) to access (update and
    query) OpenGL state that previously depended on the OpenGL state
    selectors for access.  These new commands supplement the existing
    selector-based OpenGL commands to access the same state.

    The intent of this extension is to make it more efficient for
    libraries to avoid disturbing selector and latched state.  The
    extension also allows more efficient command usage by eliminating
    the need for selector update commands.

    Two derivative advantages of this extension are 1) display lists
    can be executed using these commands that avoid disturbing selectors
    that subsequent commands may depend on, and 2) drivers implemented
    with a dual-thread partitioning with OpenGL command buffering from
    an application thread and then OpenGL command dispatching in a
    concurrent driver thread can avoid thread synchronization created by
    selector saving, setting, command execution, and selector restoration.

    This extension does not itself add any new OpenGL state.

    We call a state variable in OpenGL an "OpenGL state selector" or
    simply a "selector" if OpenGL commands depend on the state variable
    to determine what state to query or update.  The matrix mode and
    active texture are both selectors.  Object bindings for buffers,
    programs, textures, and framebuffer objects are also selectors.

    We call OpenGL state "latched" if the state is set by one OpenGL
    command but then that state is saved by a subsequent command or the
    state determines how client memory or buffer object memory is accessed
    by a subsequent command.  The array and element array buffer bindings
    are latched by vertex array specification commands to determine
    which buffer a given vertex array uses.  Vertex array state and pixel
    pack/unpack state decides how client memory or buffer object memory is
    accessed by subsequent vertex pulling or image specification commands.

    The existence of selectors and latched state in the OpenGL API
    reduces the number of parameters to various sets of OpenGL commands
    but complicates the access to state for layered libraries which seek
    to access state without disturbing other state, namely the state of
    state selectors and latched state.  In many cases, selectors and
    latched state were introduced by extensions as OpenGL evolved to
    minimize the disruption to the OpenGL API when new functionality,
    particularly the pluralization of existing functionality as when
    texture objects and later multiple texture units, was introduced.

    The OpenGL API involves several selectors (listed in historical
    order of introduction):

      o  The matrix mode.

      o  The current bound texture for each supported texture target.

      o  The active texture.

      o  The active client texture.

      o  The current bound program for each supported program target.

      o  The current bound buffer for each supported buffer target.

      o  The current GLSL program.

      o  The current framebuffer object.

    The new selector-free update commands can be compiled into display
    lists.

    The OpenGL API has latched state for vertex array buffer objects
    and pixel store state.  When an application issues a GL command to
    unpack or pack pixels (for example, glTexImage2D or glReadPixels
    respectively), the current unpack and pack pixel store state
    determines how the pixels are unpacked from/packed to client memory
    or pixel buffer objects.  For example, consider:

      glPixelStorei(GL_UNPACK_SWAP_BYTES, GL_TRUE);
      glPixelStorei(GL_UNPACK_ROW_LENGTH, 640);
      glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 47);
      glDrawPixels(100, 100, GL_RGB, GL_FLOAT, pixels);

    The unpack swap bytes and row length state set by the preceding
    glPixelStorei commands (as well as the 6 other unpack pixel store
    state variables) control how data is read (unpacked) from buffer of
    data pointed to by pixels.  The glBindBuffer command also specifies
    an unpack buffer object (47) so the pixel pointer is actually treated
    as a byte offset into buffer object 47.

    When an application issues a command to configure a vertex array,
    the current array buffer state is latched as the binding for the
    particular vertex array being specified.  For example, consider:

      glBindBuffer(GL_ARRAY_BUFFER, 23);
      glVertexPointer(3, GL_FLOAT, 12, pointer);

    The glBindBuffer command updates the array buffering binding
    (GL_ARRAY_BUFFER_BINDING) to the buffer object named 23.  The
    subsequent glVertexPointer command specifies explicit parameters
    for the size, type, stride, and pointer to access the position
    vertex array BUT ALSO latches the current array buffer binding for
    the vertex array buffer binding (GL_VERTEX_ARRAY_BUFFER_BINDING).
    Effectively the current array buffer binding buffer object becomes
    an implicit fifth parameter to glVertexPointer and this applies to
    all the gl*Pointer vertex array specification commands.

    Selectors and latched state create problems for layered libraries
    using OpenGL because selectors require the selector state to be
    modified to update some other state and latched state means implicit
    state can affect the operation of commands specifying, packing, or
    unpacking data through pointers/offsets.  For layered libraries,
    a state update performed by the library may attempt to save the
    selector state, set the selector, update/query some state the
    selector controls, and then restore the selector to its saved state.
    Layered libraries can skip the selector save/restore but this risks
    introducing uncertainty about the state of a selector after calling
    layered library routines.  Such selector side-effects are difficult
    to document and lead to compatibility issues as the layered library
    evolves or its usage varies.  For latched state, layered libraries
    may find commands such as glDrawPixels do not work as expected
    because latched pixel store state is not what the library expects.
    Querying or pushing the latched state, setting the latched state
    explicitly, performing the operation involving latched state, and
    then restoring or popping the latched state avoids entanglements
    with latched state but at considerable cost.

    EXAMPLE USAGE OF THIS EXTENSION'S FUNCTIONALITY

    Consider the following routine to set the modelview matrix involving
    the matrix mode selector:

      void setModelviewMatrix(const GLfloat matrix[16])
      {
        GLenum savedMatrixMode;

        glGetIntegerv(GL_MATRIX_MODE, &savedMatrixMode);
        glMatrixMode(GL_MODELVIEW);
        glLoadMatrixf(matrix);
        glMatrixMode(savedMatrixMode);
      }

    Notice that four OpenGL commands are required to update the current
    modelview matrix without disturbing the matrix mode selector.

    OpenGL query commands can also substantially reduce the performance
    of modern OpenGL implementations which may off-load OpenGL state
    processing to another CPU core/thread or to the GPU itself.

    An alternative to querying the selector is to use the
    glPushAttrib/glPopAttrib commands.  However this approach typically
    involves pushing far more state than simply the one or two selectors
    that need to be saved and restored.  Because so much state is
    associated with a given push/pop attribute bit, the glPushAttrib
    and glPopAttrib commands are considerably more costly than the
    save/restore approach.  Additionally glPushAttrib risks overflowing
    the attribute stack.

    The reliability and performance of layered libraries and applications
    can be improved by adding to the OpenGL API a new set of commands
    to access directly OpenGL state that otherwise involves selectors
    to access.

    The above example can be reimplemented more efficiently and without
    selector side-effects:

      void setModelviewMatrix(const GLfloat matrix[16])
      {
        glMatrixLoadfEXT(GL_MODELVIEW, matrix);
      }

    Consider a layered library seeking to load a texture:

      void loadTexture(GLint texobj, GLint width, GLint height,
                       void *data)
      {
        glBindTexture(GL_TEXTURE_2D, texobj);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB8,
                     width, height, GL_RGB, GL_FLOAT, data);
      }

    The library expects the data to be packed into the buffer pointed
    to by data.  But what if the current pixel unpack buffer binding
    is not zero so the current pixel unpack buffer, rather than client
    memory, will be read?  Or what if the application has modified
    the GL_UNPACK_ROW_LENGTH pixel store state before loadTexture
    is called?  

    We can fix the routine by calling glBindBuffer(GL_PIXEL_UNPACK_BUFFER,
    0) and setting all the pixel store unpack state to the initial state
    the loadTexture routine expects, but this is expensive.  It also risks
    disturbing the state so when loadTexture returns to the application,
    the application doesn't realize the current texture object (for
    whatever texture unit the current active texture happens to be) and
    pixel store state has changed.

    We can more efficiently implement this routine without disturbing
    selector or latched state as follows:

      void loadTexture(GLint texobj, GLint width, GLint height,
                       void *data)
      {
        glPushClientAttribDefaultEXT(GL_CLIENT_PIXEL_STORE_BIT);
        glTextureImage2D(texobj, GL_TEXTURE_2D, 0, GL_RGB8,
                         width, height, GL_RGB, GL_FLOAT, data);
        glPopClientAttrib();
      }

    Now loadTexture does not have to worry about inappropriately
    configured pixel store state or a non-zero pixel unpack buffer
    binding.  And loadTexture has no unintended side-effects for
    selector or latched state (assuming the client attrib state does
    not overflow).

New Procedures and Functions

    <OpenGL 1.1: New client commands>

        void ClientAttribDefaultEXT(bitfield mask);
        void PushClientAttribDefaultEXT(bitfield mask);

    <OpenGL 1.0: New matrix commands add "Matrix" prefix to name,
    drops "Matrix" suffix from name, and add initial "enum matrixMode"
    parameter>

        void MatrixLoadfEXT(enum matrixMode, const float *m);
        void MatrixLoaddEXT(enum matrixMode, const double *m);

        void MatrixMultfEXT(enum matrixMode, const float *m);
        void MatrixMultdEXT(enum matrixMode, const double *m);

        void MatrixLoadIdentityEXT(enum matrixMode);

        void MatrixRotatefEXT(enum matrixMode, float angle,
                              float x, float y, float z);
        void MatrixRotatedEXT(enum matrixMode, double angle,
                              double x, double y, double z);

        void MatrixScalefEXT(enum matrixMode,
                             float x, float y, float z);
        void MatrixScaledEXT(enum matrixMode,
                             double x, double y, double z);

        void MatrixTranslatefEXT(enum matrixMode,
                                 float x, float y, float z);
        void MatrixTranslatedEXT(enum matrixMode,
                                 double x, double y, double z);

        void MatrixOrthoEXT(enum matrixMode, double l, double r,
                            double b, double t, double n, double f);
        void MatrixFrustumEXT(enum matrixMode, double l, double r,
                              double b, double t, double n, double f);

        void MatrixPushEXT(enum matrixMode);
        void MatrixPopEXT(enum matrixMode);

    <OpenGL 1.1: New texture object commands and queries replace "Tex"
    in name with "Texture" and add initial "uint texture" parameter>

        void TextureParameteriEXT(uint texture, enum target,
                                  enum pname, int param);
        void TextureParameterivEXT(uint texture, enum target,
                                   enum pname, const int *param);

        void TextureParameterfEXT(uint texture, enum target,
                                  enum pname, float param);
        void TextureParameterfvEXT(uint texture, enum target,
                                   enum pname, const float *param);

        void TextureImage1DEXT(uint texture, enum target,
                               int level, int internalformat,
                               sizei width, int border,
                               enum format, enum type, const void *pixels);
        void TextureImage2DEXT(uint texture, enum target,
                               int level, int internalformat,
                               sizei width, sizei height, int border,
                               enum format, enum type, const void *pixels);

        void TextureSubImage1DEXT(uint texture, enum target,
                                  int level, int xoffset, sizei width,
                                  enum format, enum type,
                                  const void *pixels);
        void TextureSubImage2DEXT(uint texture, enum target,
                                  int level, int xoffset, int yoffset,
                                  sizei width, sizei height,
                                  enum format, enum type,
                                  const void *pixels);

        void CopyTextureImage1DEXT(uint texture, enum target,
                                   int level, enum internalformat,
                                   int x, int y, sizei width, int border);
        void CopyTextureImage2DEXT(uint texture, enum target,
                                   int level, enum internalformat,
                                   int x, int y,
                                   sizei width, sizei height, int border);

        void CopyTextureSubImage1DEXT(uint texture, enum target,
                                      int level, int xoffset,
                                      int x, int y, sizei width);
        void CopyTextureSubImage2DEXT(uint texture, enum target,
                                      int level, int xoffset, int yoffset,
                                      int x, int y,
                                      sizei width, sizei height);

        void GetTextureImageEXT(uint texture, enum target,
                                int level,
                                enum format, enum type, void *pixels);

        void GetTextureParameterfvEXT(uint texture, enum target,
                                      enum pname, float *params);
        void GetTextureParameterivEXT(uint texture, enum target,
                                      enum pname, int *params);

        void GetTextureLevelParameterfvEXT(uint texture, enum target,
                                           int level,
                                           enum pname, float *params);
        void GetTextureLevelParameterivEXT(uint texture, enum target,
                                           int level,
                                           enum pname, int *params);

    <OpenGL 1.2: New 3D texture object commands replace "Tex" in name with
    "Texture" and adds initial "uint texture" parameter>

        void TextureImage3DEXT(uint texture, enum target,
                               int level, int internalformat,
                               sizei width, sizei height, sizei depth,
                               int border,
                               enum format, enum type, const void *pixels);

        void TextureSubImage3DEXT(uint texture, enum target,
                                  int level,
                                  int xoffset, int yoffset, int zoffset,
                                  sizei width, sizei height, sizei depth,
                                  enum format, enum type,
                                  const void *pixels);
        void CopyTextureSubImage3DEXT(uint texture, enum target,
                                      int level,
                                      int xoffset, int yoffset, int zoffset,
                                      int x, int y,
                                      sizei width, sizei height);

    <OpenGL 1.2.1: New multitexture commands and queries prefix "Multi"
    before "Tex" and add an initial "enum texunit" parameter (to identify
    the texture unit).>

        void BindMultiTextureEXT(enum texunit, enum target, uint texture);

        void MultiTexCoordPointerEXT(enum texunit, int size, enum type,
                                     sizei stride, const void *pointer);

        void MultiTexEnvfEXT(enum texunit, enum target, enum pname,
                             float param);
        void MultiTexEnvfvEXT(enum texunit, enum target, enum pname,
                              const float *params);
        void MultiTexEnviEXT(enum texunit, enum target, enum pname,
                             int param);
        void MultiTexEnvivEXT(enum texunit, enum target, enum pname,
                              const int *params);

        void MultiTexGendEXT(enum texunit, enum coord, enum pname,
                             double param);
        void MultiTexGendvEXT(enum texunit, enum coord, enum pname,
                              const double *params);
        void MultiTexGenfEXT(enum texunit, enum coord, enum pname,
                             float param);
        void MultiTexGenfvEXT(enum texunit, enum coord, enum pname,
                              const float *params);
        void MultiTexGeniEXT(enum texunit, enum coord, enum pname,
                             int param);
        void MultiTexGenivEXT(enum texunit, enum coord, enum pname,
                              const int *params);

        void GetMultiTexEnvfvEXT(enum texunit, enum target, enum pname,
                                 float *params);
        void GetMultiTexEnvivEXT(enum texunit, enum target, enum pname,
                                 int *params);

        void GetMultiTexGendvEXT(enum texunit, enum coord, enum pname,
                                 double *params);
        void GetMultiTexGenfvEXT(enum texunit, enum coord, enum pname,
                                 float *params);
        void GetMultiTexGenivEXT(enum texunit, enum coord, enum pname,
                                 int *params);

        void MultiTexParameteriEXT(enum texunit, enum target,
                                   enum pname, int param);
        void MultiTexParameterivEXT(enum texunit, enum target,
                                    enum pname, const int *param);

        void MultiTexParameterfEXT(enum texunit, enum target,
                                   enum pname, float param);
        void MultiTexParameterfvEXT(enum texunit, enum target,
                                    enum pname, const float *param);

        void MultiTexImage1DEXT(enum texunit, enum target,
                                int level, int internalformat,
                                sizei width, int border,
                                enum format, enum type, const void *pixels);
        void MultiTexImage2DEXT(enum texunit, enum target,
                                int level, int internalformat,
                                sizei width, sizei height, int border,
                                enum format, enum type, const void *pixels);

        void MultiTexSubImage1DEXT(enum texunit, enum target,
                                   int level, int xoffset, sizei width,
                                   enum format, enum type,
                                   const void *pixels);
        void MultiTexSubImage2DEXT(enum texunit, enum target,
                                   int level, int xoffset, int yoffset,
                                   sizei width, sizei height,
                                   enum format, enum type,
                                   const void *pixels);

        void CopyMultiTexImage1DEXT(enum texunit, enum target,
                                    int level, enum internalformat,
                                    int x, int y, sizei width, int border);
        void CopyMultiTexImage2DEXT(enum texunit, enum target,
                                    int level, enum internalformat,
                                    int x, int y,
                                    sizei width, sizei height, int border);

        void CopyMultiTexSubImage1DEXT(enum texunit, enum target,
                                       int level, int xoffset,
                                       int x, int y, sizei width);
        void CopyMultiTexSubImage2DEXT(enum texunit, enum target,
                                       int level, int xoffset, int yoffset,
                                       int x, int y,
                                       sizei width, sizei height);

        void GetMultiTexImageEXT(enum texunit, enum target,
                                 int level,
                                 enum format, enum type, void *pixels);

        void GetMultiTexParameterfvEXT(enum texunit, enum target,
                                       enum pname, float *params);
        void GetMultiTexParameterivEXT(enum texunit, enum target,
                                       enum pname, int *params);

        void GetMultiTexLevelParameterfvEXT(enum texunit, enum target,
                                            int level,
                                            enum pname, float *params);
        void GetMultiTexLevelParameterivEXT(enum texunit, enum target,
                                            int level,
                                            enum pname, int *params);

        void MultiTexImage3DEXT(enum texunit, enum target,
                                int level, int internalformat,
                                sizei width, sizei height, sizei depth,
                                int border,
                                enum format, enum type, const void *pixels);

        void MultiTexSubImage3DEXT(enum texunit, enum target,
                                   int level,
                                   int xoffset, int yoffset, int zoffset,
                                   sizei width, sizei height, sizei depth,
                                   enum format, enum type,
                                   const void *pixels);
        void CopyMultiTexSubImage3DEXT(enum texunit, enum target,
                                       int level,
                                       int xoffset, int yoffset, int zoffset,
                                       int x, int y,
                                       sizei width, sizei height);

    <OpenGL 1.2.1: New indexed texture commands and queries append
    "Indexed" to name and add "uint index" parameter (to identify the
    texture unit index) after state name parameters (if any) and before
    state value parameters>

        void EnableClientStateIndexedEXT(enum array, uint index);
        void DisableClientStateIndexedEXT(enum array, uint index);

    <OpenGL 3.0: New indexed texture commands and queries append "i"
    to name and add "uint index" parameter (to identify the texture
    unit index) after state name parameters (if any) and before state
    value parameters>

        void EnableClientStateiEXT(enum array, uint index);
        void DisableClientStateiEXT(enum array, uint index);

    <OpenGL 1.2.1: New indexed generic queries (added for indexed texture
    state) append "Indexed" to name and add "uint index" parameter
    (to identify the texture unit) after state name parameters (if any) and
    before state value parameters>

        void GetFloatIndexedvEXT(enum target, uint index, float *params);
        void GetDoubleIndexedvEXT(enum target, uint index, double *params);

        void GetPointerIndexedvEXT(enum target, uint index, void **params);

    <OpenGL 3.0: New indexed generic queries (added for indexed texture
    state) replace "v" for "i_v" to name and add "uint index" parameter
    (to identify the texture unit) after state name parameters (if any)
    and before state value parameters>

        void GetFloati_vEXT(enum pname, uint index, float *params);
        void GetDoublei_vEXT(enum pname, uint index, double *params);

        void GetPointeri_vEXT(enum pname, uint index, void **params);

    <OpenGL 1.2.1:  Extend the functionality of these EXT_draw_buffers2
    commands and queries for multitexture>

        void EnableIndexedEXT(enum cap, uint index);
        void DisableIndexedEXT(enum cap, uint index);

        boolean IsEnabledIndexedEXT(enum target, uint index);

        void GetIntegerIndexedvEXT(enum target, uint index, int *params);
        void GetBooleanIndexedvEXT(enum target, uint index,
                                   boolean *params);

    <ARB_vertex_program: New program commands and queries add "Named"
    prefix to name and adds initial "uint program" parameter>

        void NamedProgramStringEXT(uint program, enum target, enum format,
                                   sizei len, const void *string); 

        void NamedProgramLocalParameter4dEXT(uint program, enum target,
                                             uint index,
                                             double x, double y,
                                             double z, double w);
        void NamedProgramLocalParameter4dvEXT(uint program, enum target,
                                              uint index,
                                              const double *params);
        void NamedProgramLocalParameter4fEXT(uint program, enum target,
                                             uint index,
                                             float x, float y,
                                             float z, float w);
        void NamedProgramLocalParameter4fvEXT(uint program, enum target,
                                              uint index,
                                              const float *params);

        void GetNamedProgramLocalParameterdvEXT(uint program, enum target,
                                                uint index,
                                                double *params);
        void GetNamedProgramLocalParameterfvEXT(uint program, enum target,
                                                uint index,
                                                float *params);
        void GetNamedProgramivEXT(uint program, enum target,
                                  enum pname, int *params);
        void GetNamedProgramStringEXT(uint program, enum target,
                                      enum pname, void *string);

    <OpenGL 1.3: New compressed texture object commands replace "Tex"
    in name with "Texture" and add initial "uint texture" parameter>

        void CompressedTextureImage3DEXT(uint texture, enum target, int level,
                                         enum internalformat,
                                         sizei width, sizei height,
                                         sizei depth, int border,
                                         sizei imageSize, const void *data);
        void CompressedTextureImage2DEXT(uint texture, enum target, int level,
                                         enum internalformat,
                                         sizei width, sizei height,
                                         int border, sizei imageSize,
                                         const void *data);
        void CompressedTextureImage1DEXT(uint texture, enum target, int level,
                                         enum internalformat,
                                         sizei width, int border,
                                         sizei imageSize, const void *data);
        void CompressedTextureSubImage3DEXT(uint texture, enum target, int level,
                                            int xoffset, int yoffset,
                                            int zoffset,
                                            sizei width, sizei height,
                                            sizei depth, enum format,
                                            sizei imageSize, const void *data);
        void CompressedTextureSubImage2DEXT(uint texture, enum target, int level,
                                            int xoffset, int yoffset,
                                            sizei width, sizei height,
                                            enum format,
                                            sizei imageSize, const void *data);
        void CompressedTextureSubImage1DEXT(uint texture, enum target, int level,
                                            int xoffset, sizei width,
                                            enum format,
                                            sizei imageSize, const void *data);

        void GetCompressedTextureImageEXT(uint texture, enum target,
                                          int level, void *img);

    <OpenGL 1.3: New multitexture compressed texture commands and queries
    prefix "Multi" before "Tex" and add an initial "enum texunit"
    parameter (to identify the texture unit).>

        void CompressedMultiTexImage3DEXT(enum texunit, enum target, int level,
                                          enum internalformat,
                                          sizei width, sizei height,
                                          sizei depth, int border,
                                          sizei imageSize, const void *data);
        void CompressedMultiTexImage2DEXT(enum texunit, enum target, int level,
                                          enum internalformat,
                                          sizei width, sizei height,
                                          int border, sizei imageSize,
                                          const void *data);
        void CompressedMultiTexImage1DEXT(enum texunit, enum target, int level,
                                          enum internalformat,
                                          sizei width, int border,
                                          sizei imageSize, const void *data);
        void CompressedMultiTexSubImage3DEXT(enum texunit, enum target, int level,
                                             int xoffset, int yoffset,
                                             int zoffset,
                                             sizei width, sizei height,
                                             sizei depth, enum format,
                                             sizei imageSize, const void *data);
        void CompressedMultiTexSubImage2DEXT(enum texunit, enum target, int level,
                                             int xoffset, int yoffset,
                                             sizei width, sizei height,
                                             enum format,
                                             sizei imageSize, const void *data);
        void CompressedMultiTexSubImage1DEXT(enum texunit, enum target, int level,
                                             int xoffset, sizei width,
                                             enum format,
                                             sizei imageSize, const void *data);

        void GetCompressedMultiTexImageEXT(enum texunit, enum target,
                                           int level, void *img);

    <OpenGL 1.3: New transpose matrix commands add "Matrix" suffix
    to name, drops "Matrix" suffix from name, and add initial "enum
    matrixMode" parameter>

        void MatrixLoadTransposefEXT(enum matrixMode, const float *m);
        void MatrixLoadTransposedEXT(enum matrixMode, const double *m);

        void MatrixMultTransposefEXT(enum matrixMode, const float *m);
        void MatrixMultTransposedEXT(enum matrixMode, const double *m);

    <OpenGL 1.5: New buffer commands and queries replace "Buffer" with
    "NamedBuffer" in name and replace "enum target" parameter with
    "uint buffer">

        void NamedBufferDataEXT(uint buffer, sizeiptr size,
                                const void *data, enum usage);
        void NamedBufferSubDataEXT(uint buffer, intptr offset,
                                   sizeiptr size, const void *data);
        void* MapNamedBufferEXT(uint buffer, enum access);
        boolean UnmapNamedBufferEXT(uint buffer);
        void GetNamedBufferParameterivEXT(uint buffer,
                                          enum pname, int *params);
        void GetNamedBufferPointervEXT(uint buffer,
                                       enum pname, void* *params);
        void GetNamedBufferSubDataEXT(uint buffer,
                                      intptr offset, sizeiptr size, void *data);

    <OpenGL 2.0: New uniform commands add "Program" prefix to name and
    add initial "uint program" parameter>

        void ProgramUniform1fEXT(uint program, int location, float v0);
        void ProgramUniform2fEXT(uint program, int location,
                                 float v0, float v1);
        void ProgramUniform3fEXT(uint program, int location,
                                 float v0, float v1, float v2);
        void ProgramUniform4fEXT(uint program, int location,
                                 float v0, float v1, float v2, float v3);

        void ProgramUniform1iEXT(uint program, int location, int v0);
        void ProgramUniform2iEXT(uint program, int location,
                                 int v0, int v1);
        void ProgramUniform3iEXT(uint program, int location,
                                 int v0, int v1, int v2);
        void ProgramUniform4iEXT(uint program, int location,
                                 int v0, int v1, int v2, int v3);

        void ProgramUniform1fvEXT(uint program, int location,
                                  sizei count, const float *value);
        void ProgramUniform2fvEXT(uint program, int location,
                                  sizei count, const float *value);
        void ProgramUniform3fvEXT(uint program, int location,
                                  sizei count, const float *value);
        void ProgramUniform4fvEXT(uint program, int location,
                                  sizei count, const float *value);

        void ProgramUniform1ivEXT(uint program, int location,
                                  sizei count, const int *value);
        void ProgramUniform2ivEXT(uint program, int location,
                                  sizei count, const int *value);
        void ProgramUniform3ivEXT(uint program, int location,
                                  sizei count, const int *value);
        void ProgramUniform4ivEXT(uint program, int location,
                                  sizei count, const int *value);

        void ProgramUniformMatrix2fvEXT(uint program, int location,
                                        sizei count, boolean transpose,
                                        const float *value);
        void ProgramUniformMatrix3fvEXT(uint program, int location,
                                        sizei count, boolean transpose,
                                        const float *value);
        void ProgramUniformMatrix4fvEXT(uint program, int location,
                                        sizei count, boolean transpose,
                                        const float *value);

    <OpenGL 2.1: New uniform matrix commands add "Program" prefix to
    name and add initial "uint program" parameter>

        void ProgramUniformMatrix2x3fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);
        void ProgramUniformMatrix3x2fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);
        void ProgramUniformMatrix2x4fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);
        void ProgramUniformMatrix4x2fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);
        void ProgramUniformMatrix3x4fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);
        void ProgramUniformMatrix4x3fvEXT(uint program, int location,
                                          sizei count, boolean transpose,
                                          const float *value);

    <EXT_texture_buffer_object:  New texture buffer object command
    replaces "Tex" in name with "Texture" and adds initial "uint texture"
    parameter>

        void TextureBufferEXT(uint texture, enum target,
                              enum internalformat, uint buffer);

    <EXT_texture_buffer_object: New multitexture texture buffer command
    prefixes "Multi" before "Tex" and add an initial "enum texunit"
    parameter (to identify the texture unit).>

        void MultiTexBufferEXT(enum texunit, enum target,
                               enum internalformat, uint buffer);

    <EXT_texture_integer: New integer texture object commands and queries
    replace "Tex" in name with "Texture" and add initial "uint texture"
    parameter>

        void TextureParameterIivEXT(uint texture, enum target,
                                    enum pname, const int *params);
        void TextureParameterIuivEXT(uint texture, enum target,
                                     enum pname, const uint *params);

        void GetTextureParameterIivEXT(uint texture, enum target,
                                       enum pname, int *params);
        void GetTextureParameterIuivEXT(uint texture, enum target,
                                        enum pname, uint *params);

    <EXT_texture_integer: New multitexture integer texture commands and
    queries prefix "Multi" before "Tex" and add an initial "enum texunit"
    parameter (to identify the texture unit).>

        void MultiTexParameterIivEXT(enum texunit, enum target,
                                     enum pname, const int *params);
        void MultiTexParameterIuivEXT(enum texunit, enum target,
                                      enum pname, const uint *params);

        void GetMultiTexParameterIivEXT(enum texunit, enum target,
                                        enum pname, int *params);
        void GetMultiTexParameterIuivEXT(enum texunit, enum target,
                                         enum pname, uint *params);

    <EXT_gpu_shader4: New integer uniform commands add "Program" prefix
    to name and add initial "uint program" parameter>

        void ProgramUniform1uiEXT(uint program, int location, uint v0);
        void ProgramUniform2uiEXT(uint program, int location,
                                  uint v0, uint v1);
        void ProgramUniform3uiEXT(uint program, int location,
                                  uint v0, uint v1, uint v2);
        void ProgramUniform4uiEXT(uint program, int location,
                                  uint v0, uint v1, uint v2, uint v3);

        void ProgramUniform1uivEXT(uint program, int location,
                                   sizei count, const uint *value);
        void ProgramUniform2uivEXT(uint program, int location,
                                   sizei count, const uint *value);
        void ProgramUniform3uivEXT(uint program, int location,
                                   sizei count, const uint *value);
        void ProgramUniform4uivEXT(uint program, int location,
                                   sizei count, const uint *value);

    <EXT_gpu_program_parameters: New program command adds "Named" prefix
    to name and adds "uint program" parameter>

        void NamedProgramLocalParameters4fvEXT(uint program, enum target,
                                               uint index, sizei count,
                                               const float *params); 

    <NV_gpu_program4: New program commands and queries add "Named"
    prefix to name and replace "enum target" with "uint program">

        void NamedProgramLocalParameterI4iEXT(uint program, enum target,
                                              uint index, 
                                              int x, int y,
                                              int z, int w);
        void NamedProgramLocalParameterI4ivEXT(uint program, enum target,
                                               uint index, 
                                               const int *params);
        void NamedProgramLocalParametersI4ivEXT(uint program, enum target,
                                                uint index, sizei count,
                                                const int *params);
        void NamedProgramLocalParameterI4uiEXT(uint program, enum target,
                                               uint index, 
                                               uint x, uint y,
                                               uint z, uint w);
        void NamedProgramLocalParameterI4uivEXT(uint program, enum target,
                                                uint index, 
                                                const uint *params);
        void NamedProgramLocalParametersI4uivEXT(uint program, enum target,
                                                 uint index, sizei count,
                                                 const uint *params);

        void GetNamedProgramLocalParameterIivEXT(uint program, enum target,
                                                 uint index,
                                                 int *params);
        void GetNamedProgramLocalParameterIuivEXT(uint program, enum target,
                                                  uint index,
                                                  uint *params);

    <OpenGL 3.0: New renderbuffer commands add "Named" prefix to name
    and replace "enum target" with "uint renderbuffer">

        void NamedRenderbufferStorageEXT(uint renderbuffer,
                                         enum internalformat,
                                         sizei width, sizei height);

        void GetNamedRenderbufferParameterivEXT(uint renderbuffer,
                                                enum pname, int *params);

    <OpenGL 3.0: New renderbuffer commands add "Named"
    prefix to name and replace "enum target" with "uint renderbuffer">

        void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer,
                                                    sizei samples,
                                                    enum internalformat,
                                                    sizei width, sizei height);

    <NV_framebuffer_multisample_coverage: New renderbuffer commands
    add "Named" prefix to name and replace "enum target" with "uint
    renderbuffer">

        void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer,
                                                            sizei coverageSamples, 
                                                            sizei colorSamples,
                                                            enum internalformat,
                                                            sizei width,
                                                            sizei height);

    <OpenGL 3.0: New framebuffer commands add "Named" prefix to name
    and replace "enum target" with "uint framebuffer">

        enum CheckNamedFramebufferStatusEXT(uint framebuffer,
                                            enum target);

        void NamedFramebufferTexture1DEXT(uint framebuffer,
                                          enum attachment,
                                          enum textarget, uint texture,
                                          int level);
        void NamedFramebufferTexture2DEXT(uint framebuffer,
                                          enum attachment,
                                          enum textarget, uint texture,
                                          int level);
        void NamedFramebufferTexture3DEXT(uint framebuffer,
                                          enum attachment,
                                          enum textarget, uint texture,
                                          int level, int zoffset);

        void NamedFramebufferRenderbufferEXT(uint framebuffer,
                                             enum attachment,
                                             enum renderbuffertarget,
                                             uint renderbuffer);

        void GetNamedFramebufferAttachmentParameterivEXT(uint framebuffer,
                                                         enum attachment,
                                                         enum pname,
                                                         int *params);

    <OpenGL 3.0: New texture commands add "Texture" within name and
    replace "enum target" with "uint texture">

        void GenerateTextureMipmapEXT(uint texture, enum target);

    <OpenGL 3.0: New texture commands add "MultiTex" within name and
    replace "enum target" with "enum texunit">

        void GenerateMultiTexMipmapEXT(enum texunit, enum target);

    <OpenGL 3.0: New framebuffer commands>

        void FramebufferDrawBufferEXT(uint framebuffer, enum mode);
        void FramebufferDrawBuffersEXT(uint framebuffer, sizei n,
                                       const enum *bufs)
        void FramebufferReadBufferEXT(uint framebuffer, enum mode);

    <OpenGL 3.0: New framebuffer query>

        void GetFramebufferParameterivEXT(uint framebuffer, enum pname,
                                          int *param);

    <OpenGL 3.0: New buffer data copy command>
        void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, 
                                       intptr readOffset, intptr writeOffset,
                                       sizeiptr size);

    <EXT_geometry_shader4 or NV_gpu_program4: New framebuffer commands
    add "Named" prefix to name and replace "enum target" with "uint
    framebuffer">

        void NamedFramebufferTextureEXT(uint framebuffer, enum attachment, 
                                        uint texture, int level);
        void NamedFramebufferTextureLayerEXT(uint framebuffer,
                                             enum attachment, 
                                             uint texture,
                                             int level, int layer);
        void NamedFramebufferTextureFaceEXT(uint framebuffer, enum attachment,
                                            uint texture,
                                            int level, enum face);

    <NV_explicit_multisample:  New texture renderbuffer object command
    replaces "Tex" in name with "Texture" and add initial "uint texture"
    parameter> 

        void TextureRenderbufferEXT(uint texture, enum target,
                                    uint renderbuffer);

    <NV_explicit_multisample: New multitexture texture renderbuffer command
    prefixes "Multi" before "Tex" and add an initial "enum texunit"
    parameter (to identify the texture unit)>

        void MultiTexRenderbufferEXT(enum texunit, enum target,
                                     uint renderbuffer);

    <OpenGL 3.0: New vertex array specification commands for vertex
    array objects prefix "VertexArray", add initial "uint vaobj" and
    "uint buffer" parameters, change "Pointer" suffix to "Offset",
    and change the final parameter from "const void *" to "intptr offset">

        void VertexArrayVertexOffsetEXT(uint vaobj, uint buffer,
                                        int size, enum type, sizei stride,
                                        intptr offset);
        void VertexArrayColorOffsetEXT(uint vaobj, uint buffer,
                                       int size, enum type, sizei stride,
                                       intptr offset);
        void VertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer,
                                          sizei stride, intptr offset);
        void VertexArrayIndexOffsetEXT(uint vaobj, uint buffer,
                                       enum type, sizei stride,
                                       intptr offset);
        void VertexArrayNormalOffsetEXT(uint vaobj, uint buffer,
                                        enum type, sizei stride,
                                        intptr offset);
        void VertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer,
                                          int size, enum type, sizei stride,
                                          intptr offset);
        void VertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer,
                                               enum texunit,
                                               int size, enum type, sizei stride,
                                               intptr offset);
        void VertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer,
                                          enum type, sizei stride,
                                          intptr offset);
        void VertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer,
                                                int size, enum type,
                                                sizei stride, intptr offset);
        void VertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer,
                                              uint index, int size,
                                              enum type, boolean normalized,
                                              sizei stride, intptr offset);
        void VertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer,
                                               uint index, int size,
                                               enum type, sizei stride,
                                               intptr offset);

    <OpenGL 3.0: New vertex array enable commands for vertex array
    objects change "ClientState" to "VertexArray" and add an initial
    "uint vaobj" parameter>

        void EnableVertexArrayEXT(uint vaobj, enum array);
        void DisableVertexArrayEXT(uint vaobj, enum array);

    <OpenGL 3.0: New vertex attrib array enable commands for vertex
    array objects change "VertexAttribArray" to "VertexArrayAttrib"
    and add an initial "uint vaobj" parameter>

        void EnableVertexArrayAttribEXT(uint vaobj, uint index);
        void DisableVertexArrayAttribEXT(uint vaobj, uint index);

    <OpenGL 3.0: New queries for vertex array objects>

        void GetVertexArrayIntegervEXT(uint vaobj, enum pname,
                                       int *param);
        void GetVertexArrayPointervEXT(uint vaobj, enum pname,
                                       void **param);
        void GetVertexArrayIntegeri_vEXT(uint vaobj,
                                         uint index,
                                         enum pname,
                                         int *param);
        void GetVertexArrayPointeri_vEXT(uint vaobj,
                                         uint index,
                                         enum pname,
                                         void **param);

    <OpenGL 3.0: New buffer commands replace "Buffer" with "NamedBuffer"
    in name and replace "enum target" parameter with "uint buffer">

        void *MapNamedBufferRangeEXT(uint buffer, intptr offset,
                                     sizeiptr length, bitfield access);
        void FlushMappedNamedBufferRangeEXT(uint buffer, intptr offset,
                                            sizeiptr length);

New Tokens


        PROGRAM_MATRIX_EXT                              0x8E2D
        TRANSPOSE_PROGRAM_MATRIX_EXT                    0x8E2E
        PROGRAM_MATRIX_STACK_DEPTH_EXT                  0x8E2F

