Name

    EXT_vertex_shader

Name Strings

    GL_EXT_vertex_shader

Contact

    Benj Lipchak, AMD (benj.lipchak 'at' amd.com)
    Evan Hart, NVIDIA (ehart 'at' nvidia.com)
    Dave Gosselin

Version

    Date: 11/04/2006
    Revision: 1.01

Number

    248

Dependencies

    This spec is written against the 1.2.1 version of the GL spec.

    ARB_imaging affects the definition of this spec.

Overview

    EXT_vertex_shader adds a flexible way to change the per-vertex
    processing in the GL pipeline. It provides a method to replace
    the fixed vertex/normal transform and lighting with a user
    specified means of generating processed vertices, texture
    coordinates, color, and secondary color, along with a primitive's
    associated state.

Issues

    How should the user be told that their shader doesn't fit and/or
    won't run well with the hardware? Some kind of GetError() value or
    a return value from EndShader()?

        This is accomplished using GetIntegerv, GetFloatv, and
        GetDoubleV to return a maximum value for Instructions,
        constants, and volatiles as well as returned the numbers 
        of these resources consumed by the current shader.
    
    Is lighting or texture coordinate generation performed when a user
    defined vertex shader is enabled.

        No. The shader writer is responsible for generating any
        texture coordinates and color values.

    Should we have separate per-vertex calls for SetDataEXT?

        Yes. Changed to SetVariant and SetShaderState.

    Should SwizzleEXT and WriteMaskEXT be an op-code or possibly
    combined into a new API call that takes enums?

        No, they are different enough to have their own entry point.

    Does there need to be a call to get the size of a potentially
    optimized shader, potentially using some kind of proxy
    mechanism?

        The implementation dependent state values seem to provide
        enough info.

    Should more GL state be available for use by the shader (e.g.
    enable/disable states for lights)?

        No, enough flexibility is already provided.

    Should we give the opcode enumerants data type names or leave them
    generic?

        This presents an interesting question in that the 
        trade off is a more simple, concise interface for more
        difficult validation on the part of the implementation.

    How should client-defined clip planes be handled?

        Client clip-planes should be applied in the output coordinate
        frame. When a vertex shader is invoked, the eye-space
        clipping planes are transformed by the current projection
        matrix and are applied after the primitive is assembled from
        the transformed vertices. 

  What are better names for GenData/SetData?
  
     These are misleading, and they should be changed. The primary
     hurdle is devising a better set of names.
     
     RESOLVED: New names implemented
     
  Should the *Transform* calls be replaced with a different moniker?
  
     Possibly, the term transform is somewhat narrow for the
     functionality. The term shader has been suggested. It seems
     like a good choice as it fits with the RenderMan style
     terminology already in use.

     RESOLVED: Shader will be used.
     
  How should RasterPos be affected by this extension?
  
     It is probably confusing to have RasterPos affected by
     this extension, so it should be disallowed.
     
  How should the arrays/indexing be handled?
  
     The index operation should be more strictly defined
     to only operate on contiguous name sets allocated by a
     single GenSymbols call. Alternatively, it may be useful to
     enforce that data to be used as arrays be given a special
     designation. 

  Should color-index mode be included?

     No, all computations are supported for RGB only.



New Procedure and Functions

    void BeginVertexShaderEXT( void )
    void EndVertexShaderEXT( void )
    void BindVertexShaderEXT( GLuint id )
    uint GenVertexShadersEXT( GLuint range )
    void DeleteVertexShaderEXT( GLuint id )
    void ShaderOp1EXT( enum op, uint res, uint arg1 )
    void ShaderOp2EXT( enum op, uint res, uint arg1, uint arg2 )
    void ShaderOp3EXT( enum op, uint res, uint arg1, uint arg2, uint arg3 )
    void SwizzleEXT( uint res, uint in, enum outX, enum outY, enum outZ, 
                     enum outW )
    void WriteMaskEXT( uint res, uint in, enum outX, enum outY, enum outZ
                       enum outW )
    void InsertComponentEXT( uint res, uint src, uint num )
    void ExtractComponentEXT( uint res, uint src, uint num )
    uint GenSymbolsEXT( enum datatype, enum storagetype, enum range,
                     uint components ) 
    void SetInvariantEXT( uint id, enum type, void *addr )
    void SetLocalConstantEXT( uint id, enum type, void *addr )
    void Variant{bsifd ubusui}vEXT( uint id, T *addr )
    void VariantPointerEXT( uint id, enum type, uint stride, void *addr )
    void EnableVariantClientStateEXT( uint id)
    void DisableVariantClientStateEXT( uint id)
    uint BindLightParameterEXT( enum light, enum value)
    uint BindMaterialParameterEXT( enum face, enum value)
    uint BindTexGenParameterEXT( enum unit, enum coord, enum value)
    uint BindTextureUnitParameterEXT( enum unit, enum value)
    uint BindParameterEXT( enum value)
    boolean IsVariantEnabledEXT( uint id, enum cap);
    void GetVariantBooleanvEXT( uint id, enum value, boolean *data);
    void GetVariantIntegervEXT( uint id, enum value, int *data);
    void GetVariantFloatvEXT( uint id, enum value, float *data);
    void GetVariantPointervEXT( uint id, enum value, void **data);
    void GetInvariantBooleanvEXT( uint id, enum value, boolean *data);
    void GetInvariantIntegervEXT( uint id, enum value, int *data);
    void GetInvariantFloatvEXT( uint id, enum value, float *data);
    void GetLocalConstantBooleanvEXT( uint id, enum value, boolean *data);
    void GetLocalConstantIntegervEXT( uint id, enum value, int *data);
    void GetLocalConstantFloatvEXT( uint id, enum value, float *data);

New Tokens


      VERTEX_SHADER_EXT                   0x8780


      VARIANT_VALUE_EXT                   0x87E4
      VARIANT_DATATYPE_EXT                0x87E5
      VARIANT_ARRAY_STRIDE_EXT            0x87E6
      VARIANT_ARRAY_TYPE_EXT              0x87E7


      VARIANT_ARRAY_EXT                   0x87E8


      VARIANT_ARRAY_POINTER_EXT           0x87E9


      INVARIANT_VALUE_EXT                 0x87EA
      INVARIANT_DATATYPE_EXT              0x87EB


      LOCAL_CONSTANT_VALUE_EXT            0x87EC
      LOCAL_CONSTANT_DATATYPE_EXT         0x87ED


      OP_INDEX_EXT                        0x8782
      OP_NEGATE_EXT                       0x8783
      OP_DOT3_EXT                         0x8784
      OP_DOT4_EXT                         0x8785
      OP_MUL_EXT                          0x8786
      OP_ADD_EXT                          0x8787
      OP_MADD_EXT                         0x8788
      OP_FRAC_EXT                         0x8789
      OP_MAX_EXT                          0x878A
      OP_MIN_EXT                          0x878B
      OP_SET_GE_EXT                       0x878C
      OP_SET_LT_EXT                       0x878D
      OP_CLAMP_EXT                        0x878E
      OP_FLOOR_EXT                        0x878F
      OP_ROUND_EXT                        0x8790
      OP_EXP_BASE_2_EXT                   0x8791
      OP_LOG_BASE_2_EXT                   0x8792
      OP_POWER_EXT                        0x8793
      OP_RECIP_EXT                        0x8794
      OP_RECIP_SQRT_EXT                   0x8795
      OP_SUB_EXT                          0x8796
      OP_CROSS_PRODUCT_EXT                0x8797
      OP_MULTIPLY_MATRIX_EXT              0x8798
      OP_MOV_EXT                          0x8799


      OUTPUT_VERTEX_EXT                   0x879A
      OUTPUT_COLOR0_EXT                   0x879B
      OUTPUT_COLOR1_EXT                   0x879C
      OUTPUT_TEXTURE_COORD0_EXT           0x879D
      OUTPUT_TEXTURE_COORD1_EXT           0x879E
      OUTPUT_TEXTURE_COORD2_EXT           0x879F
      OUTPUT_TEXTURE_COORD3_EXT           0x87A0
      OUTPUT_TEXTURE_COORD4_EXT           0x87A1
      OUTPUT_TEXTURE_COORD5_EXT           0x87A2
      OUTPUT_TEXTURE_COORD6_EXT           0x87A3
      OUTPUT_TEXTURE_COORD7_EXT           0x87A4
      OUTPUT_TEXTURE_COORD8_EXT           0x87A5
      OUTPUT_TEXTURE_COORD9_EXT           0x87A6
      OUTPUT_TEXTURE_COORD10_EXT          0x87A7
      OUTPUT_TEXTURE_COORD11_EXT          0x87A8
      OUTPUT_TEXTURE_COORD12_EXT          0x87A9
      OUTPUT_TEXTURE_COORD13_EXT          0x87AA
      OUTPUT_TEXTURE_COORD14_EXT          0x87AB
      OUTPUT_TEXTURE_COORD15_EXT          0x87AC
      OUTPUT_TEXTURE_COORD16_EXT          0x87AD
      OUTPUT_TEXTURE_COORD17_EXT          0x87AE
      OUTPUT_TEXTURE_COORD18_EXT          0x87AF
      OUTPUT_TEXTURE_COORD19_EXT          0x87B0
      OUTPUT_TEXTURE_COORD20_EXT          0x87B1
      OUTPUT_TEXTURE_COORD21_EXT          0x87B2
      OUTPUT_TEXTURE_COORD22_EXT          0x87B3
      OUTPUT_TEXTURE_COORD23_EXT          0x87B4
      OUTPUT_TEXTURE_COORD24_EXT          0x87B5
      OUTPUT_TEXTURE_COORD25_EXT          0x87B6
      OUTPUT_TEXTURE_COORD26_EXT          0x87B7
      OUTPUT_TEXTURE_COORD27_EXT          0x87B8
      OUTPUT_TEXTURE_COORD28_EXT          0x87B9
      OUTPUT_TEXTURE_COORD29_EXT          0x87BA
      OUTPUT_TEXTURE_COORD30_EXT          0x87BB
      OUTPUT_TEXTURE_COORD31_EXT          0x87BC
      OUTPUT_FOG_EXT                      0x87BD


      SCALAR_EXT                          0x87BE
      VECTOR_EXT                          0x87BF
      MATRIX_EXT                          0x87C0


      VARIANT_EXT                         0x87C1
      INVARIANT_EXT                       0x87C2
      LOCAL_CONSTANT_EXT                  0x87C3
      LOCAL_EXT                           0x87C4


      MAX_VERTEX_SHADER_INSTRUCTIONS_EXT              0x87C5
      MAX_VERTEX_SHADER_VARIANTS_EXT                  0x87C6
      MAX_VERTEX_SHADER_INVARIANTS_EXT                0x87C7
      MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT           0x87C8
      MAX_VERTEX_SHADER_LOCALS_EXT                    0x87C9
      MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT    0x87CA
      MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT        0x87CB
      MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
      MAX_OPTIMIZED_VERTEX_SHADER_INARIANTS_EXT       0x87CD
      MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT          0x87CE
      VERTEX_SHADER_INSTRUCTIONS_EXT                  0x87CF
      VERTEX_SHADER_VARIANTS_EXT                      0x87D0
      VERTEX_SHADER_INVARIANTS_EXT                    0x87D1
      VERTEX_SHADER_LOCAL_CONSTANTS_EXT               0x87D2
      VERTEX_SHADER_LOCALS_EXT                        0x87D3
      VERTEX_SHADER_BINDING_EXT                       0x8781


      VERTEX_SHADER_OPTIMIZED_EXT                     0x87D4


      X_EXT                               0x87D5
      Y_EXT                               0x87D6
      Z_EXT                               0x87D7
      W_EXT                               0x87D8
      NEGATIVE_X_EXT                      0x87D9
      NEGATIVE_Y_EXT                      0x87DA
      NEGATIVE_Z_EXT                      0x87DB
      NEGATIVE_W_EXT                      0x87DC
      ZERO_EXT                            0x87dd
      ONE_EXT                             0x87de
      NEGATIVE_ONE_EXT                    0x87DF


      NORMALIZED_RANGE_EXT                    0x87E0
      FULL_RANGE_EXT                          0x87E1


      CURRENT_VERTEX_EXT                  0x87E2
      MVP_MATRIX_EXT                      0x87E3

      
   
