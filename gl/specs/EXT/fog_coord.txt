Name

    EXT_fog_coord

Name Strings

    GL_EXT_fog_coord

Contact

    Jon Leech, Silicon Graphics (ljp 'at' sgi.com)

Status

    Shipping (version 1.6)

Version

    $Date: 1999/06/21 19:57:19 $ $Revision: 1.11 $

Number

    149

Dependencies

    OpenGL 1.1 is required.
    The extension is written against the OpenGL 1.2 Specification.

Overview

    This extension allows specifying an explicit per-vertex fog
    coordinate to be used in fog computations, rather than using a
    fragment depth-based fog equation.

Issues

  * Should the specified value be used directly as the fog weighting
    factor, or in place of the z input to the fog equations?

        As the z input; more flexible and meets ISV requests.

  * Do we want vertex array entry points? Interleaved array formats?

        Yes for entry points, no for interleaved formats, following the
        argument for secondary_color.

  * Which scalar types should FogCoord accept? The full range, or just
    the unsigned and float versions? At the moment it follows Index(),
    which takes unsigned byte, signed short, signed int, float, and
    double.

        Since we're now specifying a number which behaves like an
        eye-space distance, rather than a [0,1] quantity, integer types
        are less useful. However, restricting the commands to floating
        point forms only introduces some nonorthogonality.

        Restrict to only float and double, for now.

  * Interpolation of the fog coordinate may be perspective-correct or
    not. Should this be affected by PERSPECTIVE_CORRECTION_HINT,
    FOG_HINT, or another to-be-defined hint?

        PERSPECTIVE_CORRECTION_HINT; this is already defined to affect
        all interpolated parameters. Admittedly this is a loss of
        orthogonality.

  * Should the current fog coordinate be queryable?

        Yes, but it's not returned by feedback.

  * Control the fog coordinate source via an Enable instead of a fog
    parameter?

        No. We might want to add more sources later.

  * Should the fog coordinate be restricted to non-negative values?

        Perhaps. Eye-coordinate distance of fragments will be
        non-negative due to clipping. Specifying explicit negative
        coordinates may result in very large computed f values, although
        they are defined to be clipped after computation.

  * Use existing DEPTH enum instead of FRAGMENT_DEPTH? Change name of
    FRAGMENT_DEPTH_EXT to FOG_FRAGMENT_DEPTH_EXT?

        Use FRAGMENT_DEPTH_EXT; FOG_FRAGMENT_DEPTH_EXT is somewhat
        misleading, since fragment depth itself has no dependence on
        fog.

New Procedures and Functions

    void FogCoord[fd]EXT(T coord)
    void FogCoord[fd]vEXT(T coord)
    void FogCoordPointerEXT(enum type, sizei stride, void *pointer)

New Tokens


        FOG_COORDINATE_SOURCE_EXT           0x8450


        FOG_COORDINATE_EXT                  0x8451
        FRAGMENT_DEPTH_EXT                  0x8452


        CURRENT_FOG_COORDINATE_EXT          0x8453
        FOG_COORDINATE_ARRAY_TYPE_EXT       0x8454
        FOG_COORDINATE_ARRAY_STRIDE_EXT     0x8455


        FOG_COORDINATE_ARRAY_POINTER_EXT    0x8456


        FOG_COORDINATE_ARRAY_EXT            0x8457

