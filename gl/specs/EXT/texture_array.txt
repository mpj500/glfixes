Name

    EXT_texture_array

Name Strings

    GL_EXT_texture_array

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Contributors

    Jon Leech, Khronos
    Mark Kilgard, NVIDIA

Status

    Shipping for GeForce 8 Series (November 2006, Release 95)

Version

    Last Modified Date:         9/16/2008
    Author revision:            8

Number

    329

Dependencies

    This extension is written against the OpenGL 2.0 specification and version
    1.10.59 of the OpenGL Shading Language specification.

    This extension is interacts with EXT_framebuffer_object.

    This extension interacts with NV_geometry_program4.

    This extension interacts with NV_gpu_program4 or the OpenGL Shading
    Language, which provide the mechanisms necessary to access array textures.

    This extension interacts with EXT_texture_compression_s3tc and
    NV_texture_compression_vtc.

Overview

    This extension introduces the notion of one- and two-dimensional array
    textures.  An array texture is a collection of one- and two-dimensional
    images of identical size and format, arranged in layers.  A
    one-dimensional array texture is specified using TexImage2D; a
    two-dimensional array texture is specified using TexImage3D.  The height
    (1D array) or depth (2D array) specify the number of layers in the image.

    An array texture is accessed as a single unit in a programmable shader,
    using a single coordinate vector.  A single layer is selected, and that
    layer is then accessed as though it were a one- or two-dimensional
    texture.  The layer used is specified using the "t" or "r" texture
    coordinate for 1D and 2D array textures, respectively.  The layer
    coordinate is provided as an unnormalized floating-point value in the
    range [0,<n>-1], where <n> is the number of layers in the array texture.
    Texture lookups do not filter between layers, though such filtering can be
    achieved using programmable shaders.  When mipmapping is used, each level
    of an array texture has the same number of layers as the base level; the
    number of layers is not reduced as the image size decreases.

    Array textures can be rendered to by binding them to a framebuffer object
    (EXT_framebuffer_object).  A single layer of an array texture can be bound
    using normal framebuffer object mechanisms, or an entire array texture can
    be bound and rendered to using the layered rendering mechanisms provided
    by NV_geometry_program4.

    This extension does not provide for the use of array textures with
    fixed-function fragment processing.  Such support could be added by
    providing an additional extension allowing applications to pass the new
    target enumerants (TEXTURE_1D_ARRAY_EXT and TEXTURE_2D_ARRAY_EXT) to
    Enable and Disable.

New Procedures and Functions

    void FramebufferTextureLayerEXT(enum target, enum attachment,
                                    uint texture, int level, int layer);

New Tokens


        TEXTURE_1D_ARRAY_EXT                            0x8C18
        TEXTURE_2D_ARRAY_EXT                            0x8C1A


        PROXY_TEXTURE_2D_ARRAY_EXT                      0x8C1B


        PROXY_TEXTURE_1D_ARRAY_EXT                      0x8C19


        TEXTURE_BINDING_1D_ARRAY_EXT                    0x8C1C
        TEXTURE_BINDING_2D_ARRAY_EXT                    0x8C1D
        MAX_ARRAY_TEXTURE_LAYERS_EXT                    0x88FF


        COMPARE_REF_DEPTH_TO_TEXTURE_EXT                0x884E





        FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT          0x8CD4



        SAMPLER_1D_ARRAY_EXT                             0x8DC0
        SAMPLER_2D_ARRAY_EXT                             0x8DC1
        SAMPLER_1D_ARRAY_SHADOW_EXT                      0x8DC3
        SAMPLER_2D_ARRAY_SHADOW_EXT                      0x8DC4

