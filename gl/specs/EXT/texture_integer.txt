Name

    EXT_texture_integer

Name Strings

    GL_EXT_texture_integer

Contact

    Michael Gold, NVIDIA Corporation (gold 'at' nvidia.com)
    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006)

Version

    Last Modified Date:         05/20/2010
    NVIDIA Revision:            6

Number

    343

Dependencies

    OpenGL 2.0 is required.

    NV_gpu_program4 or EXT_gpu_shader4 is required.

    ARB_texture_float affects the definition of this extension.

    ARB_color_buffer_float affects the definition of this extension.

    EXT_framebuffer_object affects the definition of this extension.

    This extension is written against the OpenGL 2.0 specification.

Overview

    Fixed-point textures in unextended OpenGL have integer components,
    but those values are taken to represent floating-point values in
    the range [0,1].  These integer components are considered
    "normalized" integers.  When such a texture is accessed by a
    shader or by fixed-function fragment processing, floating-point
    values are returned.

    This extension provides a set of new "unnormalized" integer texture
    formats.  Formats with both signed and unsigned integers are provided.  In
    these formats, the components are treated as true integers.  When such
    textures are accessed by a shader, actual integer values are returned.

    Pixel operations that read from or write to a texture or color
    buffer with unnormalized integer components follow a path similar
    to that used for color index pixel operations, except that more
    than one component may be provided at once.  Integer values flow
    through the pixel processing pipe, and no pixel transfer
    operations are performed.  Integer format enumerants used for such
    operations indicate unnormalized integer data.

    Textures or render buffers with unnormalized integer formats may also be
    attached to framebuffer objects to receive fragment color values written
    by a fragment shader.  Per-fragment operations that require floating-point
    color components, including multisample alpha operations, alpha test,
    blending, and dithering, have no effect when the corresponding colors are
    written to an integer color buffer.  The NV_gpu_program4 and
    EXT_gpu_shader4 extensions add the capability to fragment programs and
    fragment shaders to write signed and unsigned integer output values.

    This extension does not enforce type consistency for texture accesses or
    between fragment shaders and the corresponding framebuffer attachments.
    The results of a texture lookup from an integer texture are undefined:

      * for fixed-function fragment processing, or

      * for shader texture accesses expecting floating-point return values.  

    The color components used for per-fragment operations and written into a
    color buffer are undefined:

      * for fixed-function fragment processing with an integer color buffer,

      * for fragment shaders that write floating-point color components to an
        integer color buffer, or

      * for fragment shaders that write integer color components to a color
        buffer with floating point or normalized integer components.


New Procedures and Functions

    void ClearColorIiEXT ( int r, int g, int b, int a );
    void ClearColorIuiEXT ( uint r, uint g, uint b, uint a );
    void TexParameterIivEXT( enum target, enum pname, int *params );
    void TexParameterIuivEXT( enum target, enum pname, uint *params );
    void GetTexParameterIivEXT ( enum target, enum pname, int *params);
    void GetTexParameterIuivEXT ( enum target, enum pname, uint *params);

New Tokens


        RGBA_INTEGER_MODE_EXT                           0x8D9E


        RGBA32UI_EXT                                    0x8D70
        RGB32UI_EXT                                     0x8D71
        ALPHA32UI_EXT                                   0x8D72
        INTENSITY32UI_EXT                               0x8D73
        LUMINANCE32UI_EXT                               0x8D74
        LUMINANCE_ALPHA32UI_EXT                         0x8D75

        RGBA16UI_EXT                                    0x8D76
        RGB16UI_EXT                                     0x8D77
        ALPHA16UI_EXT                                   0x8D78
        INTENSITY16UI_EXT                               0x8D79
        LUMINANCE16UI_EXT                               0x8D7A
        LUMINANCE_ALPHA16UI_EXT                         0x8D7B

        RGBA8UI_EXT                                     0x8D7C
        RGB8UI_EXT                                      0x8D7D
        ALPHA8UI_EXT                                    0x8D7E
        INTENSITY8UI_EXT                                0x8D7F
        LUMINANCE8UI_EXT                                0x8D80
        LUMINANCE_ALPHA8UI_EXT                          0x8D81

        RGBA32I_EXT                                     0x8D82
        RGB32I_EXT                                      0x8D83
        ALPHA32I_EXT                                    0x8D84
        INTENSITY32I_EXT                                0x8D85
        LUMINANCE32I_EXT                                0x8D86
        LUMINANCE_ALPHA32I_EXT                          0x8D87

        RGBA16I_EXT                                     0x8D88
        RGB16I_EXT                                      0x8D89
        ALPHA16I_EXT                                    0x8D8A
        INTENSITY16I_EXT                                0x8D8B
        LUMINANCE16I_EXT                                0x8D8C
        LUMINANCE_ALPHA16I_EXT                          0x8D8D

        RGBA8I_EXT                                      0x8D8E
        RGB8I_EXT                                       0x8D8F
        ALPHA8I_EXT                                     0x8D90
        INTENSITY8I_EXT                                 0x8D91
        LUMINANCE8I_EXT                                 0x8D92
        LUMINANCE_ALPHA8I_EXT                           0x8D93


        RED_INTEGER_EXT                                 0x8D94
        GREEN_INTEGER_EXT                               0x8D95
        BLUE_INTEGER_EXT                                0x8D96
        ALPHA_INTEGER_EXT                               0x8D97
        RGB_INTEGER_EXT                                 0x8D98
        RGBA_INTEGER_EXT                                0x8D99
        BGR_INTEGER_EXT                                 0x8D9A
        BGRA_INTEGER_EXT                                0x8D9B
        LUMINANCE_INTEGER_EXT                           0x8D9C
        LUMINANCE_ALPHA_INTEGER_EXT                     0x8D9D

