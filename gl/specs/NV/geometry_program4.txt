Name

    NV_geometry_program4

Name Strings

    (none)

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006)

Version

    Last Modified Date:         12/14/09
    NVIDIA Revision:            13

Number

    323

Dependencies

    OpenGL 1.1 is required.

    This extension is written against the OpenGL 2.0 specification.

    NV_gpu_program4 is required.  This extension is supported if
    "GL_NV_gpu_program4" is found in the extension string.

    EXT_framebuffer_object interacts with this extension.

    EXT_framebuffer_blit interacts with this extension.

    EXT_texture_array interacts with this extension.

    ARB_texture_rectangle trivially affects the definition of this extension.

    EXT_texture_buffer_object trivially affects the definition of this
    extension.

    NV_primitive_restart trivially affects the definition of this extension.

Overview

    NV_geometry_program4 defines a new type of program available to be run on
    the GPU, called a geometry program.  Geometry programs are run on full
    primitives after vertices are transformed, but prior to flat shading and
    clipping.

    A geometry program begins with a single primitive - a point, line, or
    triangle.  Quads and polygons are allowed, but are decomposed into
    individual triangles prior to geometry program execution.  It can read the
    attributes of any of the vertex in the primitive and use them to generate
    new primitives.  A geometry program has a fixed output primitive type,
    either a point, a line strip, or a triangle strip.  It emits vertices
    (using the EMIT opcode) to define the output primitive.  The attributes of
    emitted vertices are specified by writing to the same set of result
    bindings (e.g., "result.position") provided for vertex programs.
    Additionally, a geometry program can emit multiple disconnected primitives
    by using the ENDPRIM opcode, which is roughly equivalent to calling End
    and then Begin again.  The primitives emitted by the geometry program are
    then clipped and then processed like an equivalent OpenGL primitive
    specified by the application.

    This extension provides four additional primitive types:  lines with
    adjacency, line strips with adjacency, separate triangles with adjacency,
    and triangle strips with adjacency.  Some of the vertices specified in
    these new primitive types are not part of the ordinary primitives.
    Instead, they represent neighboring vertices that are adjacent to the two
    line segment end points (lines/strips) or the three triangle edges
    (triangles/tstrips).  These "adjacency" vertices can be accessed by
    geometry programs and used to match up the outputs of the geometry program
    with those of neighboring primitives.

    Additionally, geometry programs allow for layered rendering, where entire
    three-dimensional, cube map, or array textures (EXT_texture_array) can be
    bound to the current framebuffer.  Geometry programs can use the
    "result.layer" binding to select a layer or cube map face to render to.
    Each primitive emitted by such a geometry program is rendered to the layer
    taken from its provoking vertex.

    Since geometry programs expect a specific input primitive type, an error
    will occur if the application presents primtives of a different type.  For
    example, if an enabled geometry program expects points, an error will
    occur at Begin() time, if a primitive mode of TRIANGLES is specified.

New Procedures and Functions

    void ProgramVertexLimitNV(enum target, int limit);

    void FramebufferTextureEXT(enum target, enum attachment,
                               uint texture, int level);
    void FramebufferTextureLayerEXT(enum target, enum attachment,
                                    uint texture, int level, int layer);
    void FramebufferTextureFaceEXT(enum target, enum attachment,
                                   uint texture, int level, enum face);

New Tokens


        GEOMETRY_PROGRAM_NV                             0x8C26


        MAX_PROGRAM_OUTPUT_VERTICES_NV                  0x8C27
        MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV          0x8C28
        GEOMETRY_VERTICES_OUT_EXT                       0x8DDA
        GEOMETRY_INPUT_TYPE_EXT                         0x8DDB
        GEOMETRY_OUTPUT_TYPE_EXT                        0x8DDC


        MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT            0x8C29


        LINES_ADJACENCY_EXT                             0xA
        LINE_STRIP_ADJACENCY_EXT                        0xB
        TRIANGLES_ADJACENCY_EXT                         0xC
        TRIANGLE_STRIP_ADJACENCY_EXT                    0xD


        FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT        0x8DA8
        FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT          0x8DA9


        FRAMEBUFFER_ATTACHMENT_LAYERED_EXT              0x8DA7
        FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT        0x8CD4


        PROGRAM_POINT_SIZE_EXT                          0x8642



        
