Name

    NV_transform_feedback

Name Strings

    GL_NV_transform_feedback

Contributors

    Cliff Woolley
    Nick Carter

Contact

    Barthold Lichtenbelt (blichtenbelt 'at' nvidia.com)
    Pat Brown (pbrown 'at' nvidia.com)
    Eric Werness (ewerness 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006) 

Version

    Last Modified Date:         03/09/2011
    NVIDIA Revision:            18

Number

    341

Dependencies

    OpenGL 1.5 is required.

    This extension interacts with EXT_timer_query.

    NV_vertex_program4, NV_geometry_program4 and NV_gpu_program4 affect this
    extension.

    EXT_geometry_shader4 trivially interacts with this extension.

    This extension has an OpenGL Shading Language component.  As such it
    interacts with ARB_shader_objects and OpenGL 2.0.

    This extension is written against the OpenGL 2.0 specification.

Overview

    This extension provides a new mode to the GL, called transform feedback,
    which records vertex attributes of the primitives processed by the GL.
    The selected attributes are written into buffer objects, and can be
    written with each attribute in a separate buffer object or with all
    attributes interleaved into a single buffer object.  If a geometry program
    or shader is active, the primitives recorded are those emitted by the
    geometry program.  Otherwise, transform feedback captures primitives whose
    vertex are transformed by a vertex program or shader, or by fixed-function
    vertex processing.  In either case, the primitives captured are those
    generated prior to clipping.  Transform feedback mode is capable of
    capturing transformed vertex data generated by fixed-function vertex
    processing, outputs from assembly vertex or geometry programs, or varying
    variables emitted from GLSL vertex or geometry shaders.

    The vertex data recorded in transform feedback mode is stored into buffer
    objects as an array of vertex attributes.  The regular representation and
    the use of buffer objects allows the recorded data to be processed
    directly by the GL without requiring CPU intervention to copy data.  In
    particular, transform feedback data can be used for vertex arrays (via
    vertex buffer objects), as the source for pixel data (via pixel buffer
    objects), as program constant data (via the NV_parameter_buffer_object or
    EXT_bindable_uniform extension), or via any other extension that makes use
    of buffer objects.

    This extension introduces new query object support to allow transform
    feedback mode to operate asynchronously.  Query objects allow applications
    to determine when transform feedback results are complete, as well as the
    number of primitives processed and written back to buffer objects while in
    transform feedback mode.  This extension also provides a new rasterizer
    discard enable, which allows applications to use transform feedback to
    capture vertex attributes without rendering anything.

New Procedures and Functions

    void BindBufferRangeNV(enum target, uint index, uint buffer,
                           intptr offset, sizeiptr size)
    void BindBufferOffsetNV(enum target, uint index, uint buffer,
                            intptr offset)
    void BindBufferBaseNV(enum target, uint index, uint buffer)
    void TransformFeedbackAttribsNV(sizei count, const int *attribs,
                                    enum bufferMode)
    void TransformFeedbackVaryingsNV(uint program, sizei count,
                                     const int *locations,
                                     enum bufferMode)
    void BeginTransformFeedbackNV(enum primitiveMode)
    void EndTransformFeedbackNV()

    int GetVaryingLocationNV(uint program, const char *name)
    void GetActiveVaryingNV(uint program, uint index,
                            sizei bufSize, sizei *length, sizei *size,
                            enum *type, char *name)
    void ActiveVaryingNV(uint program, const char *name)
    void GetTransformFeedbackVaryingNV(uint program, uint index,
                                       int *location)

    void GetIntegerIndexedvEXT(enum param, uint index, int *values);
    void GetBooleanIndexedvEXT(enum param, uint index, boolean *values);

    (Note: These indexed query functions are provided in the EXT_draw_buffers2
    extension.  The boolean query is not useful for any queryable value in
    this extension, but is supported for completeness and consistency with
    base GL typed "Get" functions.)


New Tokens


      TRANSFORM_FEEDBACK_BUFFER_NV                      0x8C8E


      TRANSFORM_FEEDBACK_BUFFER_START_NV                0x8C84
      TRANSFORM_FEEDBACK_BUFFER_SIZE_NV                 0x8C85
      TRANSFORM_FEEDBACK_RECORD_NV                      0x8C86


      TRANSFORM_FEEDBACK_BUFFER_BINDING_NV              0x8C8F


      INTERLEAVED_ATTRIBS_NV                            0x8C8C
      SEPARATE_ATTRIBS_NV                               0x8C8D


      PRIMITIVES_GENERATED_NV                           0x8C87
      TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV          0x8C88


      RASTERIZER_DISCARD_NV                             0x8C89


      MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV  0x8C8A
      MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV        0x8C8B
      MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV     0x8C80
      TRANSFORM_FEEDBACK_ATTRIBS_NV                     0x8C7E


      ACTIVE_VARYINGS_NV                                0x8C81
      ACTIVE_VARYING_MAX_LENGTH_NV                      0x8C82
      TRANSFORM_FEEDBACK_VARYINGS_NV                    0x8C83


      TRANSFORM_FEEDBACK_BUFFER_MODE_NV                 0x8C7F


      BACK_PRIMARY_COLOR_NV                             0x8C77
      BACK_SECONDARY_COLOR_NV                           0x8C78
      TEXTURE_COORD_NV                                  0x8C79
      CLIP_DISTANCE_NV                                  0x8C7A
      VERTEX_ID_NV                                      0x8C7B
      PRIMITIVE_ID_NV                                   0x8C7C
      GENERIC_ATTRIB_NV                                 0x8C7D
      POINT_SIZE                                        0x0B11
      FOG_COORDINATE                                    0x8451
      SECONDARY_COLOR_NV                                0x852D
      PRIMARY_COLOR                                     0x8577
      POSITION                                          0x1203
      LAYER_NV                                          0x8DAA



      UNSIGNED_INT_VEC2_EXT                             0x8DC6
      UNSIGNED_INT_VEC3_EXT                             0x8DC7
      UNSIGNED_INT_VEC4_EXT                             0x8DC8


