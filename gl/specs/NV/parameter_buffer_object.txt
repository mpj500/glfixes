Name

    NV_parameter_buffer_object

Name Strings

    None (implied by NV_gpu_program4)

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)
    Eric Werness, NVIDIA Corporation (ewerness 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006)

Version

    Last Modified Date:         03/09/2011
    NVIDIA Revision:            9

Number

    339

Dependencies

    OpenGL 2.0 is required.

    NV_gpu_program4 is required.

    This extension is written against the OpenGL 2.0 specification.

    NV_transform_feedback affects this extension.

    OpenGL 3.0 affects this extension.

Overview

    This extension, in conjunction with NV_gpu_program4, provides a new type
    of program parameter than can be used as a constant during vertex,
    fragment, or geometry program execution.  Each program target has a set of
    parameter buffer binding points to which buffer objects can be attached.

    A vertex, fragment, or geometry program can read data from the attached
    buffer objects using a binding of the form "program.buffer[a][b]".  This
    binding reads data from the buffer object attached to binding point <a>.
    The buffer object attached is treated either as an array of 32-bit words
    or an array of four-component vectors, and the binding above reads the
    array element numbered <b>.

    The use of buffer objects allows applications to change large blocks of
    program parameters at once, simply by binding a new buffer object.  It
    also provides a number of new ways to load parameter values, including
    readback from the frame buffer (EXT_pixel_buffer_object), transform
    feedback (NV_transform_feedback), buffer object loading functions such as
    MapBuffer and BufferData, as well as dedicated parameter buffer update
    functions provided by this extension.

New Procedures and Functions

    void BindBufferRangeNV(enum target, uint index, uint buffer,
                           intptr offset, sizeiptr size);
    void BindBufferOffsetNV(enum target, uint index, uint buffer,
                            intptr offset);
    void BindBufferBaseNV(enum target, uint index, uint buffer);
    void ProgramBufferParametersfvNV(enum target, uint bindingIndex, uint wordIndex,
                                     sizei count, const float *params);
    void ProgramBufferParametersIivNV(enum target, uint bindingIndex, uint wordIndex, 
                                      sizei count, const int *params);
    void ProgramBufferParametersIuivNV(enum target, uint bindingIndex, uint wordIndex, 
                                       sizei count, const uint *params);
    void GetIntegerIndexedvEXT(enum value, uint index, int *data);

New Tokens


      MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV          0x8DA0
      MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV              0x8DA1


      VERTEX_PROGRAM_PARAMETER_BUFFER_NV                0x8DA2
      GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV              0x8DA3
      FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV              0x8DA4

