Name

    NV_gpu_program4

Name Strings

    GL_NV_gpu_program4

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006) 

Version

    Last Modified Date:         09/11/2014
    NVIDIA Revision:            11

Number

    322

Dependencies

    This extension is written against to OpenGL 2.0 specification.  

    OpenGL 2.0 is not required, but we expect all implementations of this
    extension will also support OpenGL 2.0.

    This extension is also written against the ARB_vertex_program
    specification, which provides the basic mechanisms for the assembly
    programming model used by this extension.

    This extension serves as the basis for the NV_fragment_program4,
    NV_geometry_program4, and NV_vertex_program4, which all build on this
    extension to support fragment, geometry, and vertex programs,
    respectively.  If "GL_NV_gpu_program4" is found in the extension string,
    all of these extensions are supported.

    NV_parameter_buffer_object affects the definition of this extension.

    ARB_texture_rectangle trivially affects the definition of this extension.

    EXT_gpu_program_parameters trivially affects the definition of this
    extension.

    EXT_texture_integer trivially affects the definition of this extension.

    EXT_texture_array trivially affects the definition of this extension.

    EXT_texture_buffer_object trivially affects the definition of this
    extension.

    NV_primitive_restart trivially affects the definition of this extension.

Overview

    This specification documents the common instruction set and basic
    functionality provided by NVIDIA's 4th generation of assembly instruction
    sets supporting programmable graphics pipeline stages.  

    The instruction set builds upon the basic framework provided by the
    ARB_vertex_program and ARB_fragment_program extensions to expose
    considerably more capable hardware.  In addition to new capabilities for
    vertex and fragment programs, this extension provides a new program type
    (geometry programs) further described in the NV_geometry_program4
    specification.

    NV_gpu_program4 provides a unified instruction set -- all instruction set
    features are available for all program types, except for a small number of
    features that make sense only for a specific program type.  It provides
    fully capable signed and unsigned integer data types, along with a set of
    arithmetic, logical, and data type conversion instructions capable of
    operating on integers.  It also provides a uniform set of structured
    branching constructs (if tests, loops, and subroutines) that fully support
    run-time condition testing.

    This extension provides several new texture mapping capabilities.  Shadow
    cube maps are supported, where cube map faces can encode depth values.
    Texture lookup instructions can include an immediate texel offset, which
    can assist in advanced filtering.  New instructions are provided to fetch
    a single texel by address in a texture map (TXF) and query the size of a
    specified texture level (TXQ).

    By and large, vertex and fragment programs written to ARB_vertex_program
    and ARB_fragment_program can be ported directly by simply changing the
    program header from "!!ARBvp1.0" or "!!ARBfp1.0" to "!!NVvp4.0" or
    "!!NVfp4.0", and then modifying the code to take advantage of the expanded
    feature set.  There are a small number of areas where this extension is
    not a functional superset of previous vertex program extensions, which are
    documented in this specification.


New Procedures and Functions

    void ProgramLocalParameterI4iNV(enum target, uint index, 
                                    int x, int y, int z, int w);
    void ProgramLocalParameterI4ivNV(enum target, uint index, 
                                     const int *params);
    void ProgramLocalParametersI4ivNV(enum target, uint index, 
                                      sizei count, const int *params);
    void ProgramLocalParameterI4uiNV(enum target, uint index, 
                                     uint x, uint y, uint z, uint w);
    void ProgramLocalParameterI4uivNV(enum target, uint index, 
                                      const uint *params);
    void ProgramLocalParametersI4uivNV(enum target, uint index, 
                                       sizei count, const uint *params);

    void ProgramEnvParameterI4iNV(enum target, uint index, 
                                  int x, int y, int z, int w);
    void ProgramEnvParameterI4ivNV(enum target, uint index, 
                                   const int *params);
    void ProgramEnvParametersI4ivNV(enum target, uint index, 
                                    sizei count, const int *params);
    void ProgramEnvParameterI4uiNV(enum target, uint index, 
                                   uint x, uint y, uint z, uint w);
    void ProgramEnvParameterI4uivNV(enum target, uint index, 
                                    const uint *params);
    void ProgramEnvParametersI4uivNV(enum target, uint index, 
                                     sizei count, const uint *params);

    void GetProgramLocalParameterIivNV(enum target, uint index,
                                       int *params);
    void GetProgramLocalParameterIuivNV(enum target, uint index,
                                        uint *params);
    void GetProgramEnvParameterIivNV(enum target, uint index,
                                     int *params);
    void GetProgramEnvParameterIuivNV(enum target, uint index,
                                      uint *params);

New Tokens



        MIN_PROGRAM_TEXEL_OFFSET_EXT                    0x8904
        MAX_PROGRAM_TEXEL_OFFSET_EXT                    0x8905



        PROGRAM_ATTRIB_COMPONENTS_NV                    0x8906
        PROGRAM_RESULT_COMPONENTS_NV                    0x8907
        MAX_PROGRAM_ATTRIB_COMPONENTS_NV                0x8908
        MAX_PROGRAM_RESULT_COMPONENTS_NV                0x8909
        MAX_PROGRAM_GENERIC_ATTRIBS_NV                  0x8DA5
        MAX_PROGRAM_GENERIC_RESULTS_NV                  0x8DA6
      
