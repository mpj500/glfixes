Name 

    NV_video_output

Name Strings 

    GLX_NV_video_out

Contact 

    Thomas True, Nvidia, ttrue@nvidia.com
    Ian Williams, Nvidia, iwilliams@nvidia.com
    Martin Schwarzer, Nvidia, mschwarzer@nvidia.com
    Andy Ritger, Nvidia, aritger@nvidia.com

Status 

    Shipping since 2004 for NVIDIA Quadro SDI (Serial Digital Interface)

Version 
    Last Modified:      2014/06/04
    NVIDIA Revision:    8

Number 

    348

Dependencies 

    OpenGL 1.1 is required.
    GLX 1.3 is required.

Overview 

    This extension permits a color and or depth buffer of a pbuffer to
    be used for rendering and subsequent video output.  After a pbuffer 
    has been bound to a video device, subsequent color and or depth 
    rendering into that buffer may be displayed on the video output.

    This is intended for use with NVIDIA products such as the Quadro FX
    4000 SDI.

Issues 

 1. Should the new pbuffer attributes be available through GL queries? 

    No, like other pbuffer attributes you need to query them through the 
    window system extension. This extension does not make any changes to 
    OpenGL. 

 2. Should glXSendPbufferToVideoNV require that the pbuffer be current?

Implementation Notes

 1. Any created pbuffers must be the same resolution as that specified
    by the state of the video output device.  The current state of the
    video output device can be queried via the NV-CONTROL X extension.

 2. Applications may use a single pbuffer or a collection of pbuffers
    to send frames/fields to a video device.  In the first case, an
    application should block on the call to glXSendPbufferToVideoNV() to
    ensure synchronization.  In the second case, an application should
    utilize glXGetVideoInfoNV() in order to query vblank and
    buffer counters for synchronization.

Intended Usage 

    1) Configure the video output device via the NV-CONTROL X extension.

    2) Use glXGetFBConfigs or glXChooseFBConfig to find a suitable
       FBConfig for rendering images.  GLX_DRAWABLE_TYPE must have
       GLX_PBUFFER_BIT set.  The per-component pixel depth of the pbuffer
       must be equal to or greater than the per-component depth of the
       video output.

    3) Create a GLXPbuffer for each stream of video by calling
       glXCreatePbuffer.  Set the width and height for each GLXPbuffer
       to match that of the intended video output device.

    4) Call glXGetVideoDeviceNV to retrieve the handles for all 
       video devices available.  A video device handle is required
       for each video stream.  glXGetVideoDeviceNV will lock the
       video device for exclusive use by this GLX client.  The NV-CONTROL
       X extension will not be able to update video out attributes until
       the video device is released with glXReleaseVideoDeviceNV.

    5) Call glXBindVideoImageNV to bind each GLXPbuffer to a
       corresponding video device handle.  Multiple pbuffers can
       be bound, at the same time, to the same video device.

    6) Render the current frame/field for each stream to one of the bound
       GLXPbuffers. Once rendering is complete, call
       glXSendPbufferToVideoNV to send each frame/field to the video
       device.

    7) Render subsequent video frames or fields calling
       glXSendPbufferToVideoNV() at the completion of rendering for
       each frame/field.

    8) Call glXReleaseVideoImageNV to unbind each GLXPbuffer
       from its associated video device.

    9) Call glXReleaseVideoDeviceNV to release the video device.

New Types
    
    /*
     * GLXVideoDeviceNV is an opaque handle to a video device.
     */
    typedef unsigned int GLXVideoDeviceNV;


New Procedures and Functions 

    int glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices,
                            GLXVideoDeviceNV *pVideoDevice);

    int glXReleaseVideoDeviceNV(Display *dpy, int screen,
                                GLXVideoDeviceNV VideoDevice);

    int glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice,
                            GLXPbuffer pbuf, int iVideoBuffer);

    int glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf);

    int glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf,
                                int iBufferType,
                                unsigned long *pulCounterPbuffer,
                                GLboolean bBlock);

    int glXGetVideoInfoNV(Display *dpy, int screen,
                          GLXVideoDeviceNV VideoDevice,
                          unsigned long *pulCounterOutputPbuffer,
                          unsigned long *pulCounterOutputVideo);

New Tokens 


        GLX_VIDEO_OUT_COLOR_NV                          0x20C3
        GLX_VIDEO_OUT_ALPHA_NV                          0x20C4
        GLX_VIDEO_OUT_DEPTH_NV                          0x20C5
        GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV                0x20C6
        GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV                0x20C7


        GLX_VIDEO_OUT_FRAME_NV                          0x20C8
        GLX_VIDEO_OUT_FIELD_1_NV                        0x20C9
        GLX_VIDEO_OUT_FIELD_2_NV                        0x20CA
        GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV             0x20CB
        GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV             0x20CC

