Name

    NV_bindless_texture

Name Strings

    GL_NV_bindless_texture

Contact

    Jeff Bolz, NVIDIA Corporation (jbolz 'at' nvidia.com)
    Pat Brown, NVIDIA Coproration (pbrown 'at' nvidia.com)

Contributors

    Daniel Koch, NVIDIA

Version

    Last Modified Date:   June 13, 2014
    Author Revision:      3

Number

    OpenGL Extension #418
    OpenGL ES Extension #197

Dependencies

    This extension is written against the OpenGL 4.0 (Compatibility Profile)
    and OpenGL Shading Language 4.00 Specifications.

    OpenGL 4.0 or later is required for an OpenGL implementation.

    The GLSL portion of this extension requires NV_gpu_shader5, or a similar
    extension providing 64-bit integer support in the shading language.

    This extension interacts with OpenGL 4.0 (Core Profile).

    This extension interacts with OpenGL 3.3 and ARB_sampler_objects.

    This extension interacts with OpenGL 4.2, ARB_shader_image_load_store, and
    EXT_shader_image_load_store.

    This extension interacts with NV_vertex_attrib_integer_64bit.

    This extension interacts with NV_gpu_shader5.

    This extension interacts with EXT_direct_state_access.

    This extension interacts with ARB_seamless_cube_map and
    AMD_seamless_cubemap_per_texture.

    This extension interacts with NV_gpu_program4, NV_gpu_program5, and
    EXT_shader_image_load_store.

    This extension interacts with GLSL 4.20.

    OpenGL ES 3.0 or later is required for an OpenGL ES implementation.

    This extension interacts with OpenGL ES 3.1.

    This extension interacts with OES_shader_image_atomic.

    This extension interacts with EXT_texture_cube_map_array.

    This extension interacts with EXT_texture_buffer.

    This extension interacts with EXT_shader_io_blocks.

New Procedures and Functions

    uint64 GetTextureHandleNV(uint texture);
    uint64 GetTextureSamplerHandleNV(uint texture, uint sampler);

    void MakeTextureHandleResidentNV(uint64 handle);
    void MakeTextureHandleNonResidentNV(uint64 handle);

    uint64 GetImageHandleNV(uint texture, int level, boolean layered,
                            int layer, enum format);

    void MakeImageHandleResidentNV(uint64 handle, enum access);
    void MakeImageHandleNonResidentNV(uint64 handle);

    void UniformHandleui64NV(int location, uint64 value);
    void UniformHandleui64vNV(int location, sizei count, const uint64 *value);
    void ProgramUniformHandleui64NV(uint program, int location,
                                    uint64 value);
    void ProgramUniformHandleui64vNV(uint program, int location,
                                     sizei count, const uint64 *values);

    boolean IsTextureHandleResidentNV(uint64 handle);
    boolean IsImageHandleResidentNV(uint64 handle);


New Tokens



