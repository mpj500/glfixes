Name
    
    NV_texgen_emboss

Name Strings

    GL_NV_texgen_emboss

Contact

    Mark J. Kilgard, NVIDIA Corporation (mjk 'at' nvidia.com)

Notice

    Copyright NVIDIA Corporation, 1999, 2001.

IP Status

    NVIDIA Proprietary.

Status

    Discontinued.

    NVIDIA no longer supports this extension in driver updates
    after November 2002.  Instead, use either ARB_vertex_program &
    NV_vertex_program.

Version

    NVIDIA Date: January 3, 2003
    $Date$ $Revision$
    $Id: //sw/main/docs/OpenGL/specs/old/GL_NV_texgen_emboss.txt#2 $

Number

    193

Dependencies

    ARB_multitexture.

    Written based on the wording of the OpenGL 1.2 specification and the
    ARB_multitexture extension.

Overview

    This extension provides a new texture coordinate generation mode
    suitable for multitexture-based embossing (or bump mapping) effects.

    Given two texture units, this extension generates the texture
    coordinates of a second texture unit (an odd-numbered texture unit)
    as a perturbation of a first texture unit (an even-numbered texture
    unit one less than the second texture unit).  The perturbation is
    based on the normal, tangent, and light vectors.  The normal vector
    is supplied by glNormal; the light vector is supplied as a direction
    vector to a specified OpenGL light's position; and the tanget
    vector is supplied by the second texture unit's current texture
    coordinate.  The perturbation is also scaled by program-supplied
    scaling constants.

    If both texture units are bound to the same texture representing a
    height field, by subtracting the difference between the resulting two
    filtered texels, programs can achieve a per-pixel embossing effect.

Issues

    Can you do embossing on any texture unit?

      NO.  Just odd numbered units.  This meets a constraint of the
      proposed hardware implementation, and because embossing takes two
      texture units anyway, it shouldn't be a real limitation.

    Can you just enable one coordinate of a texture unit for embossing?

      Yes but NOT REALLY.  The texture coordinate generation formula
      is specified such that only when ALL the coordinates are enabled
      and are using embossing, do you get the embossing computation.
      Otherwise, you get undefined values for texture coordinates enabled
      for texture coordinate generation and setup for embossing.

    Does the light specified have to be enabled for embossing to work?

      Yes, currently.  But perhaps we could require implementations to
      enable a phantom light (the light colors would be black).

    Could the emboss constant just be the reciprocal of the width and
    height of the texture units texture if that's what the programmer
    will have it be most of the time?

      NO.  Too much work and there may be reasons for the programmer to
      control this.

    OpenGL's base texture environment functionality isn't powerful enough
    to do the subtraction needed for embossing.  Where would you get
    powerful enough texture environment functionality.

      Another extension.  Try NV_register_combiners.

    What is the interpretation of CT?

      For the purposes of embossing, CT should be thought of as the
      vertex's tangent vector.  This tangent vector indicates the direction
      on the "surface" where PCTs is not changing and PCTt is increasing.

    Are the CT and PCT variables the user-supplied current texture
    coordinates?

      YES.  Except when the texture unit's texture coordinate evaluator
      is enabled, then CT and PCT use the respective evaluated texture
      coordinates.

      This extension specification's language "Denote as CT the texture
      unit's current texture coordinates" and "Denote as PCT the previous
      texture unit's current texture coordinates" refers to the "current
      texture coordinates" OpenGL state which is the state specified
      via glTexCoord.  Plus the exception for evaluators.

      To be explicit, PCT is NOT the result of texgen or the texture
      matrix.  Likewise, CT is NOT the result of texgen or the
      texture matrix.  PCT and CT are the respective texture unit's
      evaluated texture coordinate if the vertex is evaluated with
      texture coordinate evaluation enabled, otherwise if the vertex is
      generated via vertex arrays with the respective texture coordinate
      array enabled, the texture coordinate from the texture coordinate
      array, otherwise the respective current texture coordinate is used.

New Procedures and Functions

    None

New Tokens


        EMBOSS_MAP_NV                      0x855F



        EMBOSS_LIGHT_NV                    0x855D
        EMBOSS_CONSTANT_NV                 0x855E

