Name

    NV_vertex_program4

Name Strings

    (none)

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping for GeForce 8 Series (November 2006)

Version

    Last Modified Date:         12/14/09
    NVIDIA Revision:            7

Number

    325

Dependencies

    OpenGL 1.1 is required.

    This extension is written against the OpenGL 2.0 specification.

    ARB_vertex_program is required.

    NV_gpu_program4 is required.  This extension is supported if
    "GL_NV_gpu_program4" is found in the extension string.

    NVX_instanced_arrays affects the definition of this extension.

Overview

    This extension builds on the common assembly instruction set
    infrastructure provided by NV_gpu_program4, adding vertex program-specific
    features.

    This extension provides the ability to specify integer vertex attributes
    that are passed to vertex programs using integer data types, rather than
    being converted to floating-point values as in existing vertex attribute
    functions.  The set of input and output bindings provided includes all
    bindings supported by ARB_vertex_program.  This extension provides
    additional input bindings identifying the index of the vertex when vertex
    arrays are used ("vertex.id") and the instance number when instanced
    arrays are used ("vertex.instance", requires EXT_draw_instanced).  It
    also provides output bindings allowing vertex programs to directly specify
    clip distances (for user clipping) plus a set of generic attributes that
    allow programs to pass a greater number of attributes to subsequent
    pipeline stages than is possible using only the pre-defined fixed-function
    vertex outputs.

    By and large, programs written to ARB_vertex_program can be ported
    directly by simply changing the program header from "!!ARBvp1.0" to
    "!!NVvp4.0", and then modifying instructions to take advantage of the
    expanded feature set.  There are a small number of areas where this
    extension is not a functional superset of previous vertex program
    extensions, which are documented in the NV_gpu_program4 specification.

New Procedures and Functions

    void VertexAttribI1iEXT(uint index, int x);
    void VertexAttribI2iEXT(uint index, int x, int y);
    void VertexAttribI3iEXT(uint index, int x, int y, int z);
    void VertexAttribI4iEXT(uint index, int x, int y, int z, int w);

    void VertexAttribI1uiEXT(uint index, uint x);
    void VertexAttribI2uiEXT(uint index, uint x, uint y);
    void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z);
    void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);

    void VertexAttribI1ivEXT(uint index, const int *v);
    void VertexAttribI2ivEXT(uint index, const int *v);
    void VertexAttribI3ivEXT(uint index, const int *v);
    void VertexAttribI4ivEXT(uint index, const int *v);

    void VertexAttribI1uivEXT(uint index, const uint *v);
    void VertexAttribI2uivEXT(uint index, const uint *v);
    void VertexAttribI3uivEXT(uint index, const uint *v);
    void VertexAttribI4uivEXT(uint index, const uint *v);

    void VertexAttribI4bvEXT(uint index, const byte *v);
    void VertexAttribI4svEXT(uint index, const short *v);
    void VertexAttribI4ubvEXT(uint index, const ubyte *v);
    void VertexAttribI4usvEXT(uint index, const ushort *v);

    void VertexAttribIPointerEXT(uint index, int size, enum type,
                                sizei stride, const void *pointer);

    void GetVertexAttribIivEXT(uint index, enum pname, int *params);
    void GetVertexAttribIuivEXT(uint index, enum pname, uint *params);

    (note:  all these functions are shared with the EXT_gpu_shader4
    extension.)

New Tokens


      VERTEX_ATTRIB_ARRAY_INTEGER_EXT                   0x88FD


