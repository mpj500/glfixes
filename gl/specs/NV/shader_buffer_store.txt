Name

    NV_shader_buffer_store

Name Strings

    none (implied by GL_NV_gpu_program5 or GL_NV_gpu_shader5)

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping.

Version

    Last Modified Date:         August 13, 2012
    NVIDIA Revision:            5

Number

    390

Dependencies

    OpenGL 3.0 and GLSL 1.30 are required.

    This extension is written against the OpenGL 3.2 (Compatibility Profile)
    specification, dated July 24, 2009.

    This extension is written against version 1.50.09 of the OpenGL Shading
    Language Specification.

    OpenGL 3.0 and GLSL 1.30 are required.

    NV_shader_buffer_load is required.

    NV_gpu_program5 and/or NV_gpu_shader5 is required.

    This extension interacts with EXT_shader_image_load_store.

    This extension interacts with NV_gpu_shader5.

    This extension interacts with NV_gpu_program5.

    This extension interacts with GLSL 4.30, ARB_shader_storage_buffer_object, 
    and ARB_compute_shader.

Overview

    This extension builds upon the mechanisms added by the
    NV_shader_buffer_load extension to allow shaders to perform random-access
    reads to buffer object memory without using dedicated buffer object
    binding points.  Instead, it allowed an application to make a buffer
    object resident, query a GPU address (pointer) for the buffer object, and
    then use that address as a pointer in shader code.  This approach allows
    shaders to access a large number of buffer objects without needing to
    repeatedly bind buffers to a limited number of fixed-functionality binding
    points.

    This extension lifts the restriction from NV_shader_buffer_load that
    disallows writes.  In particular, the MakeBufferResidentNV function now
    allows READ_WRITE and WRITE_ONLY access modes, and the shading language is
    extended to allow shaders to write through (GPU address) pointers.
    Additionally, the extension provides built-in functions to perform atomic
    memory transactions to buffer object memory.

    As with the shader writes provided by the EXT_shader_image_load_store
    extension, writes to buffer object memory using this extension are weakly
    ordered to allow for parallel or distributed shader execution.  The
    EXT_shader_image_load_store extension provides mechanisms allowing for
    finer control of memory transaction order, and those mechanisms apply
    equally to buffer object stores using this extension.


New Procedures and Functions

    None.

New Tokens


        SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV             0x00000010




