Name

    NV_explicit_multisample

Name Strings

    NV_explicit_multisample

Contributors

    Eric Werness, NVIDIA Corporation
    Pat Brown, NVIDIA Corporation
    Jamie Gennis, NVIDIA Corporation
    Nacho Sanz-Pastor, Aechelon
    Mark Kilgard, NVIDIA Corporation

Contact

    Eric Werness, NVIDIA Corporation (ewerness 'at' nvidia.com)
    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Status

    Shipping in NVIDIA's Release 180 drivers (October 2008)

Version

    Last Modified Date:         10/27/08
    Revision:                   1

Number

    357

Dependencies

    OpenGL 2.0 is required.

    ARB_multisample is required.

    EXT_framebuffer_multisample affects the definition of this extension.

    NV_gpu_program4 affects the definition of this extension.

    EXT_gpu_shader4 affects the definition of this extension.

    EXT_timer_query affects the definition of this extension.

    This extension is written against the OpenGL 2.0 specification.

Overview

    In traditional multisample specs, the API only allows access to the samples
    indirectly through methods such as coverage values and downsampled
    readbacks. NV_explicit_multisample adds a set of new capabilities to allow
    more precise control over the use of multisamples. Specifically, it adds:

     * A query in the API to query the location of samples within the pixel

     * An explicit control for the multisample sample mask to augment the
       control provided by SampleCoverage

     * A new texture target to wrap a renderbuffer and allow a restricted class
       of accesses to the samples

     * The ability to fetch a specific sample from a multisampled texture from
       within a shader

     * A program option to enable the new behavior

New Procedures and Functions

    void GetBooleanIndexedvEXT(enum value, uint index, boolean *data);

    void GetIntegerIndexedvEXT(enum value, uint index, int *data);

    void GetMultisamplefvNV(enum pname, uint index, float *val);

    void SampleMaskIndexedNV(uint index, bitfield mask);

    void TexRenderbufferNV(enum target, uint renderbuffer);

New Tokens

    
        SAMPLE_POSITION_NV                          0x8E50


        SAMPLE_MASK_NV                              0x8E51


        SAMPLE_MASK_VALUE_NV                        0x8E52


        TEXTURE_BINDING_RENDERBUFFER_NV             0x8E53
        TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV  0x8E54
        MAX_SAMPLE_MASK_WORDS_NV                    0x8E59


        TEXTURE_RENDERBUFFER_NV                     0x8E55


        SAMPLER_RENDERBUFFER_NV                     0x8E56
        INT_SAMPLER_RENDERBUFFER_NV                 0x8E57
        UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV        0x8E58

