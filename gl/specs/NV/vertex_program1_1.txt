Name
    
    NV_vertex_program1_1

Name Strings

    GL_NV_vertex_program1_1

Contact

    Mark J. Kilgard, NVIDIA Corporation (mjk 'at' nvidia.com)

Contributors

    Pat Brown
    Erik Lindholm
    Steve Glanville
    Erik Faye-Lund

Notice

    Copyright NVIDIA Corporation, 2001, 2002.

IP Status

    NVIDIA Proprietary.

Status

    Version 1.0

Version

    NVIDIA Date: March 4, 2014
    Version:     8

Number

    266

Dependencies

    Written based on the wording of the OpenGL 1.2.1 specification and
    requires OpenGL 1.2.1.

    Assumes support for the NV_vertex_program extension.

Overview

    This extension adds four new vertex program instructions (DPH,
    RCC, SUB, and ABS).

    This extension also supports a position-invariant vertex program
    option.  A vertex program is position-invariant when it generates
    the _exact_ same homogenuous position and window space position
    for a vertex as conventional OpenGL transformation (ignoring vertex
    blending and weighting).

    By default, vertex programs are _not_ guaranteed to be
    position-invariant because there is no guarantee made that the way
    a vertex program might compute its homogenous position is exactly
    identical to the way conventional OpenGL transformation computes
    its homogenous positions.  In a position-invariant vertex program,
    the homogeneous position (HPOS) is not output by the program.
    Instead, the OpenGL implementation is expected to compute the HPOS
    for position-invariant vertex programs in a manner exactly identical
    to how the homogenous position and window position are computed
    for a vertex by conventional OpenGL transformation.  In this way
    position-invariant vertex programs guarantee correct multi-pass
    rendering semantics in cases where multiple passes are rendered and
    the second and subsequent passes use a GL_EQUAL depth test.

Issues

    How should options to the vertex program semantics be handled?

      RESOLUTION:  A VP1.1 vertex program can contain a sequence
      of options.  This extension provides a single option
      ("NV_position_invariant").  Specifying an option changes the
      way the program's subsequent instruction sequence are parsed,
      may add new semantic checks, and modifies the semantics by which
      the vertex program is executed.

    Should this extension provide SUB and ABS instructions even though
    the functionality can be accomplished with ADD and MAX?

      RESOLUTION:  Yes.  SUB and ABS provide no functionality that could
      not be accomplished in VP1.0 with ADD and MAX idioms, SUB and ABS
      provide more understanable vertex programs.

    Should the optionalSign in a VP1.1 accept both "-" and "+"?

      RESOLUTION:  Yes.  The "+" does not negate its operand but is
      available for symetry.

    Is relative addressing available to position-invariant version 1.1
    vertex programs?

      RESOLUTION:  No.  This reflects a hardware restriction.

    Should something be said about the relative performance of
    position-invariant vertex programs and conventional vertex programs?

      RESOLUTION:  For architectural reasons, position-invariant vertex
      programs may be _slightly_ faster than conventional vertex programs.
      This is true in the GeForce3 architecture.  If your vertex program
      transforms the object-space position to clip-space with four DP4
      instructions using the tracked GL_MODELVIEW_PROJECTION_NV matrix,
      consider using position-invariant vertex programs.  Do not expect a
      measurable performance improvement unless vertex program processing
      is your bottleneck and your vertex program is relatively short.

    Should position-invariant vertex programs have a lower limit on the
    maximum instructions?

      RESOLUTION:  Yes, the driver takes care to match the same
      instructions used for position transformation used by conventional
      transformation and this requires a few vertex program instructions.

New Procedures and Functions

    None.

New Tokens


