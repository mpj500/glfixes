Name

    AMD_gpu_association

Name Strings

    GLX_AMD_gpu_association

Contact

    David Mao, AMD (david.mao 'at' amd.com)

Status

    Complete

Version

    Last Modified Date: September 18, 2014
    Author Revision: 2

    Based on:  GLX_SGI_make_current_read specification
               Date: 3/20/1997

               EXT_framebuffer_object specification
               Date: 2/13/2007   Revision #119

Number

    398

Dependencies

    OpenGL 1.5 is required.

    GLX 1.3 is required.

    GL_EXT_framebuffer_object is required.

    GLX_ARB_get_proc_address is required.

    This extension interacts with GLX_SGI_make_current_read.

    This extension interacts with GL_EXT_framebuffer_blit.

    This extension interacts with GLX_ARB_create_context.

    This extension interacts with WGL_AMD_gpu_association.

Overview


    There currently is no way for applications to efficiently use GPU
    resources in systems that contain more than one GPU. Vendors have
    provided methods that attempt to split the workload for an
    application among the available GPU resources. This has proven to be
    very inefficient because most applications were never written with
    these sorts of optimizations in mind.

    This extension provides a mechanism for applications to explicitly
    use the GPU resources on a given system individually. By providing
    this functionality, a driver allows applications to make appropriate
    decisions regarding where and when to distribute rendering tasks.

    The set of GPUs available on a system can be queried by calling
    glXGetGPUIDsAMD. The current GPU assigned to a specific context
    can be determined by calling glXGetContextGPUIDAMD. Each GPU in a
    system may have different performance characteristics in addition
    to supporting a different version of OpenGL. The specifics of each
    GPU can be obtained by calling glXGetGPUInfo. This will allow
    applications to pick the most appropriate GPU for each rendering
    task.

    Once all necessary GPU information has been obtained, a context tied
    to a specific GPU can be created with glXCreateAssociatedContextAMD.
    These associated contexts can be made current with
    glXMakeAssociatedContextCurrentAMD and deleted with
    glXDeleteAssociatedContextAMD. Only one GPU associated or
    non-associated context can be current at one time per thread.

    To provide an accelerated path for blitting data from one context
    to another, the new blit function BlitContextFramebufferAMD has
    been added.




New Procedures and Functions

    unsigned int glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *ids);

    int   glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType,
                           unsigned int size, void *data)

    unsigned int glXGetContextGPUIDAMD(GLXContext ctx);

    GLXContext glXCreateAssociatedContextAMD(unsigned int id,
                                             GLXContext share_list);

    GLXContext glXCreateAssociatedContextAttribsAMD(unsigned int id,
                                                    GLXContext share_context,
                                                    const int *attribList);

    Bool glXDeleteAssociatedContextAMD(GLXContext ctx);

    Bool glXMakeAssociatedContextCurrentAMD(GLXContext ctx);

    GLXContext glXGetCurrentAssociatedContextAMD(void);

    void glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0,
                                      GLint srcX1, GLint srcY1, GLint dstX0,
                                      GLint dstY0, GLint dstX1, GLint dstY1,
                                      GLbitfield mask, GLenum filter);

New Tokens


      GLX_GPU_VENDOR_AMD                 0x1F00
      GLX_GPU_RENDERER_STRING_AMD        0x1F01
      GLX_GPU_OPENGL_VERSION_STRING_AMD  0x1F02
      GLX_GPU_FASTEST_TARGET_GPUS_AMD    0x21A2
      GLX_GPU_RAM_AMD                    0x21A3
      GLX_GPU_CLOCK_AMD                  0x21A4
      GLX_GPU_NUM_PIPES_AMD              0x21A5
      GLX_GPU_NUM_SIMD_AMD               0x21A6
      GLX_GPU_NUM_RB_AMD                 0x21A7
      GLX_GPU_NUM_SPI_AMD                0x21A8





