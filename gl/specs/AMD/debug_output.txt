Name

    AMD_debug_output
        
Name Strings

    GL_AMD_debug_output

Contact

    Jaakko Konttinen (jaakko.konttinen 'at' amd.com)

Contributors

    Graham Sellers, AMD
    Mark Young, AMD
    Ahmet Oguz Akyuz, AMD
    
Status
    
    Experimental
    
Version
    
    Last Modified Date: May 7, 2010
    Author Revision: 9

Number

    395

Dependencies

    OpenGL 1.1 is required.
    
    WGL_ARB_create_context or GLX_ARB_create_context is required.
    
    The extension is written against the OpenGL 3.0 specification.
    
    This extension trivially interacts with ARB_vertex_program and
    ARB_fragment_program.
    
Overview

    This extension allows the GL to notify applications when various
    debug events occur in contexts that have been created with the debug
    flag, as provided by WGL_ARB_create_context and GLX_ARB_create_context.
    
    These events are represented in the form of enumerable messages with an
    included human-readable translation.  Examples of debug events include
    incorrect use of the GL, warnings of undefined behavior, and performance
    warnings.
    
    A message is uniquely identified by a category and an implementation-
    dependent ID within that category.  Message categories are general and are
    used to organize large groups of similar messages together.  Examples of
    categories include GL errors, performance warnings, and deprecated
    functionality warnings.  Each message is also assigned a severity level
    that denotes roughly how "important" that message is in comparison to
    other messages across all categories.  For example, notification of a GL
    error would have a higher severity than a performance warning due to
    redundant state changes.
    
    Messages are communicated to the application through an application-defined
    callback function that is called by the GL implementation on each debug
    message.  The motivation for the callback routine is to free application
    developers from actively having to query whether any GL error or other
    debuggable event has happened after each call to a GL function.  With a
    callback, developers can keep their code free of debug checks, and only have
    to react to messages as they occur.  In order to support indirect rendering,
    a message log is also provided that stores copies of recent messages until
    they are actively queried.

    To control the volume of debug output, messages can be disabled either
    individually by ID, or entire groups of messages can be turned off based
    on category or severity.
    
    The only requirement on the minimum quantity and type of messages that
    implementations of this extension must support is that a message must be
    sent notifying the application whenever any GL error occurs.  Any further
    messages are left to the implementation.  Implementations do not have
    to output messages from all categories listed by this extension
    in order to support this extension, and new categories can be added by
    other extensions.

    This extension places no restrictions or requirements on any additional
    functionality provided by the debug context flag through other extensions. 
    
IP Status
    
    No known IP claims.
    
New Procedures and Functions
    
    void DebugMessageEnableAMD(enum category,
                               enum severity,
                               sizei count,
                               const uint* ids,
                               boolean enabled);

    void DebugMessageInsertAMD(enum category,
                               enum severity,
                               uint id,
                               sizei length, 
                               const char* buf);

    void DebugMessageCallbackAMD(DEBUGPROCAMD callback,
                                 void* userParam);
    
    uint GetDebugMessageLogAMD(uint count,
                               sizei bufsize,
                               enum* categories,
                               uint* severities,
                               uint* ids,
                               sizei* lengths, 
                               char* message);
    
New Types
    
    The callback function that applications can define, and
    is accepted by DebugMessageCallbackAMD, is defined as:
    
        typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,
                                                GLenum category,
                                                GLenum severity,
                                                GLsizei length,
                                                const GLchar* message,
                                                GLvoid* userParam);

    Note that this function pointer is defined as having the
    same calling convention as the GL functions.
    
New Tokens
    
    
        MAX_DEBUG_MESSAGE_LENGTH_AMD                    0x9143
        MAX_DEBUG_LOGGED_MESSAGES_AMD                   0x9144
        DEBUG_LOGGED_MESSAGES_AMD                       0x9145        


        DEBUG_SEVERITY_HIGH_AMD                         0x9146
        DEBUG_SEVERITY_MEDIUM_AMD                       0x9147
        DEBUG_SEVERITY_LOW_AMD                          0x9148


        DEBUG_CATEGORY_API_ERROR_AMD                    0x9149
        DEBUG_CATEGORY_WINDOW_SYSTEM_AMD                0x914A
        DEBUG_CATEGORY_DEPRECATION_AMD                  0x914B
        DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD           0x914C
        DEBUG_CATEGORY_PERFORMANCE_AMD                  0x914D
        DEBUG_CATEGORY_SHADER_COMPILER_AMD              0x914E
        DEBUG_CATEGORY_APPLICATION_AMD                  0x914F
        DEBUG_CATEGORY_OTHER_AMD                        0x9150

