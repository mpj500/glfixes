Name

    AMD_sparse_texture

Name Strings

    GL_AMD_sparse_texture

Contributors

    Graham Sellers, AMD
    Pierre Boudier, AMD
    Juraj Obert, AMD

Contact

    Graham Sellers, AMD (graham.sellers 'at' amd.com)

Status

    Shipping.

Version

    Last Modified Date:         03/27/2012
    AMD Revision:               6

Number

    426

Dependencies

    OpenGL 2.0 or ARB_fragment_shader is required.

    This extension is written against the OpenGL 4.2 (Core) Specification.

    This extension is written against the OpenGL Shading Language (GLSL)
    Specification, version 4.20.

Overview

    Recent advances in application complexity and a desire for higher
    resolutions have pushed texture sizes up considerably. Often, the amount
    of physical memory available to a graphics processor is a limiting factor
    in the performance of texture-heavy applications. Once the available
    physical memory is exhausted, paging may occur bringing performance down
    considerably - or worse, the application may fail. Nevertheless, the amount
    of address space available to the graphics processor has increased to the
    point where many gigabytes - or even terabytes of address space may be
    usable even though that amount of physical memory is not present.

    This extension allows the separation of the graphics processor's address
    space (reservation) from the requirement that all textures must be
    physically backed (commitment). This exposes a limited form of
    virtualization for textures. Use cases include sparse (or partially
    resident) textures, texture paging, on-demand and delayed loading of
    texture assets and application controlled level of detail.

New Procedures and Functions

        void TexStorageSparseAMD(enum target,
                                 enum internalFormat,
                                 sizei width,
                                 sizei height,
                                 sizei depth,
                                 sizei layers,
                                 bitfield flags);

        void TextureStorageSparseAMD(uint texture,
                                     enum target,
                                     enum internalFormat,
                                     sizei width,
                                     sizei height,
                                     sizei depth,
                                     sizei layers,
                                     bitfield flags);

New Tokens


        TEXTURE_STORAGE_SPARSE_BIT_AMD                  0x00000001


        VIRTUAL_PAGE_SIZE_X_AMD                         0x9195
        VIRTUAL_PAGE_SIZE_Y_AMD                         0x9196
        VIRTUAL_PAGE_SIZE_Z_AMD                         0x9197


        MAX_SPARSE_TEXTURE_SIZE_AMD                     0x9198
        MAX_SPARSE_3D_TEXTURE_SIZE_AMD                  0x9199
        MAX_SPARSE_ARRAY_TEXTURE_LAYERS                 0x919A


        MIN_SPARSE_LEVEL_AMD                            0x919B


        MIN_LOD_WARNING_AMD                             0x919C

